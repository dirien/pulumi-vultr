// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a DNS domain associated with your Vultr account.
//
// ## Example Usage
//
// Get the information for a DNS domain:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.LookupDnsDomain(ctx, &vultr.LookupDnsDomainArgs{
//				Domain: "example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsDomain(ctx *pulumi.Context, args *LookupDnsDomainArgs, opts ...pulumi.InvokeOption) (*LookupDnsDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsDomainResult
	err := ctx.Invoke("vultr:index/getDnsDomain:getDnsDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsDomain.
type LookupDnsDomainArgs struct {
	// The name you're searching for.
	Domain string `pulumi:"domain"`
}

// A collection of values returned by getDnsDomain.
type LookupDnsDomainResult struct {
	// The date the DNS domain was added to your Vultr account.
	DateCreated string `pulumi:"dateCreated"`
	// The Domain's DNSSEC status
	DnsSec string `pulumi:"dnsSec"`
	// Name of domain.
	Domain string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func LookupDnsDomainOutput(ctx *pulumi.Context, args LookupDnsDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDnsDomainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsDomainResultOutput, error) {
			args := v.(LookupDnsDomainArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDnsDomainResult
			secret, err := ctx.InvokePackageRaw("vultr:index/getDnsDomain:getDnsDomain", args, &rv, "", opts...)
			if err != nil {
				return LookupDnsDomainResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDnsDomainResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDnsDomainResultOutput), nil
			}
			return output, nil
		}).(LookupDnsDomainResultOutput)
}

// A collection of arguments for invoking getDnsDomain.
type LookupDnsDomainOutputArgs struct {
	// The name you're searching for.
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (LookupDnsDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsDomainArgs)(nil)).Elem()
}

// A collection of values returned by getDnsDomain.
type LookupDnsDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDnsDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsDomainResult)(nil)).Elem()
}

func (o LookupDnsDomainResultOutput) ToLookupDnsDomainResultOutput() LookupDnsDomainResultOutput {
	return o
}

func (o LookupDnsDomainResultOutput) ToLookupDnsDomainResultOutputWithContext(ctx context.Context) LookupDnsDomainResultOutput {
	return o
}

// The date the DNS domain was added to your Vultr account.
func (o LookupDnsDomainResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsDomainResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// The Domain's DNSSEC status
func (o LookupDnsDomainResultOutput) DnsSec() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsDomainResult) string { return v.DnsSec }).(pulumi.StringOutput)
}

// Name of domain.
func (o LookupDnsDomainResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsDomainResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsDomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsDomainResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsDomainResultOutput{})
}
