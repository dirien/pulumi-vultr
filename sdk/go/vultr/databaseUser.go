// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr database user resource. This can be used to create, read, modify, and delete users for a managed database on your Vultr account.
//
// ## Example Usage
//
// Create a new database user:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewDatabaseUser(ctx, "myDatabaseUser", &vultr.DatabaseUserArgs{
//				DatabaseId: pulumi.Any(vultr_database.My_database.Id),
//				Username:   pulumi.String("my_database_user"),
//				Password:   pulumi.String("randomTestPW40298"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DatabaseUser struct {
	pulumi.CustomResourceState

	AccessCert    pulumi.StringOutput             `pulumi:"accessCert"`
	AccessControl DatabaseUserAccessControlOutput `pulumi:"accessControl"`
	AccessKey     pulumi.StringOutput             `pulumi:"accessKey"`
	// The managed database ID you want to attach this user to.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
	Encryption pulumi.StringOutput `pulumi:"encryption"`
	// The password of the new managed database user.
	Password pulumi.StringOutput `pulumi:"password"`
	// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The username of the new managed database user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseUser
	err := ctx.RegisterResource("vultr:index/databaseUser:DatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseUserState, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	var resource DatabaseUser
	err := ctx.ReadResource("vultr:index/databaseUser:DatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseUser resources.
type databaseUserState struct {
	AccessCert    *string                    `pulumi:"accessCert"`
	AccessControl *DatabaseUserAccessControl `pulumi:"accessControl"`
	AccessKey     *string                    `pulumi:"accessKey"`
	// The managed database ID you want to attach this user to.
	DatabaseId *string `pulumi:"databaseId"`
	// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
	Encryption *string `pulumi:"encryption"`
	// The password of the new managed database user.
	Password *string `pulumi:"password"`
	// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
	Permission *string `pulumi:"permission"`
	// The username of the new managed database user.
	Username *string `pulumi:"username"`
}

type DatabaseUserState struct {
	AccessCert    pulumi.StringPtrInput
	AccessControl DatabaseUserAccessControlPtrInput
	AccessKey     pulumi.StringPtrInput
	// The managed database ID you want to attach this user to.
	DatabaseId pulumi.StringPtrInput
	// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
	Encryption pulumi.StringPtrInput
	// The password of the new managed database user.
	Password pulumi.StringPtrInput
	// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
	Permission pulumi.StringPtrInput
	// The username of the new managed database user.
	Username pulumi.StringPtrInput
}

func (DatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserState)(nil)).Elem()
}

type databaseUserArgs struct {
	AccessControl *DatabaseUserAccessControl `pulumi:"accessControl"`
	// The managed database ID you want to attach this user to.
	DatabaseId string `pulumi:"databaseId"`
	// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
	Encryption *string `pulumi:"encryption"`
	// The password of the new managed database user.
	Password *string `pulumi:"password"`
	// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
	Permission *string `pulumi:"permission"`
	// The username of the new managed database user.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	AccessControl DatabaseUserAccessControlPtrInput
	// The managed database ID you want to attach this user to.
	DatabaseId pulumi.StringInput
	// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
	Encryption pulumi.StringPtrInput
	// The password of the new managed database user.
	Password pulumi.StringPtrInput
	// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
	Permission pulumi.StringPtrInput
	// The username of the new managed database user.
	Username pulumi.StringInput
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserArgs)(nil)).Elem()
}

type DatabaseUserInput interface {
	pulumi.Input

	ToDatabaseUserOutput() DatabaseUserOutput
	ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput
}

func (*DatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (i *DatabaseUser) ToDatabaseUserOutput() DatabaseUserOutput {
	return i.ToDatabaseUserOutputWithContext(context.Background())
}

func (i *DatabaseUser) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserOutput)
}

// DatabaseUserArrayInput is an input type that accepts DatabaseUserArray and DatabaseUserArrayOutput values.
// You can construct a concrete instance of `DatabaseUserArrayInput` via:
//
//	DatabaseUserArray{ DatabaseUserArgs{...} }
type DatabaseUserArrayInput interface {
	pulumi.Input

	ToDatabaseUserArrayOutput() DatabaseUserArrayOutput
	ToDatabaseUserArrayOutputWithContext(context.Context) DatabaseUserArrayOutput
}

type DatabaseUserArray []DatabaseUserInput

func (DatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return i.ToDatabaseUserArrayOutputWithContext(context.Background())
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserArrayOutput)
}

// DatabaseUserMapInput is an input type that accepts DatabaseUserMap and DatabaseUserMapOutput values.
// You can construct a concrete instance of `DatabaseUserMapInput` via:
//
//	DatabaseUserMap{ "key": DatabaseUserArgs{...} }
type DatabaseUserMapInput interface {
	pulumi.Input

	ToDatabaseUserMapOutput() DatabaseUserMapOutput
	ToDatabaseUserMapOutputWithContext(context.Context) DatabaseUserMapOutput
}

type DatabaseUserMap map[string]DatabaseUserInput

func (DatabaseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserMap) ToDatabaseUserMapOutput() DatabaseUserMapOutput {
	return i.ToDatabaseUserMapOutputWithContext(context.Background())
}

func (i DatabaseUserMap) ToDatabaseUserMapOutputWithContext(ctx context.Context) DatabaseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserMapOutput)
}

type DatabaseUserOutput struct{ *pulumi.OutputState }

func (DatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserOutput) ToDatabaseUserOutput() DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) AccessCert() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.AccessCert }).(pulumi.StringOutput)
}

func (o DatabaseUserOutput) AccessControl() DatabaseUserAccessControlOutput {
	return o.ApplyT(func(v *DatabaseUser) DatabaseUserAccessControlOutput { return v.AccessControl }).(DatabaseUserAccessControlOutput)
}

func (o DatabaseUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The managed database ID you want to attach this user to.
func (o DatabaseUserOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
func (o DatabaseUserOutput) Encryption() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Encryption }).(pulumi.StringOutput)
}

// The password of the new managed database user.
func (o DatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
func (o DatabaseUserOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The username of the new managed database user.
func (o DatabaseUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type DatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) Index(i pulumi.IntInput) DatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseUser {
		return vs[0].([]*DatabaseUser)[vs[1].(int)]
	}).(DatabaseUserOutput)
}

type DatabaseUserMapOutput struct{ *pulumi.OutputState }

func (DatabaseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserMapOutput) ToDatabaseUserMapOutput() DatabaseUserMapOutput {
	return o
}

func (o DatabaseUserMapOutput) ToDatabaseUserMapOutputWithContext(ctx context.Context) DatabaseUserMapOutput {
	return o
}

func (o DatabaseUserMapOutput) MapIndex(k pulumi.StringInput) DatabaseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseUser {
		return vs[0].(map[string]*DatabaseUser)[vs[1].(string)]
	}).(DatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInput)(nil)).Elem(), &DatabaseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserArrayInput)(nil)).Elem(), DatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserMapInput)(nil)).Elem(), DatabaseUserMap{})
	pulumi.RegisterOutputType(DatabaseUserOutput{})
	pulumi.RegisterOutputType(DatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(DatabaseUserMapOutput{})
}
