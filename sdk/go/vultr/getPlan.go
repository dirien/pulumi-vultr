// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr plan.
//
// ## Example Usage
//
// Get the information for a plan by `id`:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.GetPlan(ctx, &vultr.GetPlanArgs{
//				Filters: []vultr.GetPlanFilter{
//					{
//						Name: "id",
//						Values: []string{
//							"vc2-1c-1gb",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPlan(ctx *pulumi.Context, args *GetPlanArgs, opts ...pulumi.InvokeOption) (*GetPlanResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPlanResult
	err := ctx.Invoke("vultr:index/getPlan:getPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlan.
type GetPlanArgs struct {
	// Query parameters for finding plans.
	Filters []GetPlanFilter `pulumi:"filters"`
}

// A collection of values returned by getPlan.
type GetPlanResult struct {
	// The bandwidth available on the plan in GB.
	Bandwidth int `pulumi:"bandwidth"`
	// The amount of disk space in GB available on the plan.
	Disk int `pulumi:"disk"`
	// The number of disks that this plan offers.
	DiskCount int             `pulumi:"diskCount"`
	Filters   []GetPlanFilter `pulumi:"filters"`
	// For GPU plans, the GPU card type.
	GpuType string `pulumi:"gpuType"`
	// For GPU plans, the VRAM available in the plan.
	GpuVram int `pulumi:"gpuVram"`
	// The provider-assigned unique ID for this managed resource.
	Id        string   `pulumi:"id"`
	Locations []string `pulumi:"locations"`
	// The price per month of the plan in USD.
	MonthlyCost float64 `pulumi:"monthlyCost"`
	// The amount of memory available on the plan in MB.
	Ram int `pulumi:"ram"`
	// The type of plan it is.
	Type string `pulumi:"type"`
	// The number of virtual CPUs available on the plan.
	VcpuCount int `pulumi:"vcpuCount"`
}

func GetPlanOutput(ctx *pulumi.Context, args GetPlanOutputArgs, opts ...pulumi.InvokeOption) GetPlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPlanResult, error) {
			args := v.(GetPlanArgs)
			r, err := GetPlan(ctx, &args, opts...)
			var s GetPlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPlanResultOutput)
}

// A collection of arguments for invoking getPlan.
type GetPlanOutputArgs struct {
	// Query parameters for finding plans.
	Filters GetPlanFilterArrayInput `pulumi:"filters"`
}

func (GetPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanArgs)(nil)).Elem()
}

// A collection of values returned by getPlan.
type GetPlanResultOutput struct{ *pulumi.OutputState }

func (GetPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanResult)(nil)).Elem()
}

func (o GetPlanResultOutput) ToGetPlanResultOutput() GetPlanResultOutput {
	return o
}

func (o GetPlanResultOutput) ToGetPlanResultOutputWithContext(ctx context.Context) GetPlanResultOutput {
	return o
}

// The bandwidth available on the plan in GB.
func (o GetPlanResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The amount of disk space in GB available on the plan.
func (o GetPlanResultOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.Disk }).(pulumi.IntOutput)
}

// The number of disks that this plan offers.
func (o GetPlanResultOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.DiskCount }).(pulumi.IntOutput)
}

func (o GetPlanResultOutput) Filters() GetPlanFilterArrayOutput {
	return o.ApplyT(func(v GetPlanResult) []GetPlanFilter { return v.Filters }).(GetPlanFilterArrayOutput)
}

// For GPU plans, the GPU card type.
func (o GetPlanResultOutput) GpuType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlanResult) string { return v.GpuType }).(pulumi.StringOutput)
}

// For GPU plans, the VRAM available in the plan.
func (o GetPlanResultOutput) GpuVram() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.GpuVram }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlanResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPlanResultOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPlanResult) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// The price per month of the plan in USD.
func (o GetPlanResultOutput) MonthlyCost() pulumi.Float64Output {
	return o.ApplyT(func(v GetPlanResult) float64 { return v.MonthlyCost }).(pulumi.Float64Output)
}

// The amount of memory available on the plan in MB.
func (o GetPlanResultOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.Ram }).(pulumi.IntOutput)
}

// The type of plan it is.
func (o GetPlanResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlanResult) string { return v.Type }).(pulumi.StringOutput)
}

// The number of virtual CPUs available on the plan.
func (o GetPlanResultOutput) VcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlanResult) int { return v.VcpuCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPlanResultOutput{})
}
