// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr instance IPv4 resource. This can be used to create, read, and
// modify a IPv4 address. instance is rebooted by default.
//
// ## Example Usage
//
// Create a new IPv4 address for a instance:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myInstance, err := vultr.NewInstance(ctx, "myInstance", &vultr.InstanceArgs{
//				EnableIpv6: pulumi.Bool(true),
//				OsId:       pulumi.Int(167),
//				Plan:       pulumi.String("vc2-1c-1gb"),
//				Region:     pulumi.String("ewr"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vultr.NewInstanceIpv4(ctx, "myInstanceIpv4", &vultr.InstanceIpv4Args{
//				InstanceId: myInstance.ID(),
//				Reboot:     pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstanceIpv4 struct {
	pulumi.CustomResourceState

	// The gateway IP address.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IPv4 address in canonical format.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrOutput `pulumi:"reboot"`
	// The reverse DNS information for this IP address.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
}

// NewInstanceIpv4 registers a new resource with the given unique name, arguments, and options.
func NewInstanceIpv4(ctx *pulumi.Context,
	name string, args *InstanceIpv4Args, opts ...pulumi.ResourceOption) (*InstanceIpv4, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceIpv4
	err := ctx.RegisterResource("vultr:index/instanceIpv4:InstanceIpv4", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIpv4 gets an existing InstanceIpv4 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIpv4(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIpv4State, opts ...pulumi.ResourceOption) (*InstanceIpv4, error) {
	var resource InstanceIpv4
	err := ctx.ReadResource("vultr:index/instanceIpv4:InstanceIpv4", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIpv4 resources.
type instanceIpv4State struct {
	// The gateway IP address.
	Gateway *string `pulumi:"gateway"`
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId *string `pulumi:"instanceId"`
	// The IPv4 address in canonical format.
	Ip *string `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask *string `pulumi:"netmask"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot *bool `pulumi:"reboot"`
	// The reverse DNS information for this IP address.
	Reverse *string `pulumi:"reverse"`
}

type InstanceIpv4State struct {
	// The gateway IP address.
	Gateway pulumi.StringPtrInput
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringPtrInput
	// The IPv4 address in canonical format.
	Ip pulumi.StringPtrInput
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringPtrInput
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrInput
	// The reverse DNS information for this IP address.
	Reverse pulumi.StringPtrInput
}

func (InstanceIpv4State) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpv4State)(nil)).Elem()
}

type instanceIpv4Args struct {
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId string `pulumi:"instanceId"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot *bool `pulumi:"reboot"`
}

// The set of arguments for constructing a InstanceIpv4 resource.
type InstanceIpv4Args struct {
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringInput
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrInput
}

func (InstanceIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpv4Args)(nil)).Elem()
}

type InstanceIpv4Input interface {
	pulumi.Input

	ToInstanceIpv4Output() InstanceIpv4Output
	ToInstanceIpv4OutputWithContext(ctx context.Context) InstanceIpv4Output
}

func (*InstanceIpv4) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIpv4)(nil)).Elem()
}

func (i *InstanceIpv4) ToInstanceIpv4Output() InstanceIpv4Output {
	return i.ToInstanceIpv4OutputWithContext(context.Background())
}

func (i *InstanceIpv4) ToInstanceIpv4OutputWithContext(ctx context.Context) InstanceIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpv4Output)
}

// InstanceIpv4ArrayInput is an input type that accepts InstanceIpv4Array and InstanceIpv4ArrayOutput values.
// You can construct a concrete instance of `InstanceIpv4ArrayInput` via:
//
//	InstanceIpv4Array{ InstanceIpv4Args{...} }
type InstanceIpv4ArrayInput interface {
	pulumi.Input

	ToInstanceIpv4ArrayOutput() InstanceIpv4ArrayOutput
	ToInstanceIpv4ArrayOutputWithContext(context.Context) InstanceIpv4ArrayOutput
}

type InstanceIpv4Array []InstanceIpv4Input

func (InstanceIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIpv4)(nil)).Elem()
}

func (i InstanceIpv4Array) ToInstanceIpv4ArrayOutput() InstanceIpv4ArrayOutput {
	return i.ToInstanceIpv4ArrayOutputWithContext(context.Background())
}

func (i InstanceIpv4Array) ToInstanceIpv4ArrayOutputWithContext(ctx context.Context) InstanceIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpv4ArrayOutput)
}

// InstanceIpv4MapInput is an input type that accepts InstanceIpv4Map and InstanceIpv4MapOutput values.
// You can construct a concrete instance of `InstanceIpv4MapInput` via:
//
//	InstanceIpv4Map{ "key": InstanceIpv4Args{...} }
type InstanceIpv4MapInput interface {
	pulumi.Input

	ToInstanceIpv4MapOutput() InstanceIpv4MapOutput
	ToInstanceIpv4MapOutputWithContext(context.Context) InstanceIpv4MapOutput
}

type InstanceIpv4Map map[string]InstanceIpv4Input

func (InstanceIpv4Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIpv4)(nil)).Elem()
}

func (i InstanceIpv4Map) ToInstanceIpv4MapOutput() InstanceIpv4MapOutput {
	return i.ToInstanceIpv4MapOutputWithContext(context.Background())
}

func (i InstanceIpv4Map) ToInstanceIpv4MapOutputWithContext(ctx context.Context) InstanceIpv4MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpv4MapOutput)
}

type InstanceIpv4Output struct{ *pulumi.OutputState }

func (InstanceIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIpv4)(nil)).Elem()
}

func (o InstanceIpv4Output) ToInstanceIpv4Output() InstanceIpv4Output {
	return o
}

func (o InstanceIpv4Output) ToInstanceIpv4OutputWithContext(ctx context.Context) InstanceIpv4Output {
	return o
}

// The gateway IP address.
func (o InstanceIpv4Output) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// The ID of the instance to be assigned the IPv4 address.
func (o InstanceIpv4Output) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IPv4 address in canonical format.
func (o InstanceIpv4Output) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The IPv4 netmask in dot-decimal notation.
func (o InstanceIpv4Output) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
func (o InstanceIpv4Output) Reboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.BoolPtrOutput { return v.Reboot }).(pulumi.BoolPtrOutput)
}

// The reverse DNS information for this IP address.
func (o InstanceIpv4Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIpv4) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

type InstanceIpv4ArrayOutput struct{ *pulumi.OutputState }

func (InstanceIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIpv4)(nil)).Elem()
}

func (o InstanceIpv4ArrayOutput) ToInstanceIpv4ArrayOutput() InstanceIpv4ArrayOutput {
	return o
}

func (o InstanceIpv4ArrayOutput) ToInstanceIpv4ArrayOutputWithContext(ctx context.Context) InstanceIpv4ArrayOutput {
	return o
}

func (o InstanceIpv4ArrayOutput) Index(i pulumi.IntInput) InstanceIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceIpv4 {
		return vs[0].([]*InstanceIpv4)[vs[1].(int)]
	}).(InstanceIpv4Output)
}

type InstanceIpv4MapOutput struct{ *pulumi.OutputState }

func (InstanceIpv4MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIpv4)(nil)).Elem()
}

func (o InstanceIpv4MapOutput) ToInstanceIpv4MapOutput() InstanceIpv4MapOutput {
	return o
}

func (o InstanceIpv4MapOutput) ToInstanceIpv4MapOutputWithContext(ctx context.Context) InstanceIpv4MapOutput {
	return o
}

func (o InstanceIpv4MapOutput) MapIndex(k pulumi.StringInput) InstanceIpv4Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceIpv4 {
		return vs[0].(map[string]*InstanceIpv4)[vs[1].(string)]
	}).(InstanceIpv4Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIpv4Input)(nil)).Elem(), &InstanceIpv4{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIpv4ArrayInput)(nil)).Elem(), InstanceIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIpv4MapInput)(nil)).Elem(), InstanceIpv4Map{})
	pulumi.RegisterOutputType(InstanceIpv4Output{})
	pulumi.RegisterOutputType(InstanceIpv4ArrayOutput{})
	pulumi.RegisterOutputType(InstanceIpv4MapOutput{})
}
