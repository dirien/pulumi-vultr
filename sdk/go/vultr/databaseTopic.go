// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr database topic resource. This can be used to create, read, modify, and delete topics for a managed database on your Vultr account.
//
// ## Example Usage
//
// Create a new database topic:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewDatabaseTopic(ctx, "myDatabaseTopic", &vultr.DatabaseTopicArgs{
//				DatabaseId:     pulumi.Any(vultr_database.My_database.Id),
//				Name:           pulumi.String("my_database_topic"),
//				Partitions:     pulumi.Int(3),
//				Replication:    pulumi.Int(2),
//				RetentionHours: pulumi.Int(120),
//				RetentionBytes: pulumi.Int(-1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DatabaseTopic struct {
	pulumi.CustomResourceState

	// The managed database ID you want to attach this topic to.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The name for the new managed database topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of partitions for the new managed database topic.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// The replication factor for the new managed database topic.
	Replication pulumi.IntOutput `pulumi:"replication"`
	// The retention bytes for the new managed database topic.
	RetentionBytes pulumi.IntOutput `pulumi:"retentionBytes"`
	// The retention hours for the new managed database topic.
	RetentionHours pulumi.IntOutput `pulumi:"retentionHours"`
}

// NewDatabaseTopic registers a new resource with the given unique name, arguments, and options.
func NewDatabaseTopic(ctx *pulumi.Context,
	name string, args *DatabaseTopicArgs, opts ...pulumi.ResourceOption) (*DatabaseTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	if args.Replication == nil {
		return nil, errors.New("invalid value for required argument 'Replication'")
	}
	if args.RetentionBytes == nil {
		return nil, errors.New("invalid value for required argument 'RetentionBytes'")
	}
	if args.RetentionHours == nil {
		return nil, errors.New("invalid value for required argument 'RetentionHours'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseTopic
	err := ctx.RegisterResource("vultr:index/databaseTopic:DatabaseTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseTopic gets an existing DatabaseTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseTopicState, opts ...pulumi.ResourceOption) (*DatabaseTopic, error) {
	var resource DatabaseTopic
	err := ctx.ReadResource("vultr:index/databaseTopic:DatabaseTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseTopic resources.
type databaseTopicState struct {
	// The managed database ID you want to attach this topic to.
	DatabaseId *string `pulumi:"databaseId"`
	// The name for the new managed database topic.
	Name *string `pulumi:"name"`
	// The number of partitions for the new managed database topic.
	Partitions *int `pulumi:"partitions"`
	// The replication factor for the new managed database topic.
	Replication *int `pulumi:"replication"`
	// The retention bytes for the new managed database topic.
	RetentionBytes *int `pulumi:"retentionBytes"`
	// The retention hours for the new managed database topic.
	RetentionHours *int `pulumi:"retentionHours"`
}

type DatabaseTopicState struct {
	// The managed database ID you want to attach this topic to.
	DatabaseId pulumi.StringPtrInput
	// The name for the new managed database topic.
	Name pulumi.StringPtrInput
	// The number of partitions for the new managed database topic.
	Partitions pulumi.IntPtrInput
	// The replication factor for the new managed database topic.
	Replication pulumi.IntPtrInput
	// The retention bytes for the new managed database topic.
	RetentionBytes pulumi.IntPtrInput
	// The retention hours for the new managed database topic.
	RetentionHours pulumi.IntPtrInput
}

func (DatabaseTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTopicState)(nil)).Elem()
}

type databaseTopicArgs struct {
	// The managed database ID you want to attach this topic to.
	DatabaseId string `pulumi:"databaseId"`
	// The name for the new managed database topic.
	Name string `pulumi:"name"`
	// The number of partitions for the new managed database topic.
	Partitions int `pulumi:"partitions"`
	// The replication factor for the new managed database topic.
	Replication int `pulumi:"replication"`
	// The retention bytes for the new managed database topic.
	RetentionBytes int `pulumi:"retentionBytes"`
	// The retention hours for the new managed database topic.
	RetentionHours int `pulumi:"retentionHours"`
}

// The set of arguments for constructing a DatabaseTopic resource.
type DatabaseTopicArgs struct {
	// The managed database ID you want to attach this topic to.
	DatabaseId pulumi.StringInput
	// The name for the new managed database topic.
	Name pulumi.StringInput
	// The number of partitions for the new managed database topic.
	Partitions pulumi.IntInput
	// The replication factor for the new managed database topic.
	Replication pulumi.IntInput
	// The retention bytes for the new managed database topic.
	RetentionBytes pulumi.IntInput
	// The retention hours for the new managed database topic.
	RetentionHours pulumi.IntInput
}

func (DatabaseTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTopicArgs)(nil)).Elem()
}

type DatabaseTopicInput interface {
	pulumi.Input

	ToDatabaseTopicOutput() DatabaseTopicOutput
	ToDatabaseTopicOutputWithContext(ctx context.Context) DatabaseTopicOutput
}

func (*DatabaseTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTopic)(nil)).Elem()
}

func (i *DatabaseTopic) ToDatabaseTopicOutput() DatabaseTopicOutput {
	return i.ToDatabaseTopicOutputWithContext(context.Background())
}

func (i *DatabaseTopic) ToDatabaseTopicOutputWithContext(ctx context.Context) DatabaseTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTopicOutput)
}

// DatabaseTopicArrayInput is an input type that accepts DatabaseTopicArray and DatabaseTopicArrayOutput values.
// You can construct a concrete instance of `DatabaseTopicArrayInput` via:
//
//	DatabaseTopicArray{ DatabaseTopicArgs{...} }
type DatabaseTopicArrayInput interface {
	pulumi.Input

	ToDatabaseTopicArrayOutput() DatabaseTopicArrayOutput
	ToDatabaseTopicArrayOutputWithContext(context.Context) DatabaseTopicArrayOutput
}

type DatabaseTopicArray []DatabaseTopicInput

func (DatabaseTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseTopic)(nil)).Elem()
}

func (i DatabaseTopicArray) ToDatabaseTopicArrayOutput() DatabaseTopicArrayOutput {
	return i.ToDatabaseTopicArrayOutputWithContext(context.Background())
}

func (i DatabaseTopicArray) ToDatabaseTopicArrayOutputWithContext(ctx context.Context) DatabaseTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTopicArrayOutput)
}

// DatabaseTopicMapInput is an input type that accepts DatabaseTopicMap and DatabaseTopicMapOutput values.
// You can construct a concrete instance of `DatabaseTopicMapInput` via:
//
//	DatabaseTopicMap{ "key": DatabaseTopicArgs{...} }
type DatabaseTopicMapInput interface {
	pulumi.Input

	ToDatabaseTopicMapOutput() DatabaseTopicMapOutput
	ToDatabaseTopicMapOutputWithContext(context.Context) DatabaseTopicMapOutput
}

type DatabaseTopicMap map[string]DatabaseTopicInput

func (DatabaseTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseTopic)(nil)).Elem()
}

func (i DatabaseTopicMap) ToDatabaseTopicMapOutput() DatabaseTopicMapOutput {
	return i.ToDatabaseTopicMapOutputWithContext(context.Background())
}

func (i DatabaseTopicMap) ToDatabaseTopicMapOutputWithContext(ctx context.Context) DatabaseTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTopicMapOutput)
}

type DatabaseTopicOutput struct{ *pulumi.OutputState }

func (DatabaseTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTopic)(nil)).Elem()
}

func (o DatabaseTopicOutput) ToDatabaseTopicOutput() DatabaseTopicOutput {
	return o
}

func (o DatabaseTopicOutput) ToDatabaseTopicOutputWithContext(ctx context.Context) DatabaseTopicOutput {
	return o
}

// The managed database ID you want to attach this topic to.
func (o DatabaseTopicOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The name for the new managed database topic.
func (o DatabaseTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of partitions for the new managed database topic.
func (o DatabaseTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// The replication factor for the new managed database topic.
func (o DatabaseTopicOutput) Replication() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.IntOutput { return v.Replication }).(pulumi.IntOutput)
}

// The retention bytes for the new managed database topic.
func (o DatabaseTopicOutput) RetentionBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.IntOutput { return v.RetentionBytes }).(pulumi.IntOutput)
}

// The retention hours for the new managed database topic.
func (o DatabaseTopicOutput) RetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseTopic) pulumi.IntOutput { return v.RetentionHours }).(pulumi.IntOutput)
}

type DatabaseTopicArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseTopic)(nil)).Elem()
}

func (o DatabaseTopicArrayOutput) ToDatabaseTopicArrayOutput() DatabaseTopicArrayOutput {
	return o
}

func (o DatabaseTopicArrayOutput) ToDatabaseTopicArrayOutputWithContext(ctx context.Context) DatabaseTopicArrayOutput {
	return o
}

func (o DatabaseTopicArrayOutput) Index(i pulumi.IntInput) DatabaseTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseTopic {
		return vs[0].([]*DatabaseTopic)[vs[1].(int)]
	}).(DatabaseTopicOutput)
}

type DatabaseTopicMapOutput struct{ *pulumi.OutputState }

func (DatabaseTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseTopic)(nil)).Elem()
}

func (o DatabaseTopicMapOutput) ToDatabaseTopicMapOutput() DatabaseTopicMapOutput {
	return o
}

func (o DatabaseTopicMapOutput) ToDatabaseTopicMapOutputWithContext(ctx context.Context) DatabaseTopicMapOutput {
	return o
}

func (o DatabaseTopicMapOutput) MapIndex(k pulumi.StringInput) DatabaseTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseTopic {
		return vs[0].(map[string]*DatabaseTopic)[vs[1].(string)]
	}).(DatabaseTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTopicInput)(nil)).Elem(), &DatabaseTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTopicArrayInput)(nil)).Elem(), DatabaseTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTopicMapInput)(nil)).Elem(), DatabaseTopicMap{})
	pulumi.RegisterOutputType(DatabaseTopicOutput{})
	pulumi.RegisterOutputType(DatabaseTopicArrayOutput{})
	pulumi.RegisterOutputType(DatabaseTopicMapOutput{})
}
