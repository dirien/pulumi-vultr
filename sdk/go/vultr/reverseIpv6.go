// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr Reverse IPv6 resource. This can be used to create, read,
// modify, and delete reverse DNS records for IPv6 addresses. Upon success, DNS
// changes may take 6-12 hours to become active.
type ReverseIpv6 struct {
	pulumi.CustomResourceState

	// The ID of the server you want to set an IPv6
	// reverse DNS record for.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IPv6 address used in the reverse DNS record.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The hostname used in the IPv6 reverse DNS record.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
}

// NewReverseIpv6 registers a new resource with the given unique name, arguments, and options.
func NewReverseIpv6(ctx *pulumi.Context,
	name string, args *ReverseIpv6Args, opts ...pulumi.ResourceOption) (*ReverseIpv6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReverseIpv6
	err := ctx.RegisterResource("vultr:index/reverseIpv6:ReverseIpv6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReverseIpv6 gets an existing ReverseIpv6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReverseIpv6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReverseIpv6State, opts ...pulumi.ResourceOption) (*ReverseIpv6, error) {
	var resource ReverseIpv6
	err := ctx.ReadResource("vultr:index/reverseIpv6:ReverseIpv6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReverseIpv6 resources.
type reverseIpv6State struct {
	// The ID of the server you want to set an IPv6
	// reverse DNS record for.
	InstanceId *string `pulumi:"instanceId"`
	// The IPv6 address used in the reverse DNS record.
	Ip *string `pulumi:"ip"`
	// The hostname used in the IPv6 reverse DNS record.
	Reverse *string `pulumi:"reverse"`
}

type ReverseIpv6State struct {
	// The ID of the server you want to set an IPv6
	// reverse DNS record for.
	InstanceId pulumi.StringPtrInput
	// The IPv6 address used in the reverse DNS record.
	Ip pulumi.StringPtrInput
	// The hostname used in the IPv6 reverse DNS record.
	Reverse pulumi.StringPtrInput
}

func (ReverseIpv6State) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseIpv6State)(nil)).Elem()
}

type reverseIpv6Args struct {
	// The ID of the server you want to set an IPv6
	// reverse DNS record for.
	InstanceId string `pulumi:"instanceId"`
	// The IPv6 address used in the reverse DNS record.
	Ip string `pulumi:"ip"`
	// The hostname used in the IPv6 reverse DNS record.
	Reverse string `pulumi:"reverse"`
}

// The set of arguments for constructing a ReverseIpv6 resource.
type ReverseIpv6Args struct {
	// The ID of the server you want to set an IPv6
	// reverse DNS record for.
	InstanceId pulumi.StringInput
	// The IPv6 address used in the reverse DNS record.
	Ip pulumi.StringInput
	// The hostname used in the IPv6 reverse DNS record.
	Reverse pulumi.StringInput
}

func (ReverseIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseIpv6Args)(nil)).Elem()
}

type ReverseIpv6Input interface {
	pulumi.Input

	ToReverseIpv6Output() ReverseIpv6Output
	ToReverseIpv6OutputWithContext(ctx context.Context) ReverseIpv6Output
}

func (*ReverseIpv6) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseIpv6)(nil)).Elem()
}

func (i *ReverseIpv6) ToReverseIpv6Output() ReverseIpv6Output {
	return i.ToReverseIpv6OutputWithContext(context.Background())
}

func (i *ReverseIpv6) ToReverseIpv6OutputWithContext(ctx context.Context) ReverseIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIpv6Output)
}

// ReverseIpv6ArrayInput is an input type that accepts ReverseIpv6Array and ReverseIpv6ArrayOutput values.
// You can construct a concrete instance of `ReverseIpv6ArrayInput` via:
//
//	ReverseIpv6Array{ ReverseIpv6Args{...} }
type ReverseIpv6ArrayInput interface {
	pulumi.Input

	ToReverseIpv6ArrayOutput() ReverseIpv6ArrayOutput
	ToReverseIpv6ArrayOutputWithContext(context.Context) ReverseIpv6ArrayOutput
}

type ReverseIpv6Array []ReverseIpv6Input

func (ReverseIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseIpv6)(nil)).Elem()
}

func (i ReverseIpv6Array) ToReverseIpv6ArrayOutput() ReverseIpv6ArrayOutput {
	return i.ToReverseIpv6ArrayOutputWithContext(context.Background())
}

func (i ReverseIpv6Array) ToReverseIpv6ArrayOutputWithContext(ctx context.Context) ReverseIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIpv6ArrayOutput)
}

// ReverseIpv6MapInput is an input type that accepts ReverseIpv6Map and ReverseIpv6MapOutput values.
// You can construct a concrete instance of `ReverseIpv6MapInput` via:
//
//	ReverseIpv6Map{ "key": ReverseIpv6Args{...} }
type ReverseIpv6MapInput interface {
	pulumi.Input

	ToReverseIpv6MapOutput() ReverseIpv6MapOutput
	ToReverseIpv6MapOutputWithContext(context.Context) ReverseIpv6MapOutput
}

type ReverseIpv6Map map[string]ReverseIpv6Input

func (ReverseIpv6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseIpv6)(nil)).Elem()
}

func (i ReverseIpv6Map) ToReverseIpv6MapOutput() ReverseIpv6MapOutput {
	return i.ToReverseIpv6MapOutputWithContext(context.Background())
}

func (i ReverseIpv6Map) ToReverseIpv6MapOutputWithContext(ctx context.Context) ReverseIpv6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIpv6MapOutput)
}

type ReverseIpv6Output struct{ *pulumi.OutputState }

func (ReverseIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseIpv6)(nil)).Elem()
}

func (o ReverseIpv6Output) ToReverseIpv6Output() ReverseIpv6Output {
	return o
}

func (o ReverseIpv6Output) ToReverseIpv6OutputWithContext(ctx context.Context) ReverseIpv6Output {
	return o
}

// The ID of the server you want to set an IPv6
// reverse DNS record for.
func (o ReverseIpv6Output) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseIpv6) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IPv6 address used in the reverse DNS record.
func (o ReverseIpv6Output) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseIpv6) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The hostname used in the IPv6 reverse DNS record.
func (o ReverseIpv6Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *ReverseIpv6) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

type ReverseIpv6ArrayOutput struct{ *pulumi.OutputState }

func (ReverseIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseIpv6)(nil)).Elem()
}

func (o ReverseIpv6ArrayOutput) ToReverseIpv6ArrayOutput() ReverseIpv6ArrayOutput {
	return o
}

func (o ReverseIpv6ArrayOutput) ToReverseIpv6ArrayOutputWithContext(ctx context.Context) ReverseIpv6ArrayOutput {
	return o
}

func (o ReverseIpv6ArrayOutput) Index(i pulumi.IntInput) ReverseIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReverseIpv6 {
		return vs[0].([]*ReverseIpv6)[vs[1].(int)]
	}).(ReverseIpv6Output)
}

type ReverseIpv6MapOutput struct{ *pulumi.OutputState }

func (ReverseIpv6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseIpv6)(nil)).Elem()
}

func (o ReverseIpv6MapOutput) ToReverseIpv6MapOutput() ReverseIpv6MapOutput {
	return o
}

func (o ReverseIpv6MapOutput) ToReverseIpv6MapOutputWithContext(ctx context.Context) ReverseIpv6MapOutput {
	return o
}

func (o ReverseIpv6MapOutput) MapIndex(k pulumi.StringInput) ReverseIpv6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReverseIpv6 {
		return vs[0].(map[string]*ReverseIpv6)[vs[1].(string)]
	}).(ReverseIpv6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIpv6Input)(nil)).Elem(), &ReverseIpv6{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIpv6ArrayInput)(nil)).Elem(), ReverseIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIpv6MapInput)(nil)).Elem(), ReverseIpv6Map{})
	pulumi.RegisterOutputType(ReverseIpv6Output{})
	pulumi.RegisterOutputType(ReverseIpv6ArrayOutput{})
	pulumi.RegisterOutputType(ReverseIpv6MapOutput{})
}
