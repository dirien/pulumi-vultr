// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Use `Vpc` instead
//
// Provides a Vultr private network resource. This can be used to create, read, and delete private networks on your Vultr account.
//
// ## Example Usage
//
// Create a new private network with an automatically generated CIDR block:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewPrivateNetwork(ctx, "myNetwork", &vultr.PrivateNetworkArgs{
//				Description: pulumi.String("my private network"),
//				Region:      pulumi.String("ewr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Create a new private network with a specified CIDR block:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewPrivateNetwork(ctx, "myNetwork", &vultr.PrivateNetworkArgs{
//				Description:  pulumi.String("my private network"),
//				Region:       pulumi.String("ewr"),
//				V4Subnet:     pulumi.String("10.0.0.0"),
//				V4SubnetMask: pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Networks can be imported using the network `ID`, e.g.
//
// ```sh
//
//	$ pulumi import vultr:index/privateNetwork:PrivateNetwork my_network 0e04f918-575e-41cb-86f6-d729b354a5a1
//
// ```
type PrivateNetwork struct {
	pulumi.CustomResourceState

	// The date that the network was added to your Vultr account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The description you want to give your network.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The region ID that you want the network to be created in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this network.
	V4Subnet pulumi.StringOutput `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntOutput `pulumi:"v4SubnetMask"`
}

// NewPrivateNetwork registers a new resource with the given unique name, arguments, and options.
func NewPrivateNetwork(ctx *pulumi.Context,
	name string, args *PrivateNetworkArgs, opts ...pulumi.ResourceOption) (*PrivateNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PrivateNetwork
	err := ctx.RegisterResource("vultr:index/privateNetwork:PrivateNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateNetwork gets an existing PrivateNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateNetworkState, opts ...pulumi.ResourceOption) (*PrivateNetwork, error) {
	var resource PrivateNetwork
	err := ctx.ReadResource("vultr:index/privateNetwork:PrivateNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateNetwork resources.
type privateNetworkState struct {
	// The date that the network was added to your Vultr account.
	DateCreated *string `pulumi:"dateCreated"`
	// The description you want to give your network.
	Description *string `pulumi:"description"`
	// The region ID that you want the network to be created in.
	Region *string `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this network.
	V4Subnet *string `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask *int `pulumi:"v4SubnetMask"`
}

type PrivateNetworkState struct {
	// The date that the network was added to your Vultr account.
	DateCreated pulumi.StringPtrInput
	// The description you want to give your network.
	Description pulumi.StringPtrInput
	// The region ID that you want the network to be created in.
	Region pulumi.StringPtrInput
	// The IPv4 subnet to be used when attaching instances to this network.
	V4Subnet pulumi.StringPtrInput
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntPtrInput
}

func (PrivateNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkState)(nil)).Elem()
}

type privateNetworkArgs struct {
	// The description you want to give your network.
	Description *string `pulumi:"description"`
	// The region ID that you want the network to be created in.
	Region string `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this network.
	V4Subnet *string `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask *int `pulumi:"v4SubnetMask"`
}

// The set of arguments for constructing a PrivateNetwork resource.
type PrivateNetworkArgs struct {
	// The description you want to give your network.
	Description pulumi.StringPtrInput
	// The region ID that you want the network to be created in.
	Region pulumi.StringInput
	// The IPv4 subnet to be used when attaching instances to this network.
	V4Subnet pulumi.StringPtrInput
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntPtrInput
}

func (PrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkArgs)(nil)).Elem()
}

type PrivateNetworkInput interface {
	pulumi.Input

	ToPrivateNetworkOutput() PrivateNetworkOutput
	ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput
}

func (*PrivateNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetwork)(nil)).Elem()
}

func (i *PrivateNetwork) ToPrivateNetworkOutput() PrivateNetworkOutput {
	return i.ToPrivateNetworkOutputWithContext(context.Background())
}

func (i *PrivateNetwork) ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkOutput)
}

// PrivateNetworkArrayInput is an input type that accepts PrivateNetworkArray and PrivateNetworkArrayOutput values.
// You can construct a concrete instance of `PrivateNetworkArrayInput` via:
//
//	PrivateNetworkArray{ PrivateNetworkArgs{...} }
type PrivateNetworkArrayInput interface {
	pulumi.Input

	ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput
	ToPrivateNetworkArrayOutputWithContext(context.Context) PrivateNetworkArrayOutput
}

type PrivateNetworkArray []PrivateNetworkInput

func (PrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetwork)(nil)).Elem()
}

func (i PrivateNetworkArray) ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput {
	return i.ToPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i PrivateNetworkArray) ToPrivateNetworkArrayOutputWithContext(ctx context.Context) PrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkArrayOutput)
}

// PrivateNetworkMapInput is an input type that accepts PrivateNetworkMap and PrivateNetworkMapOutput values.
// You can construct a concrete instance of `PrivateNetworkMapInput` via:
//
//	PrivateNetworkMap{ "key": PrivateNetworkArgs{...} }
type PrivateNetworkMapInput interface {
	pulumi.Input

	ToPrivateNetworkMapOutput() PrivateNetworkMapOutput
	ToPrivateNetworkMapOutputWithContext(context.Context) PrivateNetworkMapOutput
}

type PrivateNetworkMap map[string]PrivateNetworkInput

func (PrivateNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetwork)(nil)).Elem()
}

func (i PrivateNetworkMap) ToPrivateNetworkMapOutput() PrivateNetworkMapOutput {
	return i.ToPrivateNetworkMapOutputWithContext(context.Background())
}

func (i PrivateNetworkMap) ToPrivateNetworkMapOutputWithContext(ctx context.Context) PrivateNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkMapOutput)
}

type PrivateNetworkOutput struct{ *pulumi.OutputState }

func (PrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkOutput) ToPrivateNetworkOutput() PrivateNetworkOutput {
	return o
}

func (o PrivateNetworkOutput) ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput {
	return o
}

// The date that the network was added to your Vultr account.
func (o PrivateNetworkOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetwork) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// The description you want to give your network.
func (o PrivateNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The region ID that you want the network to be created in.
func (o PrivateNetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetwork) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The IPv4 subnet to be used when attaching instances to this network.
func (o PrivateNetworkOutput) V4Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetwork) pulumi.StringOutput { return v.V4Subnet }).(pulumi.StringOutput)
}

// The number of bits for the netmask in CIDR notation. Example: 32
func (o PrivateNetworkOutput) V4SubnetMask() pulumi.IntOutput {
	return o.ApplyT(func(v *PrivateNetwork) pulumi.IntOutput { return v.V4SubnetMask }).(pulumi.IntOutput)
}

type PrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (PrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkArrayOutput) ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput {
	return o
}

func (o PrivateNetworkArrayOutput) ToPrivateNetworkArrayOutputWithContext(ctx context.Context) PrivateNetworkArrayOutput {
	return o
}

func (o PrivateNetworkArrayOutput) Index(i pulumi.IntInput) PrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateNetwork {
		return vs[0].([]*PrivateNetwork)[vs[1].(int)]
	}).(PrivateNetworkOutput)
}

type PrivateNetworkMapOutput struct{ *pulumi.OutputState }

func (PrivateNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkMapOutput) ToPrivateNetworkMapOutput() PrivateNetworkMapOutput {
	return o
}

func (o PrivateNetworkMapOutput) ToPrivateNetworkMapOutputWithContext(ctx context.Context) PrivateNetworkMapOutput {
	return o
}

func (o PrivateNetworkMapOutput) MapIndex(k pulumi.StringInput) PrivateNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateNetwork {
		return vs[0].(map[string]*PrivateNetwork)[vs[1].(string)]
	}).(PrivateNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkInput)(nil)).Elem(), &PrivateNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkArrayInput)(nil)).Elem(), PrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkMapInput)(nil)).Elem(), PrivateNetworkMap{})
	pulumi.RegisterOutputType(PrivateNetworkOutput{})
	pulumi.RegisterOutputType(PrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(PrivateNetworkMapOutput{})
}
