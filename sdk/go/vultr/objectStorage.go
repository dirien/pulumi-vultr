// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr private object storage resource. This can be used to create, read, update and delete object storage resources on your Vultr account.
//
// ## Example Usage
//
// Create a new object storage subscription.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewObjectStorage(ctx, "tf", &vultr.ObjectStorageArgs{
//				ClusterId: pulumi.Int(2),
//				Label:     pulumi.String("tf-label"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Object Storage can be imported using the object storage `ID`, e.g.
//
// ```sh
//
//	$ pulumi import vultr:index/objectStorage:ObjectStorage my_s3 0e04f918-575e-41cb-86f6-d729b354a5a1
//
// ```
type ObjectStorage struct {
	pulumi.CustomResourceState

	// The region ID that you want the network to be created in.
	ClusterId pulumi.IntOutput `pulumi:"clusterId"`
	// Date of creation for the object storage subscription.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The description you want to give your network.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// The location which this subscription resides in.
	Location pulumi.StringOutput `pulumi:"location"`
	// The region ID of the object storage subscription.
	Region pulumi.StringOutput `pulumi:"region"`
	// Your access key.
	S3AccessKey pulumi.StringOutput `pulumi:"s3AccessKey"`
	// The hostname for this subscription.
	S3Hostname pulumi.StringOutput `pulumi:"s3Hostname"`
	// Your secret key.
	S3SecretKey pulumi.StringOutput `pulumi:"s3SecretKey"`
	// Current status of this object storage subscription.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewObjectStorage registers a new resource with the given unique name, arguments, and options.
func NewObjectStorage(ctx *pulumi.Context,
	name string, args *ObjectStorageArgs, opts ...pulumi.ResourceOption) (*ObjectStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"s3AccessKey",
		"s3SecretKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ObjectStorage
	err := ctx.RegisterResource("vultr:index/objectStorage:ObjectStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStorage gets an existing ObjectStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStorageState, opts ...pulumi.ResourceOption) (*ObjectStorage, error) {
	var resource ObjectStorage
	err := ctx.ReadResource("vultr:index/objectStorage:ObjectStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStorage resources.
type objectStorageState struct {
	// The region ID that you want the network to be created in.
	ClusterId *int `pulumi:"clusterId"`
	// Date of creation for the object storage subscription.
	DateCreated *string `pulumi:"dateCreated"`
	// The description you want to give your network.
	Label *string `pulumi:"label"`
	// The location which this subscription resides in.
	Location *string `pulumi:"location"`
	// The region ID of the object storage subscription.
	Region *string `pulumi:"region"`
	// Your access key.
	S3AccessKey *string `pulumi:"s3AccessKey"`
	// The hostname for this subscription.
	S3Hostname *string `pulumi:"s3Hostname"`
	// Your secret key.
	S3SecretKey *string `pulumi:"s3SecretKey"`
	// Current status of this object storage subscription.
	Status *string `pulumi:"status"`
}

type ObjectStorageState struct {
	// The region ID that you want the network to be created in.
	ClusterId pulumi.IntPtrInput
	// Date of creation for the object storage subscription.
	DateCreated pulumi.StringPtrInput
	// The description you want to give your network.
	Label pulumi.StringPtrInput
	// The location which this subscription resides in.
	Location pulumi.StringPtrInput
	// The region ID of the object storage subscription.
	Region pulumi.StringPtrInput
	// Your access key.
	S3AccessKey pulumi.StringPtrInput
	// The hostname for this subscription.
	S3Hostname pulumi.StringPtrInput
	// Your secret key.
	S3SecretKey pulumi.StringPtrInput
	// Current status of this object storage subscription.
	Status pulumi.StringPtrInput
}

func (ObjectStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStorageState)(nil)).Elem()
}

type objectStorageArgs struct {
	// The region ID that you want the network to be created in.
	ClusterId int `pulumi:"clusterId"`
	// The description you want to give your network.
	Label *string `pulumi:"label"`
}

// The set of arguments for constructing a ObjectStorage resource.
type ObjectStorageArgs struct {
	// The region ID that you want the network to be created in.
	ClusterId pulumi.IntInput
	// The description you want to give your network.
	Label pulumi.StringPtrInput
}

func (ObjectStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStorageArgs)(nil)).Elem()
}

type ObjectStorageInput interface {
	pulumi.Input

	ToObjectStorageOutput() ObjectStorageOutput
	ToObjectStorageOutputWithContext(ctx context.Context) ObjectStorageOutput
}

func (*ObjectStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStorage)(nil)).Elem()
}

func (i *ObjectStorage) ToObjectStorageOutput() ObjectStorageOutput {
	return i.ToObjectStorageOutputWithContext(context.Background())
}

func (i *ObjectStorage) ToObjectStorageOutputWithContext(ctx context.Context) ObjectStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorageOutput)
}

// ObjectStorageArrayInput is an input type that accepts ObjectStorageArray and ObjectStorageArrayOutput values.
// You can construct a concrete instance of `ObjectStorageArrayInput` via:
//
//	ObjectStorageArray{ ObjectStorageArgs{...} }
type ObjectStorageArrayInput interface {
	pulumi.Input

	ToObjectStorageArrayOutput() ObjectStorageArrayOutput
	ToObjectStorageArrayOutputWithContext(context.Context) ObjectStorageArrayOutput
}

type ObjectStorageArray []ObjectStorageInput

func (ObjectStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStorage)(nil)).Elem()
}

func (i ObjectStorageArray) ToObjectStorageArrayOutput() ObjectStorageArrayOutput {
	return i.ToObjectStorageArrayOutputWithContext(context.Background())
}

func (i ObjectStorageArray) ToObjectStorageArrayOutputWithContext(ctx context.Context) ObjectStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorageArrayOutput)
}

// ObjectStorageMapInput is an input type that accepts ObjectStorageMap and ObjectStorageMapOutput values.
// You can construct a concrete instance of `ObjectStorageMapInput` via:
//
//	ObjectStorageMap{ "key": ObjectStorageArgs{...} }
type ObjectStorageMapInput interface {
	pulumi.Input

	ToObjectStorageMapOutput() ObjectStorageMapOutput
	ToObjectStorageMapOutputWithContext(context.Context) ObjectStorageMapOutput
}

type ObjectStorageMap map[string]ObjectStorageInput

func (ObjectStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStorage)(nil)).Elem()
}

func (i ObjectStorageMap) ToObjectStorageMapOutput() ObjectStorageMapOutput {
	return i.ToObjectStorageMapOutputWithContext(context.Background())
}

func (i ObjectStorageMap) ToObjectStorageMapOutputWithContext(ctx context.Context) ObjectStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorageMapOutput)
}

type ObjectStorageOutput struct{ *pulumi.OutputState }

func (ObjectStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStorage)(nil)).Elem()
}

func (o ObjectStorageOutput) ToObjectStorageOutput() ObjectStorageOutput {
	return o
}

func (o ObjectStorageOutput) ToObjectStorageOutputWithContext(ctx context.Context) ObjectStorageOutput {
	return o
}

// The region ID that you want the network to be created in.
func (o ObjectStorageOutput) ClusterId() pulumi.IntOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.IntOutput { return v.ClusterId }).(pulumi.IntOutput)
}

// Date of creation for the object storage subscription.
func (o ObjectStorageOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// The description you want to give your network.
func (o ObjectStorageOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// The location which this subscription resides in.
func (o ObjectStorageOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The region ID of the object storage subscription.
func (o ObjectStorageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Your access key.
func (o ObjectStorageOutput) S3AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.S3AccessKey }).(pulumi.StringOutput)
}

// The hostname for this subscription.
func (o ObjectStorageOutput) S3Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.S3Hostname }).(pulumi.StringOutput)
}

// Your secret key.
func (o ObjectStorageOutput) S3SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.S3SecretKey }).(pulumi.StringOutput)
}

// Current status of this object storage subscription.
func (o ObjectStorageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStorage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ObjectStorageArrayOutput struct{ *pulumi.OutputState }

func (ObjectStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStorage)(nil)).Elem()
}

func (o ObjectStorageArrayOutput) ToObjectStorageArrayOutput() ObjectStorageArrayOutput {
	return o
}

func (o ObjectStorageArrayOutput) ToObjectStorageArrayOutputWithContext(ctx context.Context) ObjectStorageArrayOutput {
	return o
}

func (o ObjectStorageArrayOutput) Index(i pulumi.IntInput) ObjectStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStorage {
		return vs[0].([]*ObjectStorage)[vs[1].(int)]
	}).(ObjectStorageOutput)
}

type ObjectStorageMapOutput struct{ *pulumi.OutputState }

func (ObjectStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStorage)(nil)).Elem()
}

func (o ObjectStorageMapOutput) ToObjectStorageMapOutput() ObjectStorageMapOutput {
	return o
}

func (o ObjectStorageMapOutput) ToObjectStorageMapOutputWithContext(ctx context.Context) ObjectStorageMapOutput {
	return o
}

func (o ObjectStorageMapOutput) MapIndex(k pulumi.StringInput) ObjectStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStorage {
		return vs[0].(map[string]*ObjectStorage)[vs[1].(string)]
	}).(ObjectStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorageInput)(nil)).Elem(), &ObjectStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorageArrayInput)(nil)).Elem(), ObjectStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorageMapInput)(nil)).Elem(), ObjectStorageMap{})
	pulumi.RegisterOutputType(ObjectStorageOutput{})
	pulumi.RegisterOutputType(ObjectStorageArrayOutput{})
	pulumi.RegisterOutputType(ObjectStorageMapOutput{})
}
