// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseConnectionPool struct {
	pulumi.CustomResourceState

	Database   pulumi.StringOutput `pulumi:"database"`
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	Mode       pulumi.StringOutput `pulumi:"mode"`
	Name       pulumi.StringOutput `pulumi:"name"`
	Size       pulumi.IntOutput    `pulumi:"size"`
	Username   pulumi.StringOutput `pulumi:"username"`
}

// NewDatabaseConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewDatabaseConnectionPool(ctx *pulumi.Context,
	name string, args *DatabaseConnectionPoolArgs, opts ...pulumi.ResourceOption) (*DatabaseConnectionPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DatabaseConnectionPool
	err := ctx.RegisterResource("vultr:index/databaseConnectionPool:DatabaseConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseConnectionPool gets an existing DatabaseConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseConnectionPoolState, opts ...pulumi.ResourceOption) (*DatabaseConnectionPool, error) {
	var resource DatabaseConnectionPool
	err := ctx.ReadResource("vultr:index/databaseConnectionPool:DatabaseConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseConnectionPool resources.
type databaseConnectionPoolState struct {
	Database   *string `pulumi:"database"`
	DatabaseId *string `pulumi:"databaseId"`
	Mode       *string `pulumi:"mode"`
	Name       *string `pulumi:"name"`
	Size       *int    `pulumi:"size"`
	Username   *string `pulumi:"username"`
}

type DatabaseConnectionPoolState struct {
	Database   pulumi.StringPtrInput
	DatabaseId pulumi.StringPtrInput
	Mode       pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Size       pulumi.IntPtrInput
	Username   pulumi.StringPtrInput
}

func (DatabaseConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionPoolState)(nil)).Elem()
}

type databaseConnectionPoolArgs struct {
	Database   string  `pulumi:"database"`
	DatabaseId string  `pulumi:"databaseId"`
	Mode       string  `pulumi:"mode"`
	Name       *string `pulumi:"name"`
	Size       int     `pulumi:"size"`
	Username   string  `pulumi:"username"`
}

// The set of arguments for constructing a DatabaseConnectionPool resource.
type DatabaseConnectionPoolArgs struct {
	Database   pulumi.StringInput
	DatabaseId pulumi.StringInput
	Mode       pulumi.StringInput
	Name       pulumi.StringPtrInput
	Size       pulumi.IntInput
	Username   pulumi.StringInput
}

func (DatabaseConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionPoolArgs)(nil)).Elem()
}

type DatabaseConnectionPoolInput interface {
	pulumi.Input

	ToDatabaseConnectionPoolOutput() DatabaseConnectionPoolOutput
	ToDatabaseConnectionPoolOutputWithContext(ctx context.Context) DatabaseConnectionPoolOutput
}

func (*DatabaseConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnectionPool)(nil)).Elem()
}

func (i *DatabaseConnectionPool) ToDatabaseConnectionPoolOutput() DatabaseConnectionPoolOutput {
	return i.ToDatabaseConnectionPoolOutputWithContext(context.Background())
}

func (i *DatabaseConnectionPool) ToDatabaseConnectionPoolOutputWithContext(ctx context.Context) DatabaseConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionPoolOutput)
}

// DatabaseConnectionPoolArrayInput is an input type that accepts DatabaseConnectionPoolArray and DatabaseConnectionPoolArrayOutput values.
// You can construct a concrete instance of `DatabaseConnectionPoolArrayInput` via:
//
//	DatabaseConnectionPoolArray{ DatabaseConnectionPoolArgs{...} }
type DatabaseConnectionPoolArrayInput interface {
	pulumi.Input

	ToDatabaseConnectionPoolArrayOutput() DatabaseConnectionPoolArrayOutput
	ToDatabaseConnectionPoolArrayOutputWithContext(context.Context) DatabaseConnectionPoolArrayOutput
}

type DatabaseConnectionPoolArray []DatabaseConnectionPoolInput

func (DatabaseConnectionPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnectionPool)(nil)).Elem()
}

func (i DatabaseConnectionPoolArray) ToDatabaseConnectionPoolArrayOutput() DatabaseConnectionPoolArrayOutput {
	return i.ToDatabaseConnectionPoolArrayOutputWithContext(context.Background())
}

func (i DatabaseConnectionPoolArray) ToDatabaseConnectionPoolArrayOutputWithContext(ctx context.Context) DatabaseConnectionPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionPoolArrayOutput)
}

// DatabaseConnectionPoolMapInput is an input type that accepts DatabaseConnectionPoolMap and DatabaseConnectionPoolMapOutput values.
// You can construct a concrete instance of `DatabaseConnectionPoolMapInput` via:
//
//	DatabaseConnectionPoolMap{ "key": DatabaseConnectionPoolArgs{...} }
type DatabaseConnectionPoolMapInput interface {
	pulumi.Input

	ToDatabaseConnectionPoolMapOutput() DatabaseConnectionPoolMapOutput
	ToDatabaseConnectionPoolMapOutputWithContext(context.Context) DatabaseConnectionPoolMapOutput
}

type DatabaseConnectionPoolMap map[string]DatabaseConnectionPoolInput

func (DatabaseConnectionPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnectionPool)(nil)).Elem()
}

func (i DatabaseConnectionPoolMap) ToDatabaseConnectionPoolMapOutput() DatabaseConnectionPoolMapOutput {
	return i.ToDatabaseConnectionPoolMapOutputWithContext(context.Background())
}

func (i DatabaseConnectionPoolMap) ToDatabaseConnectionPoolMapOutputWithContext(ctx context.Context) DatabaseConnectionPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionPoolMapOutput)
}

type DatabaseConnectionPoolOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnectionPool)(nil)).Elem()
}

func (o DatabaseConnectionPoolOutput) ToDatabaseConnectionPoolOutput() DatabaseConnectionPoolOutput {
	return o
}

func (o DatabaseConnectionPoolOutput) ToDatabaseConnectionPoolOutputWithContext(ctx context.Context) DatabaseConnectionPoolOutput {
	return o
}

func (o DatabaseConnectionPoolOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o DatabaseConnectionPoolOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

func (o DatabaseConnectionPoolOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

func (o DatabaseConnectionPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseConnectionPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o DatabaseConnectionPoolOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionPool) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type DatabaseConnectionPoolArrayOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnectionPool)(nil)).Elem()
}

func (o DatabaseConnectionPoolArrayOutput) ToDatabaseConnectionPoolArrayOutput() DatabaseConnectionPoolArrayOutput {
	return o
}

func (o DatabaseConnectionPoolArrayOutput) ToDatabaseConnectionPoolArrayOutputWithContext(ctx context.Context) DatabaseConnectionPoolArrayOutput {
	return o
}

func (o DatabaseConnectionPoolArrayOutput) Index(i pulumi.IntInput) DatabaseConnectionPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseConnectionPool {
		return vs[0].([]*DatabaseConnectionPool)[vs[1].(int)]
	}).(DatabaseConnectionPoolOutput)
}

type DatabaseConnectionPoolMapOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnectionPool)(nil)).Elem()
}

func (o DatabaseConnectionPoolMapOutput) ToDatabaseConnectionPoolMapOutput() DatabaseConnectionPoolMapOutput {
	return o
}

func (o DatabaseConnectionPoolMapOutput) ToDatabaseConnectionPoolMapOutputWithContext(ctx context.Context) DatabaseConnectionPoolMapOutput {
	return o
}

func (o DatabaseConnectionPoolMapOutput) MapIndex(k pulumi.StringInput) DatabaseConnectionPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseConnectionPool {
		return vs[0].(map[string]*DatabaseConnectionPool)[vs[1].(string)]
	}).(DatabaseConnectionPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionPoolInput)(nil)).Elem(), &DatabaseConnectionPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionPoolArrayInput)(nil)).Elem(), DatabaseConnectionPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionPoolMapInput)(nil)).Elem(), DatabaseConnectionPoolMap{})
	pulumi.RegisterOutputType(DatabaseConnectionPoolOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionPoolArrayOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionPoolMapOutput{})
}
