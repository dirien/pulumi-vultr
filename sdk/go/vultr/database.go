// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr database resource. This can be used to create, read, modify, and delete managed databases on your Vultr account.
//
// ## Example Usage
//
// Create a new database:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewDatabase(ctx, "myDatabase", &vultr.DatabaseArgs{
//				DatabaseEngine:        pulumi.String("pg"),
//				DatabaseEngineVersion: pulumi.String("15"),
//				Label:                 pulumi.String("my_database_label"),
//				Plan:                  pulumi.String("vultr-dbaas-startup-cc-1-55-2"),
//				Region:                pulumi.String("ewr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Create a new database with options:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewDatabase(ctx, "myDatabase", &vultr.DatabaseArgs{
//				ClusterTimeZone:       pulumi.String("America/New_York"),
//				DatabaseEngine:        pulumi.String("pg"),
//				DatabaseEngineVersion: pulumi.String("15"),
//				Label:                 pulumi.String("my_database_label"),
//				MaintenanceDow:        pulumi.String("sunday"),
//				MaintenanceTime:       pulumi.String("01:00"),
//				Plan:                  pulumi.String("vultr-dbaas-startup-cc-1-55-2"),
//				Region:                pulumi.String("ewr"),
//				Tag:                   pulumi.String("some tag"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database can be imported using the database `ID`, e.g.
//
// ```sh
// $ pulumi import vultr:index/database:Database my_database b6a859c5-b299-49dd-8888-b1abbc517d08
// ```
type Database struct {
	pulumi.CustomResourceState

	// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
	ClusterTimeZone pulumi.StringOutput `pulumi:"clusterTimeZone"`
	// The database engine of the new managed database.
	DatabaseEngine pulumi.StringOutput `pulumi:"databaseEngine"`
	// The database engine version of the new managed database.
	DatabaseEngineVersion pulumi.StringOutput `pulumi:"databaseEngineVersion"`
	// The date the managed database was added to your Vultr account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The managed database's default logical database.
	Dbname pulumi.StringOutput `pulumi:"dbname"`
	// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
	FerretdbCredentials pulumi.MapOutput `pulumi:"ferretdbCredentials"`
	// The hostname assigned to the managed database.
	Host pulumi.StringOutput `pulumi:"host"`
	// A label for the managed database.
	Label pulumi.StringOutput `pulumi:"label"`
	// The date of the latest backup available on the managed database.
	LatestBackup pulumi.StringOutput `pulumi:"latestBackup"`
	// The preferred maintenance day of week for the managed database.
	MaintenanceDow pulumi.StringOutput `pulumi:"maintenanceDow"`
	// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
	MaintenanceTime pulumi.StringOutput `pulumi:"maintenanceTime"`
	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MysqlLongQueryTime pulumi.IntPtrOutput `pulumi:"mysqlLongQueryTime"`
	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MysqlRequirePrimaryKey pulumi.BoolPtrOutput `pulumi:"mysqlRequirePrimaryKey"`
	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MysqlSlowQueryLog pulumi.BoolPtrOutput `pulumi:"mysqlSlowQueryLog"`
	// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
	MysqlSqlModes pulumi.StringArrayOutput `pulumi:"mysqlSqlModes"`
	// The password for the managed database's primary admin user.
	Password pulumi.StringOutput `pulumi:"password"`
	// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The description of the disk(s) on the managed database.
	PlanDisk pulumi.IntOutput `pulumi:"planDisk"`
	// The amount of memory available on the managed database in MB.
	PlanRam pulumi.IntOutput `pulumi:"planRam"`
	// The number of standby nodes available on the managed database.
	PlanReplicas pulumi.IntOutput `pulumi:"planReplicas"`
	// The number of virtual CPUs available on the managed database.
	PlanVcpus pulumi.IntOutput `pulumi:"planVcpus"`
	// The connection port for the managed database.
	Port pulumi.StringOutput `pulumi:"port"`
	// The public hostname assigned to the managed database (VPC-attached only).
	PublicHost pulumi.StringOutput `pulumi:"publicHost"`
	// A list of read replicas attached to the managed database.
	ReadReplicas DatabaseReadReplicaArrayOutput `pulumi:"readReplicas"`
	// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
	RedisEvictionPolicy pulumi.StringOutput `pulumi:"redisEvictionPolicy"`
	// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the managed database (poweroff, rebuilding, rebalancing, configuring, running).
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag to assign to the managed database.
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// A list of allowed IP addresses for the managed database.
	TrustedIps pulumi.StringArrayOutput `pulumi:"trustedIps"`
	// The primary admin user for the managed database.
	User pulumi.StringOutput `pulumi:"user"`
	// The ID of the VPC Network to attach to the Managed Database.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseEngine == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseEngine'")
	}
	if args.DatabaseEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseEngineVersion'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("vultr:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("vultr:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
	ClusterTimeZone *string `pulumi:"clusterTimeZone"`
	// The database engine of the new managed database.
	DatabaseEngine *string `pulumi:"databaseEngine"`
	// The database engine version of the new managed database.
	DatabaseEngineVersion *string `pulumi:"databaseEngineVersion"`
	// The date the managed database was added to your Vultr account.
	DateCreated *string `pulumi:"dateCreated"`
	// The managed database's default logical database.
	Dbname *string `pulumi:"dbname"`
	// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
	FerretdbCredentials map[string]interface{} `pulumi:"ferretdbCredentials"`
	// The hostname assigned to the managed database.
	Host *string `pulumi:"host"`
	// A label for the managed database.
	Label *string `pulumi:"label"`
	// The date of the latest backup available on the managed database.
	LatestBackup *string `pulumi:"latestBackup"`
	// The preferred maintenance day of week for the managed database.
	MaintenanceDow *string `pulumi:"maintenanceDow"`
	// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MysqlLongQueryTime *int `pulumi:"mysqlLongQueryTime"`
	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MysqlRequirePrimaryKey *bool `pulumi:"mysqlRequirePrimaryKey"`
	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MysqlSlowQueryLog *bool `pulumi:"mysqlSlowQueryLog"`
	// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
	MysqlSqlModes []string `pulumi:"mysqlSqlModes"`
	// The password for the managed database's primary admin user.
	Password *string `pulumi:"password"`
	// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
	Plan *string `pulumi:"plan"`
	// The description of the disk(s) on the managed database.
	PlanDisk *int `pulumi:"planDisk"`
	// The amount of memory available on the managed database in MB.
	PlanRam *int `pulumi:"planRam"`
	// The number of standby nodes available on the managed database.
	PlanReplicas *int `pulumi:"planReplicas"`
	// The number of virtual CPUs available on the managed database.
	PlanVcpus *int `pulumi:"planVcpus"`
	// The connection port for the managed database.
	Port *string `pulumi:"port"`
	// The public hostname assigned to the managed database (VPC-attached only).
	PublicHost *string `pulumi:"publicHost"`
	// A list of read replicas attached to the managed database.
	ReadReplicas []DatabaseReadReplica `pulumi:"readReplicas"`
	// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
	RedisEvictionPolicy *string `pulumi:"redisEvictionPolicy"`
	// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region *string `pulumi:"region"`
	// The current status of the managed database (poweroff, rebuilding, rebalancing, configuring, running).
	Status *string `pulumi:"status"`
	// The tag to assign to the managed database.
	Tag *string `pulumi:"tag"`
	// A list of allowed IP addresses for the managed database.
	TrustedIps []string `pulumi:"trustedIps"`
	// The primary admin user for the managed database.
	User *string `pulumi:"user"`
	// The ID of the VPC Network to attach to the Managed Database.
	VpcId *string `pulumi:"vpcId"`
}

type DatabaseState struct {
	// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
	ClusterTimeZone pulumi.StringPtrInput
	// The database engine of the new managed database.
	DatabaseEngine pulumi.StringPtrInput
	// The database engine version of the new managed database.
	DatabaseEngineVersion pulumi.StringPtrInput
	// The date the managed database was added to your Vultr account.
	DateCreated pulumi.StringPtrInput
	// The managed database's default logical database.
	Dbname pulumi.StringPtrInput
	// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
	FerretdbCredentials pulumi.MapInput
	// The hostname assigned to the managed database.
	Host pulumi.StringPtrInput
	// A label for the managed database.
	Label pulumi.StringPtrInput
	// The date of the latest backup available on the managed database.
	LatestBackup pulumi.StringPtrInput
	// The preferred maintenance day of week for the managed database.
	MaintenanceDow pulumi.StringPtrInput
	// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
	MaintenanceTime pulumi.StringPtrInput
	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MysqlLongQueryTime pulumi.IntPtrInput
	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MysqlRequirePrimaryKey pulumi.BoolPtrInput
	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MysqlSlowQueryLog pulumi.BoolPtrInput
	// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
	MysqlSqlModes pulumi.StringArrayInput
	// The password for the managed database's primary admin user.
	Password pulumi.StringPtrInput
	// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
	Plan pulumi.StringPtrInput
	// The description of the disk(s) on the managed database.
	PlanDisk pulumi.IntPtrInput
	// The amount of memory available on the managed database in MB.
	PlanRam pulumi.IntPtrInput
	// The number of standby nodes available on the managed database.
	PlanReplicas pulumi.IntPtrInput
	// The number of virtual CPUs available on the managed database.
	PlanVcpus pulumi.IntPtrInput
	// The connection port for the managed database.
	Port pulumi.StringPtrInput
	// The public hostname assigned to the managed database (VPC-attached only).
	PublicHost pulumi.StringPtrInput
	// A list of read replicas attached to the managed database.
	ReadReplicas DatabaseReadReplicaArrayInput
	// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
	RedisEvictionPolicy pulumi.StringPtrInput
	// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringPtrInput
	// The current status of the managed database (poweroff, rebuilding, rebalancing, configuring, running).
	Status pulumi.StringPtrInput
	// The tag to assign to the managed database.
	Tag pulumi.StringPtrInput
	// A list of allowed IP addresses for the managed database.
	TrustedIps pulumi.StringArrayInput
	// The primary admin user for the managed database.
	User pulumi.StringPtrInput
	// The ID of the VPC Network to attach to the Managed Database.
	VpcId pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
	ClusterTimeZone *string `pulumi:"clusterTimeZone"`
	// The database engine of the new managed database.
	DatabaseEngine string `pulumi:"databaseEngine"`
	// The database engine version of the new managed database.
	DatabaseEngineVersion string `pulumi:"databaseEngineVersion"`
	// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
	FerretdbCredentials map[string]interface{} `pulumi:"ferretdbCredentials"`
	// A label for the managed database.
	Label string `pulumi:"label"`
	// The preferred maintenance day of week for the managed database.
	MaintenanceDow *string `pulumi:"maintenanceDow"`
	// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MysqlLongQueryTime *int `pulumi:"mysqlLongQueryTime"`
	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MysqlRequirePrimaryKey *bool `pulumi:"mysqlRequirePrimaryKey"`
	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MysqlSlowQueryLog *bool `pulumi:"mysqlSlowQueryLog"`
	// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
	MysqlSqlModes []string `pulumi:"mysqlSqlModes"`
	// The password for the managed database's primary admin user.
	Password *string `pulumi:"password"`
	// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
	Plan string `pulumi:"plan"`
	// The description of the disk(s) on the managed database.
	PlanDisk *int `pulumi:"planDisk"`
	// The public hostname assigned to the managed database (VPC-attached only).
	PublicHost *string `pulumi:"publicHost"`
	// A list of read replicas attached to the managed database.
	ReadReplicas []DatabaseReadReplica `pulumi:"readReplicas"`
	// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
	RedisEvictionPolicy *string `pulumi:"redisEvictionPolicy"`
	// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region string `pulumi:"region"`
	// The tag to assign to the managed database.
	Tag *string `pulumi:"tag"`
	// A list of allowed IP addresses for the managed database.
	TrustedIps []string `pulumi:"trustedIps"`
	// The ID of the VPC Network to attach to the Managed Database.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
	ClusterTimeZone pulumi.StringPtrInput
	// The database engine of the new managed database.
	DatabaseEngine pulumi.StringInput
	// The database engine version of the new managed database.
	DatabaseEngineVersion pulumi.StringInput
	// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
	FerretdbCredentials pulumi.MapInput
	// A label for the managed database.
	Label pulumi.StringInput
	// The preferred maintenance day of week for the managed database.
	MaintenanceDow pulumi.StringPtrInput
	// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
	MaintenanceTime pulumi.StringPtrInput
	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MysqlLongQueryTime pulumi.IntPtrInput
	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MysqlRequirePrimaryKey pulumi.BoolPtrInput
	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MysqlSlowQueryLog pulumi.BoolPtrInput
	// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
	MysqlSqlModes pulumi.StringArrayInput
	// The password for the managed database's primary admin user.
	Password pulumi.StringPtrInput
	// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
	Plan pulumi.StringInput
	// The description of the disk(s) on the managed database.
	PlanDisk pulumi.IntPtrInput
	// The public hostname assigned to the managed database (VPC-attached only).
	PublicHost pulumi.StringPtrInput
	// A list of read replicas attached to the managed database.
	ReadReplicas DatabaseReadReplicaArrayInput
	// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
	RedisEvictionPolicy pulumi.StringPtrInput
	// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringInput
	// The tag to assign to the managed database.
	Tag pulumi.StringPtrInput
	// A list of allowed IP addresses for the managed database.
	TrustedIps pulumi.StringArrayInput
	// The ID of the VPC Network to attach to the Managed Database.
	VpcId pulumi.StringPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
func (o DatabaseOutput) ClusterTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.ClusterTimeZone }).(pulumi.StringOutput)
}

// The database engine of the new managed database.
func (o DatabaseOutput) DatabaseEngine() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseEngine }).(pulumi.StringOutput)
}

// The database engine version of the new managed database.
func (o DatabaseOutput) DatabaseEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseEngineVersion }).(pulumi.StringOutput)
}

// The date the managed database was added to your Vultr account.
func (o DatabaseOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// The managed database's default logical database.
func (o DatabaseOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Dbname }).(pulumi.StringOutput)
}

// An associated list of FerretDB connection credentials (FerretDB + PostgreSQL engine types only).
func (o DatabaseOutput) FerretdbCredentials() pulumi.MapOutput {
	return o.ApplyT(func(v *Database) pulumi.MapOutput { return v.FerretdbCredentials }).(pulumi.MapOutput)
}

// The hostname assigned to the managed database.
func (o DatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// A label for the managed database.
func (o DatabaseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The date of the latest backup available on the managed database.
func (o DatabaseOutput) LatestBackup() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.LatestBackup }).(pulumi.StringOutput)
}

// The preferred maintenance day of week for the managed database.
func (o DatabaseOutput) MaintenanceDow() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MaintenanceDow }).(pulumi.StringOutput)
}

// The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
func (o DatabaseOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MaintenanceTime }).(pulumi.StringOutput)
}

// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
func (o DatabaseOutput) MysqlLongQueryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.IntPtrOutput { return v.MysqlLongQueryTime }).(pulumi.IntPtrOutput)
}

// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
func (o DatabaseOutput) MysqlRequirePrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.MysqlRequirePrimaryKey }).(pulumi.BoolPtrOutput)
}

// The configuration value for slow query logging on the managed database (MySQL engine types only).
func (o DatabaseOutput) MysqlSlowQueryLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.MysqlSlowQueryLog }).(pulumi.BoolPtrOutput)
}

// A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
func (o DatabaseOutput) MysqlSqlModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Database) pulumi.StringArrayOutput { return v.MysqlSqlModes }).(pulumi.StringArrayOutput)
}

// The password for the managed database's primary admin user.
func (o DatabaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
func (o DatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The description of the disk(s) on the managed database.
func (o DatabaseOutput) PlanDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanDisk }).(pulumi.IntOutput)
}

// The amount of memory available on the managed database in MB.
func (o DatabaseOutput) PlanRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanRam }).(pulumi.IntOutput)
}

// The number of standby nodes available on the managed database.
func (o DatabaseOutput) PlanReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanReplicas }).(pulumi.IntOutput)
}

// The number of virtual CPUs available on the managed database.
func (o DatabaseOutput) PlanVcpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanVcpus }).(pulumi.IntOutput)
}

// The connection port for the managed database.
func (o DatabaseOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// The public hostname assigned to the managed database (VPC-attached only).
func (o DatabaseOutput) PublicHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.PublicHost }).(pulumi.StringOutput)
}

// A list of read replicas attached to the managed database.
func (o DatabaseOutput) ReadReplicas() DatabaseReadReplicaArrayOutput {
	return o.ApplyT(func(v *Database) DatabaseReadReplicaArrayOutput { return v.ReadReplicas }).(DatabaseReadReplicaArrayOutput)
}

// The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
func (o DatabaseOutput) RedisEvictionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.RedisEvictionPolicy }).(pulumi.StringOutput)
}

// The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
func (o DatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current status of the managed database (poweroff, rebuilding, rebalancing, configuring, running).
func (o DatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag to assign to the managed database.
func (o DatabaseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Tag }).(pulumi.StringPtrOutput)
}

// A list of allowed IP addresses for the managed database.
func (o DatabaseOutput) TrustedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Database) pulumi.StringArrayOutput { return v.TrustedIps }).(pulumi.StringArrayOutput)
}

// The primary admin user for the managed database.
func (o DatabaseOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// The ID of the VPC Network to attach to the Managed Database.
func (o DatabaseOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
