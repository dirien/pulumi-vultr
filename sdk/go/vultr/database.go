// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Database struct {
	pulumi.CustomResourceState

	ClusterTimeZone        pulumi.StringPtrOutput         `pulumi:"clusterTimeZone"`
	DatabaseEngine         pulumi.StringOutput            `pulumi:"databaseEngine"`
	DatabaseEngineVersion  pulumi.StringOutput            `pulumi:"databaseEngineVersion"`
	DateCreated            pulumi.StringOutput            `pulumi:"dateCreated"`
	Dbname                 pulumi.StringOutput            `pulumi:"dbname"`
	Host                   pulumi.StringOutput            `pulumi:"host"`
	Label                  pulumi.StringOutput            `pulumi:"label"`
	LatestBackup           pulumi.StringOutput            `pulumi:"latestBackup"`
	MaintenanceDow         pulumi.StringPtrOutput         `pulumi:"maintenanceDow"`
	MaintenanceTime        pulumi.StringPtrOutput         `pulumi:"maintenanceTime"`
	MysqlLongQueryTime     pulumi.IntPtrOutput            `pulumi:"mysqlLongQueryTime"`
	MysqlRequirePrimaryKey pulumi.BoolPtrOutput           `pulumi:"mysqlRequirePrimaryKey"`
	MysqlSlowQueryLog      pulumi.BoolPtrOutput           `pulumi:"mysqlSlowQueryLog"`
	MysqlSqlModes          pulumi.StringArrayOutput       `pulumi:"mysqlSqlModes"`
	Password               pulumi.StringOutput            `pulumi:"password"`
	Plan                   pulumi.StringOutput            `pulumi:"plan"`
	PlanDisk               pulumi.IntOutput               `pulumi:"planDisk"`
	PlanRam                pulumi.IntOutput               `pulumi:"planRam"`
	PlanReplicas           pulumi.IntOutput               `pulumi:"planReplicas"`
	PlanVcpus              pulumi.IntOutput               `pulumi:"planVcpus"`
	Port                   pulumi.StringOutput            `pulumi:"port"`
	ReadReplicas           DatabaseReadReplicaArrayOutput `pulumi:"readReplicas"`
	RedisEvictionPolicy    pulumi.StringPtrOutput         `pulumi:"redisEvictionPolicy"`
	Region                 pulumi.StringOutput            `pulumi:"region"`
	Status                 pulumi.StringOutput            `pulumi:"status"`
	Tag                    pulumi.StringPtrOutput         `pulumi:"tag"`
	TrustedIps             pulumi.StringArrayOutput       `pulumi:"trustedIps"`
	User                   pulumi.StringOutput            `pulumi:"user"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseEngine == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseEngine'")
	}
	if args.DatabaseEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseEngineVersion'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("vultr:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("vultr:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	ClusterTimeZone        *string               `pulumi:"clusterTimeZone"`
	DatabaseEngine         *string               `pulumi:"databaseEngine"`
	DatabaseEngineVersion  *string               `pulumi:"databaseEngineVersion"`
	DateCreated            *string               `pulumi:"dateCreated"`
	Dbname                 *string               `pulumi:"dbname"`
	Host                   *string               `pulumi:"host"`
	Label                  *string               `pulumi:"label"`
	LatestBackup           *string               `pulumi:"latestBackup"`
	MaintenanceDow         *string               `pulumi:"maintenanceDow"`
	MaintenanceTime        *string               `pulumi:"maintenanceTime"`
	MysqlLongQueryTime     *int                  `pulumi:"mysqlLongQueryTime"`
	MysqlRequirePrimaryKey *bool                 `pulumi:"mysqlRequirePrimaryKey"`
	MysqlSlowQueryLog      *bool                 `pulumi:"mysqlSlowQueryLog"`
	MysqlSqlModes          []string              `pulumi:"mysqlSqlModes"`
	Password               *string               `pulumi:"password"`
	Plan                   *string               `pulumi:"plan"`
	PlanDisk               *int                  `pulumi:"planDisk"`
	PlanRam                *int                  `pulumi:"planRam"`
	PlanReplicas           *int                  `pulumi:"planReplicas"`
	PlanVcpus              *int                  `pulumi:"planVcpus"`
	Port                   *string               `pulumi:"port"`
	ReadReplicas           []DatabaseReadReplica `pulumi:"readReplicas"`
	RedisEvictionPolicy    *string               `pulumi:"redisEvictionPolicy"`
	Region                 *string               `pulumi:"region"`
	Status                 *string               `pulumi:"status"`
	Tag                    *string               `pulumi:"tag"`
	TrustedIps             []string              `pulumi:"trustedIps"`
	User                   *string               `pulumi:"user"`
}

type DatabaseState struct {
	ClusterTimeZone        pulumi.StringPtrInput
	DatabaseEngine         pulumi.StringPtrInput
	DatabaseEngineVersion  pulumi.StringPtrInput
	DateCreated            pulumi.StringPtrInput
	Dbname                 pulumi.StringPtrInput
	Host                   pulumi.StringPtrInput
	Label                  pulumi.StringPtrInput
	LatestBackup           pulumi.StringPtrInput
	MaintenanceDow         pulumi.StringPtrInput
	MaintenanceTime        pulumi.StringPtrInput
	MysqlLongQueryTime     pulumi.IntPtrInput
	MysqlRequirePrimaryKey pulumi.BoolPtrInput
	MysqlSlowQueryLog      pulumi.BoolPtrInput
	MysqlSqlModes          pulumi.StringArrayInput
	Password               pulumi.StringPtrInput
	Plan                   pulumi.StringPtrInput
	PlanDisk               pulumi.IntPtrInput
	PlanRam                pulumi.IntPtrInput
	PlanReplicas           pulumi.IntPtrInput
	PlanVcpus              pulumi.IntPtrInput
	Port                   pulumi.StringPtrInput
	ReadReplicas           DatabaseReadReplicaArrayInput
	RedisEvictionPolicy    pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	Tag                    pulumi.StringPtrInput
	TrustedIps             pulumi.StringArrayInput
	User                   pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	ClusterTimeZone        *string               `pulumi:"clusterTimeZone"`
	DatabaseEngine         string                `pulumi:"databaseEngine"`
	DatabaseEngineVersion  string                `pulumi:"databaseEngineVersion"`
	Label                  string                `pulumi:"label"`
	MaintenanceDow         *string               `pulumi:"maintenanceDow"`
	MaintenanceTime        *string               `pulumi:"maintenanceTime"`
	MysqlLongQueryTime     *int                  `pulumi:"mysqlLongQueryTime"`
	MysqlRequirePrimaryKey *bool                 `pulumi:"mysqlRequirePrimaryKey"`
	MysqlSlowQueryLog      *bool                 `pulumi:"mysqlSlowQueryLog"`
	MysqlSqlModes          []string              `pulumi:"mysqlSqlModes"`
	Password               *string               `pulumi:"password"`
	Plan                   string                `pulumi:"plan"`
	PlanDisk               *int                  `pulumi:"planDisk"`
	ReadReplicas           []DatabaseReadReplica `pulumi:"readReplicas"`
	RedisEvictionPolicy    *string               `pulumi:"redisEvictionPolicy"`
	Region                 string                `pulumi:"region"`
	Tag                    *string               `pulumi:"tag"`
	TrustedIps             []string              `pulumi:"trustedIps"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	ClusterTimeZone        pulumi.StringPtrInput
	DatabaseEngine         pulumi.StringInput
	DatabaseEngineVersion  pulumi.StringInput
	Label                  pulumi.StringInput
	MaintenanceDow         pulumi.StringPtrInput
	MaintenanceTime        pulumi.StringPtrInput
	MysqlLongQueryTime     pulumi.IntPtrInput
	MysqlRequirePrimaryKey pulumi.BoolPtrInput
	MysqlSlowQueryLog      pulumi.BoolPtrInput
	MysqlSqlModes          pulumi.StringArrayInput
	Password               pulumi.StringPtrInput
	Plan                   pulumi.StringInput
	PlanDisk               pulumi.IntPtrInput
	ReadReplicas           DatabaseReadReplicaArrayInput
	RedisEvictionPolicy    pulumi.StringPtrInput
	Region                 pulumi.StringInput
	Tag                    pulumi.StringPtrInput
	TrustedIps             pulumi.StringArrayInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ClusterTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.ClusterTimeZone }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) DatabaseEngine() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseEngine }).(pulumi.StringOutput)
}

func (o DatabaseOutput) DatabaseEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseEngineVersion }).(pulumi.StringOutput)
}

func (o DatabaseOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Dbname }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

func (o DatabaseOutput) LatestBackup() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.LatestBackup }).(pulumi.StringOutput)
}

func (o DatabaseOutput) MaintenanceDow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.MaintenanceDow }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) MaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.MaintenanceTime }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) MysqlLongQueryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.IntPtrOutput { return v.MysqlLongQueryTime }).(pulumi.IntPtrOutput)
}

func (o DatabaseOutput) MysqlRequirePrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.MysqlRequirePrimaryKey }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOutput) MysqlSlowQueryLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.MysqlSlowQueryLog }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOutput) MysqlSqlModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Database) pulumi.StringArrayOutput { return v.MysqlSqlModes }).(pulumi.StringArrayOutput)
}

func (o DatabaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

func (o DatabaseOutput) PlanDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanDisk }).(pulumi.IntOutput)
}

func (o DatabaseOutput) PlanRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanRam }).(pulumi.IntOutput)
}

func (o DatabaseOutput) PlanReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanReplicas }).(pulumi.IntOutput)
}

func (o DatabaseOutput) PlanVcpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.PlanVcpus }).(pulumi.IntOutput)
}

func (o DatabaseOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

func (o DatabaseOutput) ReadReplicas() DatabaseReadReplicaArrayOutput {
	return o.ApplyT(func(v *Database) DatabaseReadReplicaArrayOutput { return v.ReadReplicas }).(DatabaseReadReplicaArrayOutput)
}

func (o DatabaseOutput) RedisEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.RedisEvictionPolicy }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Tag }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) TrustedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Database) pulumi.StringArrayOutput { return v.TrustedIps }).(pulumi.StringArrayOutput)
}

func (o DatabaseOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
