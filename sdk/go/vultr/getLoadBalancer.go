// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr load balancer.
//
// ## Example Usage
//
// Get the information for a load balancer by `label`:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.LookupLoadBalancer(ctx, &vultr.LookupLoadBalancerArgs{
//				Filters: []vultr.GetLoadBalancerFilter{
//					{
//						Name: "label",
//						Values: []string{
//							"my-lb-label",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("vultr:index/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// Query parameters for finding load balancers.
	Filters []GetLoadBalancerFilter `pulumi:"filters"`
	// Boolean value that indicates if Proxy Protocol is enabled.
	ProxyProtocol *bool `pulumi:"proxyProtocol"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	// Array of instances that are currently attached to the load balancer.
	AttachedInstances []string `pulumi:"attachedInstances"`
	// The balancing algorithm for your load balancer.
	BalancingAlgorithm string `pulumi:"balancingAlgorithm"`
	// Name for your given sticky session.
	CookieName    string                   `pulumi:"cookieName"`
	DateCreated   string                   `pulumi:"dateCreated"`
	Filters       []GetLoadBalancerFilter  `pulumi:"filters"`
	FirewallRules []map[string]interface{} `pulumi:"firewallRules"`
	// Defines the forwarding rules for a load balancer. The configuration of a `forwardingRules` is listened below.
	ForwardingRules []map[string]interface{} `pulumi:"forwardingRules"`
	// Boolean value that indicates if SSL is enabled.
	HasSsl bool `pulumi:"hasSsl"`
	// Defines the way load balancers should check for health. The configuration of a `healthCheck` is listed below.
	HealthCheck map[string]interface{} `pulumi:"healthCheck"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IPv4 address for your load balancer.
	Ipv4 string `pulumi:"ipv4"`
	// IPv6 address for your load balancer.
	Ipv6 string `pulumi:"ipv6"`
	// The load balancers label.
	Label string `pulumi:"label"`
	// (Deprecated: use `vpc` instead) Defines the private network the load balancer is attached to.
	PrivateNetwork string `pulumi:"privateNetwork"`
	// Boolean value that indicates if Proxy Protocol is enabled.
	ProxyProtocol *bool `pulumi:"proxyProtocol"`
	// The region your load balancer is deployed in.
	Region string                 `pulumi:"region"`
	Ssl    map[string]interface{} `pulumi:"ssl"`
	// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
	SslRedirect bool `pulumi:"sslRedirect"`
	// Current status for the load balancer
	Status string `pulumi:"status"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerResult, error) {
			args := v.(LookupLoadBalancerArgs)
			r, err := LookupLoadBalancer(ctx, &args, opts...)
			var s LookupLoadBalancerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// Query parameters for finding load balancers.
	Filters GetLoadBalancerFilterArrayInput `pulumi:"filters"`
	// Boolean value that indicates if Proxy Protocol is enabled.
	ProxyProtocol pulumi.BoolPtrInput `pulumi:"proxyProtocol"`
}

func (LookupLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutput() LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutputWithContext(ctx context.Context) LookupLoadBalancerResultOutput {
	return o
}

// Array of instances that are currently attached to the load balancer.
func (o LookupLoadBalancerResultOutput) AttachedInstances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.AttachedInstances }).(pulumi.StringArrayOutput)
}

// The balancing algorithm for your load balancer.
func (o LookupLoadBalancerResultOutput) BalancingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.BalancingAlgorithm }).(pulumi.StringOutput)
}

// Name for your given sticky session.
func (o LookupLoadBalancerResultOutput) CookieName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.CookieName }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) Filters() GetLoadBalancerFilterArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerFilter { return v.Filters }).(GetLoadBalancerFilterArrayOutput)
}

func (o LookupLoadBalancerResultOutput) FirewallRules() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []map[string]interface{} { return v.FirewallRules }).(pulumi.MapArrayOutput)
}

// Defines the forwarding rules for a load balancer. The configuration of a `forwardingRules` is listened below.
func (o LookupLoadBalancerResultOutput) ForwardingRules() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []map[string]interface{} { return v.ForwardingRules }).(pulumi.MapArrayOutput)
}

// Boolean value that indicates if SSL is enabled.
func (o LookupLoadBalancerResultOutput) HasSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.HasSsl }).(pulumi.BoolOutput)
}

// Defines the way load balancers should check for health. The configuration of a `healthCheck` is listed below.
func (o LookupLoadBalancerResultOutput) HealthCheck() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string]interface{} { return v.HealthCheck }).(pulumi.MapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// IPv4 address for your load balancer.
func (o LookupLoadBalancerResultOutput) Ipv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Ipv4 }).(pulumi.StringOutput)
}

// IPv6 address for your load balancer.
func (o LookupLoadBalancerResultOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Ipv6 }).(pulumi.StringOutput)
}

// The load balancers label.
func (o LookupLoadBalancerResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Label }).(pulumi.StringOutput)
}

// (Deprecated: use `vpc` instead) Defines the private network the load balancer is attached to.
func (o LookupLoadBalancerResultOutput) PrivateNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.PrivateNetwork }).(pulumi.StringOutput)
}

// Boolean value that indicates if Proxy Protocol is enabled.
func (o LookupLoadBalancerResultOutput) ProxyProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) *bool { return v.ProxyProtocol }).(pulumi.BoolPtrOutput)
}

// The region your load balancer is deployed in.
func (o LookupLoadBalancerResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) Ssl() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string]interface{} { return v.Ssl }).(pulumi.MapOutput)
}

// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
func (o LookupLoadBalancerResultOutput) SslRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.SslRedirect }).(pulumi.BoolOutput)
}

// Current status for the load balancer
func (o LookupLoadBalancerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerResultOutput{})
}
