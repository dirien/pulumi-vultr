// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceBackupsSchedule struct {
	// Day of month to run. Use values between 1 and 28.
	Dom *int `pulumi:"dom"`
	// Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
	Dow *int `pulumi:"dow"`
	// Hour of day to run in UTC.
	Hour *int `pulumi:"hour"`
	// Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `dailyAltEven`, or `dailyAltOdd`.
	Type string `pulumi:"type"`
}

// InstanceBackupsScheduleInput is an input type that accepts InstanceBackupsScheduleArgs and InstanceBackupsScheduleOutput values.
// You can construct a concrete instance of `InstanceBackupsScheduleInput` via:
//
//	InstanceBackupsScheduleArgs{...}
type InstanceBackupsScheduleInput interface {
	pulumi.Input

	ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput
	ToInstanceBackupsScheduleOutputWithContext(context.Context) InstanceBackupsScheduleOutput
}

type InstanceBackupsScheduleArgs struct {
	// Day of month to run. Use values between 1 and 28.
	Dom pulumi.IntPtrInput `pulumi:"dom"`
	// Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
	Dow pulumi.IntPtrInput `pulumi:"dow"`
	// Hour of day to run in UTC.
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `dailyAltEven`, or `dailyAltOdd`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceBackupsScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupsSchedule)(nil)).Elem()
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput {
	return i.ToInstanceBackupsScheduleOutputWithContext(context.Background())
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsScheduleOutputWithContext(ctx context.Context) InstanceBackupsScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsScheduleOutput)
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return i.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsScheduleOutput).ToInstanceBackupsSchedulePtrOutputWithContext(ctx)
}

// InstanceBackupsSchedulePtrInput is an input type that accepts InstanceBackupsScheduleArgs, InstanceBackupsSchedulePtr and InstanceBackupsSchedulePtrOutput values.
// You can construct a concrete instance of `InstanceBackupsSchedulePtrInput` via:
//
//	        InstanceBackupsScheduleArgs{...}
//
//	or:
//
//	        nil
type InstanceBackupsSchedulePtrInput interface {
	pulumi.Input

	ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput
	ToInstanceBackupsSchedulePtrOutputWithContext(context.Context) InstanceBackupsSchedulePtrOutput
}

type instanceBackupsSchedulePtrType InstanceBackupsScheduleArgs

func InstanceBackupsSchedulePtr(v *InstanceBackupsScheduleArgs) InstanceBackupsSchedulePtrInput {
	return (*instanceBackupsSchedulePtrType)(v)
}

func (*instanceBackupsSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupsSchedule)(nil)).Elem()
}

func (i *instanceBackupsSchedulePtrType) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return i.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (i *instanceBackupsSchedulePtrType) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsSchedulePtrOutput)
}

type InstanceBackupsScheduleOutput struct{ *pulumi.OutputState }

func (InstanceBackupsScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupsSchedule)(nil)).Elem()
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput {
	return o
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsScheduleOutputWithContext(ctx context.Context) InstanceBackupsScheduleOutput {
	return o
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return o.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceBackupsSchedule) *InstanceBackupsSchedule {
		return &v
	}).(InstanceBackupsSchedulePtrOutput)
}

// Day of month to run. Use values between 1 and 28.
func (o InstanceBackupsScheduleOutput) Dom() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *int { return v.Dom }).(pulumi.IntPtrOutput)
}

// Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
func (o InstanceBackupsScheduleOutput) Dow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *int { return v.Dow }).(pulumi.IntPtrOutput)
}

// Hour of day to run in UTC.
func (o InstanceBackupsScheduleOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `dailyAltEven`, or `dailyAltOdd`.
func (o InstanceBackupsScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceBackupsSchedulePtrOutput struct{ *pulumi.OutputState }

func (InstanceBackupsSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupsSchedule)(nil)).Elem()
}

func (o InstanceBackupsSchedulePtrOutput) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return o
}

func (o InstanceBackupsSchedulePtrOutput) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return o
}

func (o InstanceBackupsSchedulePtrOutput) Elem() InstanceBackupsScheduleOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) InstanceBackupsSchedule {
		if v != nil {
			return *v
		}
		var ret InstanceBackupsSchedule
		return ret
	}).(InstanceBackupsScheduleOutput)
}

// Day of month to run. Use values between 1 and 28.
func (o InstanceBackupsSchedulePtrOutput) Dom() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) *int {
		if v == nil {
			return nil
		}
		return v.Dom
	}).(pulumi.IntPtrOutput)
}

// Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
func (o InstanceBackupsSchedulePtrOutput) Dow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) *int {
		if v == nil {
			return nil
		}
		return v.Dow
	}).(pulumi.IntPtrOutput)
}

// Hour of day to run in UTC.
func (o InstanceBackupsSchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `dailyAltEven`, or `dailyAltOdd`.
func (o InstanceBackupsSchedulePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KubernetesNodePoolsType struct {
	// Enable the auto scaler for the default node pool.
	AutoScaler *bool `pulumi:"autoScaler"`
	// Date node was created.
	DateCreated *string `pulumi:"dateCreated"`
	// Date of node pool updates.
	DateUpdated *string `pulumi:"dateUpdated"`
	// ID of node.
	Id *string `pulumi:"id"`
	// The label to be used as a prefix for nodes in this node pool.
	Label string `pulumi:"label"`
	// The maximum number of nodes to use with the auto scaler.
	MaxNodes *int `pulumi:"maxNodes"`
	// The minimum number of nodes to use with the auto scaler.
	MinNodes *int `pulumi:"minNodes"`
	// The number of nodes in this node pool.
	NodeQuantity int `pulumi:"nodeQuantity"`
	// Array that contains information about nodes within this node pool.
	Nodes []KubernetesNodePoolsNode `pulumi:"nodes"`
	// The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
	Plan string `pulumi:"plan"`
	// Status of node.
	Status *string `pulumi:"status"`
	// Tag for node pool.
	Tag *string `pulumi:"tag"`
}

// KubernetesNodePoolsTypeInput is an input type that accepts KubernetesNodePoolsTypeArgs and KubernetesNodePoolsTypeOutput values.
// You can construct a concrete instance of `KubernetesNodePoolsTypeInput` via:
//
//	KubernetesNodePoolsTypeArgs{...}
type KubernetesNodePoolsTypeInput interface {
	pulumi.Input

	ToKubernetesNodePoolsTypeOutput() KubernetesNodePoolsTypeOutput
	ToKubernetesNodePoolsTypeOutputWithContext(context.Context) KubernetesNodePoolsTypeOutput
}

type KubernetesNodePoolsTypeArgs struct {
	// Enable the auto scaler for the default node pool.
	AutoScaler pulumi.BoolPtrInput `pulumi:"autoScaler"`
	// Date node was created.
	DateCreated pulumi.StringPtrInput `pulumi:"dateCreated"`
	// Date of node pool updates.
	DateUpdated pulumi.StringPtrInput `pulumi:"dateUpdated"`
	// ID of node.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The label to be used as a prefix for nodes in this node pool.
	Label pulumi.StringInput `pulumi:"label"`
	// The maximum number of nodes to use with the auto scaler.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// The minimum number of nodes to use with the auto scaler.
	MinNodes pulumi.IntPtrInput `pulumi:"minNodes"`
	// The number of nodes in this node pool.
	NodeQuantity pulumi.IntInput `pulumi:"nodeQuantity"`
	// Array that contains information about nodes within this node pool.
	Nodes KubernetesNodePoolsNodeArrayInput `pulumi:"nodes"`
	// The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Status of node.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tag for node pool.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (KubernetesNodePoolsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolsType)(nil)).Elem()
}

func (i KubernetesNodePoolsTypeArgs) ToKubernetesNodePoolsTypeOutput() KubernetesNodePoolsTypeOutput {
	return i.ToKubernetesNodePoolsTypeOutputWithContext(context.Background())
}

func (i KubernetesNodePoolsTypeArgs) ToKubernetesNodePoolsTypeOutputWithContext(ctx context.Context) KubernetesNodePoolsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolsTypeOutput)
}

func (i KubernetesNodePoolsTypeArgs) ToKubernetesNodePoolsTypePtrOutput() KubernetesNodePoolsTypePtrOutput {
	return i.ToKubernetesNodePoolsTypePtrOutputWithContext(context.Background())
}

func (i KubernetesNodePoolsTypeArgs) ToKubernetesNodePoolsTypePtrOutputWithContext(ctx context.Context) KubernetesNodePoolsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolsTypeOutput).ToKubernetesNodePoolsTypePtrOutputWithContext(ctx)
}

// KubernetesNodePoolsTypePtrInput is an input type that accepts KubernetesNodePoolsTypeArgs, KubernetesNodePoolsTypePtr and KubernetesNodePoolsTypePtrOutput values.
// You can construct a concrete instance of `KubernetesNodePoolsTypePtrInput` via:
//
//	        KubernetesNodePoolsTypeArgs{...}
//
//	or:
//
//	        nil
type KubernetesNodePoolsTypePtrInput interface {
	pulumi.Input

	ToKubernetesNodePoolsTypePtrOutput() KubernetesNodePoolsTypePtrOutput
	ToKubernetesNodePoolsTypePtrOutputWithContext(context.Context) KubernetesNodePoolsTypePtrOutput
}

type kubernetesNodePoolsTypePtrType KubernetesNodePoolsTypeArgs

func KubernetesNodePoolsTypePtr(v *KubernetesNodePoolsTypeArgs) KubernetesNodePoolsTypePtrInput {
	return (*kubernetesNodePoolsTypePtrType)(v)
}

func (*kubernetesNodePoolsTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePoolsType)(nil)).Elem()
}

func (i *kubernetesNodePoolsTypePtrType) ToKubernetesNodePoolsTypePtrOutput() KubernetesNodePoolsTypePtrOutput {
	return i.ToKubernetesNodePoolsTypePtrOutputWithContext(context.Background())
}

func (i *kubernetesNodePoolsTypePtrType) ToKubernetesNodePoolsTypePtrOutputWithContext(ctx context.Context) KubernetesNodePoolsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolsTypePtrOutput)
}

type KubernetesNodePoolsTypeOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolsType)(nil)).Elem()
}

func (o KubernetesNodePoolsTypeOutput) ToKubernetesNodePoolsTypeOutput() KubernetesNodePoolsTypeOutput {
	return o
}

func (o KubernetesNodePoolsTypeOutput) ToKubernetesNodePoolsTypeOutputWithContext(ctx context.Context) KubernetesNodePoolsTypeOutput {
	return o
}

func (o KubernetesNodePoolsTypeOutput) ToKubernetesNodePoolsTypePtrOutput() KubernetesNodePoolsTypePtrOutput {
	return o.ToKubernetesNodePoolsTypePtrOutputWithContext(context.Background())
}

func (o KubernetesNodePoolsTypeOutput) ToKubernetesNodePoolsTypePtrOutputWithContext(ctx context.Context) KubernetesNodePoolsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesNodePoolsType) *KubernetesNodePoolsType {
		return &v
	}).(KubernetesNodePoolsTypePtrOutput)
}

// Enable the auto scaler for the default node pool.
func (o KubernetesNodePoolsTypeOutput) AutoScaler() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *bool { return v.AutoScaler }).(pulumi.BoolPtrOutput)
}

// Date node was created.
func (o KubernetesNodePoolsTypeOutput) DateCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *string { return v.DateCreated }).(pulumi.StringPtrOutput)
}

// Date of node pool updates.
func (o KubernetesNodePoolsTypeOutput) DateUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *string { return v.DateUpdated }).(pulumi.StringPtrOutput)
}

// ID of node.
func (o KubernetesNodePoolsTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The label to be used as a prefix for nodes in this node pool.
func (o KubernetesNodePoolsTypeOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) string { return v.Label }).(pulumi.StringOutput)
}

// The maximum number of nodes to use with the auto scaler.
func (o KubernetesNodePoolsTypeOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes to use with the auto scaler.
func (o KubernetesNodePoolsTypeOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *int { return v.MinNodes }).(pulumi.IntPtrOutput)
}

// The number of nodes in this node pool.
func (o KubernetesNodePoolsTypeOutput) NodeQuantity() pulumi.IntOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) int { return v.NodeQuantity }).(pulumi.IntOutput)
}

// Array that contains information about nodes within this node pool.
func (o KubernetesNodePoolsTypeOutput) Nodes() KubernetesNodePoolsNodeArrayOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) []KubernetesNodePoolsNode { return v.Nodes }).(KubernetesNodePoolsNodeArrayOutput)
}

// The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
func (o KubernetesNodePoolsTypeOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) string { return v.Plan }).(pulumi.StringOutput)
}

// Status of node.
func (o KubernetesNodePoolsTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tag for node pool.
func (o KubernetesNodePoolsTypeOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsType) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KubernetesNodePoolsTypePtrOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePoolsType)(nil)).Elem()
}

func (o KubernetesNodePoolsTypePtrOutput) ToKubernetesNodePoolsTypePtrOutput() KubernetesNodePoolsTypePtrOutput {
	return o
}

func (o KubernetesNodePoolsTypePtrOutput) ToKubernetesNodePoolsTypePtrOutputWithContext(ctx context.Context) KubernetesNodePoolsTypePtrOutput {
	return o
}

func (o KubernetesNodePoolsTypePtrOutput) Elem() KubernetesNodePoolsTypeOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) KubernetesNodePoolsType {
		if v != nil {
			return *v
		}
		var ret KubernetesNodePoolsType
		return ret
	}).(KubernetesNodePoolsTypeOutput)
}

// Enable the auto scaler for the default node pool.
func (o KubernetesNodePoolsTypePtrOutput) AutoScaler() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *bool {
		if v == nil {
			return nil
		}
		return v.AutoScaler
	}).(pulumi.BoolPtrOutput)
}

// Date node was created.
func (o KubernetesNodePoolsTypePtrOutput) DateCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return v.DateCreated
	}).(pulumi.StringPtrOutput)
}

// Date of node pool updates.
func (o KubernetesNodePoolsTypePtrOutput) DateUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return v.DateUpdated
	}).(pulumi.StringPtrOutput)
}

// ID of node.
func (o KubernetesNodePoolsTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The label to be used as a prefix for nodes in this node pool.
func (o KubernetesNodePoolsTypePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return &v.Label
	}).(pulumi.StringPtrOutput)
}

// The maximum number of nodes to use with the auto scaler.
func (o KubernetesNodePoolsTypePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes to use with the auto scaler.
func (o KubernetesNodePoolsTypePtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *int {
		if v == nil {
			return nil
		}
		return v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// The number of nodes in this node pool.
func (o KubernetesNodePoolsTypePtrOutput) NodeQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *int {
		if v == nil {
			return nil
		}
		return &v.NodeQuantity
	}).(pulumi.IntPtrOutput)
}

// Array that contains information about nodes within this node pool.
func (o KubernetesNodePoolsTypePtrOutput) Nodes() KubernetesNodePoolsNodeArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) []KubernetesNodePoolsNode {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(KubernetesNodePoolsNodeArrayOutput)
}

// The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
func (o KubernetesNodePoolsTypePtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

// Status of node.
func (o KubernetesNodePoolsTypePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Tag for node pool.
func (o KubernetesNodePoolsTypePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePoolsType) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type KubernetesNodePoolsNode struct {
	// Date node was created.
	DateCreated *string `pulumi:"dateCreated"`
	// ID of node.
	Id *string `pulumi:"id"`
	// The label to be used as a prefix for nodes in this node pool.
	Label *string `pulumi:"label"`
	// Status of node.
	Status *string `pulumi:"status"`
}

// KubernetesNodePoolsNodeInput is an input type that accepts KubernetesNodePoolsNodeArgs and KubernetesNodePoolsNodeOutput values.
// You can construct a concrete instance of `KubernetesNodePoolsNodeInput` via:
//
//	KubernetesNodePoolsNodeArgs{...}
type KubernetesNodePoolsNodeInput interface {
	pulumi.Input

	ToKubernetesNodePoolsNodeOutput() KubernetesNodePoolsNodeOutput
	ToKubernetesNodePoolsNodeOutputWithContext(context.Context) KubernetesNodePoolsNodeOutput
}

type KubernetesNodePoolsNodeArgs struct {
	// Date node was created.
	DateCreated pulumi.StringPtrInput `pulumi:"dateCreated"`
	// ID of node.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The label to be used as a prefix for nodes in this node pool.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Status of node.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (KubernetesNodePoolsNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolsNode)(nil)).Elem()
}

func (i KubernetesNodePoolsNodeArgs) ToKubernetesNodePoolsNodeOutput() KubernetesNodePoolsNodeOutput {
	return i.ToKubernetesNodePoolsNodeOutputWithContext(context.Background())
}

func (i KubernetesNodePoolsNodeArgs) ToKubernetesNodePoolsNodeOutputWithContext(ctx context.Context) KubernetesNodePoolsNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolsNodeOutput)
}

// KubernetesNodePoolsNodeArrayInput is an input type that accepts KubernetesNodePoolsNodeArray and KubernetesNodePoolsNodeArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolsNodeArrayInput` via:
//
//	KubernetesNodePoolsNodeArray{ KubernetesNodePoolsNodeArgs{...} }
type KubernetesNodePoolsNodeArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolsNodeArrayOutput() KubernetesNodePoolsNodeArrayOutput
	ToKubernetesNodePoolsNodeArrayOutputWithContext(context.Context) KubernetesNodePoolsNodeArrayOutput
}

type KubernetesNodePoolsNodeArray []KubernetesNodePoolsNodeInput

func (KubernetesNodePoolsNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolsNode)(nil)).Elem()
}

func (i KubernetesNodePoolsNodeArray) ToKubernetesNodePoolsNodeArrayOutput() KubernetesNodePoolsNodeArrayOutput {
	return i.ToKubernetesNodePoolsNodeArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolsNodeArray) ToKubernetesNodePoolsNodeArrayOutputWithContext(ctx context.Context) KubernetesNodePoolsNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolsNodeArrayOutput)
}

type KubernetesNodePoolsNodeOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolsNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolsNode)(nil)).Elem()
}

func (o KubernetesNodePoolsNodeOutput) ToKubernetesNodePoolsNodeOutput() KubernetesNodePoolsNodeOutput {
	return o
}

func (o KubernetesNodePoolsNodeOutput) ToKubernetesNodePoolsNodeOutputWithContext(ctx context.Context) KubernetesNodePoolsNodeOutput {
	return o
}

// Date node was created.
func (o KubernetesNodePoolsNodeOutput) DateCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsNode) *string { return v.DateCreated }).(pulumi.StringPtrOutput)
}

// ID of node.
func (o KubernetesNodePoolsNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The label to be used as a prefix for nodes in this node pool.
func (o KubernetesNodePoolsNodeOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsNode) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Status of node.
func (o KubernetesNodePoolsNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolsNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type KubernetesNodePoolsNodeArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolsNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolsNode)(nil)).Elem()
}

func (o KubernetesNodePoolsNodeArrayOutput) ToKubernetesNodePoolsNodeArrayOutput() KubernetesNodePoolsNodeArrayOutput {
	return o
}

func (o KubernetesNodePoolsNodeArrayOutput) ToKubernetesNodePoolsNodeArrayOutputWithContext(ctx context.Context) KubernetesNodePoolsNodeArrayOutput {
	return o
}

func (o KubernetesNodePoolsNodeArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolsNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesNodePoolsNode {
		return vs[0].([]KubernetesNodePoolsNode)[vs[1].(int)]
	}).(KubernetesNodePoolsNodeOutput)
}

type LoadBalancerFirewallRule struct {
	// The load balancer ID.
	Id *string `pulumi:"id"`
	// The type of ip this rule is - may be either v4 or v6.
	IpType string `pulumi:"ipType"`
	// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
	Port int `pulumi:"port"`
	// IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
	Source string `pulumi:"source"`
}

// LoadBalancerFirewallRuleInput is an input type that accepts LoadBalancerFirewallRuleArgs and LoadBalancerFirewallRuleOutput values.
// You can construct a concrete instance of `LoadBalancerFirewallRuleInput` via:
//
//	LoadBalancerFirewallRuleArgs{...}
type LoadBalancerFirewallRuleInput interface {
	pulumi.Input

	ToLoadBalancerFirewallRuleOutput() LoadBalancerFirewallRuleOutput
	ToLoadBalancerFirewallRuleOutputWithContext(context.Context) LoadBalancerFirewallRuleOutput
}

type LoadBalancerFirewallRuleArgs struct {
	// The load balancer ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of ip this rule is - may be either v4 or v6.
	IpType pulumi.StringInput `pulumi:"ipType"`
	// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
	Port pulumi.IntInput `pulumi:"port"`
	// IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
	Source pulumi.StringInput `pulumi:"source"`
}

func (LoadBalancerFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFirewallRule)(nil)).Elem()
}

func (i LoadBalancerFirewallRuleArgs) ToLoadBalancerFirewallRuleOutput() LoadBalancerFirewallRuleOutput {
	return i.ToLoadBalancerFirewallRuleOutputWithContext(context.Background())
}

func (i LoadBalancerFirewallRuleArgs) ToLoadBalancerFirewallRuleOutputWithContext(ctx context.Context) LoadBalancerFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFirewallRuleOutput)
}

// LoadBalancerFirewallRuleArrayInput is an input type that accepts LoadBalancerFirewallRuleArray and LoadBalancerFirewallRuleArrayOutput values.
// You can construct a concrete instance of `LoadBalancerFirewallRuleArrayInput` via:
//
//	LoadBalancerFirewallRuleArray{ LoadBalancerFirewallRuleArgs{...} }
type LoadBalancerFirewallRuleArrayInput interface {
	pulumi.Input

	ToLoadBalancerFirewallRuleArrayOutput() LoadBalancerFirewallRuleArrayOutput
	ToLoadBalancerFirewallRuleArrayOutputWithContext(context.Context) LoadBalancerFirewallRuleArrayOutput
}

type LoadBalancerFirewallRuleArray []LoadBalancerFirewallRuleInput

func (LoadBalancerFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFirewallRule)(nil)).Elem()
}

func (i LoadBalancerFirewallRuleArray) ToLoadBalancerFirewallRuleArrayOutput() LoadBalancerFirewallRuleArrayOutput {
	return i.ToLoadBalancerFirewallRuleArrayOutputWithContext(context.Background())
}

func (i LoadBalancerFirewallRuleArray) ToLoadBalancerFirewallRuleArrayOutputWithContext(ctx context.Context) LoadBalancerFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFirewallRuleArrayOutput)
}

type LoadBalancerFirewallRuleOutput struct{ *pulumi.OutputState }

func (LoadBalancerFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFirewallRule)(nil)).Elem()
}

func (o LoadBalancerFirewallRuleOutput) ToLoadBalancerFirewallRuleOutput() LoadBalancerFirewallRuleOutput {
	return o
}

func (o LoadBalancerFirewallRuleOutput) ToLoadBalancerFirewallRuleOutputWithContext(ctx context.Context) LoadBalancerFirewallRuleOutput {
	return o
}

// The load balancer ID.
func (o LoadBalancerFirewallRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFirewallRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of ip this rule is - may be either v4 or v6.
func (o LoadBalancerFirewallRuleOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerFirewallRule) string { return v.IpType }).(pulumi.StringOutput)
}

// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
func (o LoadBalancerFirewallRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerFirewallRule) int { return v.Port }).(pulumi.IntOutput)
}

// IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
func (o LoadBalancerFirewallRuleOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerFirewallRule) string { return v.Source }).(pulumi.StringOutput)
}

type LoadBalancerFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFirewallRule)(nil)).Elem()
}

func (o LoadBalancerFirewallRuleArrayOutput) ToLoadBalancerFirewallRuleArrayOutput() LoadBalancerFirewallRuleArrayOutput {
	return o
}

func (o LoadBalancerFirewallRuleArrayOutput) ToLoadBalancerFirewallRuleArrayOutputWithContext(ctx context.Context) LoadBalancerFirewallRuleArrayOutput {
	return o
}

func (o LoadBalancerFirewallRuleArrayOutput) Index(i pulumi.IntInput) LoadBalancerFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerFirewallRule {
		return vs[0].([]LoadBalancerFirewallRule)[vs[1].(int)]
	}).(LoadBalancerFirewallRuleOutput)
}

type LoadBalancerForwardingRule struct {
	// Port on instance side.
	BackendPort int `pulumi:"backendPort"`
	// Protocol on instance side. Possible values: "http", "https", "tcp".
	BackendProtocol string `pulumi:"backendProtocol"`
	// Port on load balancer side.
	FrontendPort int `pulumi:"frontendPort"`
	// Protocol on load balancer side. Possible values: "http", "https", "tcp".
	FrontendProtocol string  `pulumi:"frontendProtocol"`
	RuleId           *string `pulumi:"ruleId"`
}

// LoadBalancerForwardingRuleInput is an input type that accepts LoadBalancerForwardingRuleArgs and LoadBalancerForwardingRuleOutput values.
// You can construct a concrete instance of `LoadBalancerForwardingRuleInput` via:
//
//	LoadBalancerForwardingRuleArgs{...}
type LoadBalancerForwardingRuleInput interface {
	pulumi.Input

	ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput
	ToLoadBalancerForwardingRuleOutputWithContext(context.Context) LoadBalancerForwardingRuleOutput
}

type LoadBalancerForwardingRuleArgs struct {
	// Port on instance side.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Protocol on instance side. Possible values: "http", "https", "tcp".
	BackendProtocol pulumi.StringInput `pulumi:"backendProtocol"`
	// Port on load balancer side.
	FrontendPort pulumi.IntInput `pulumi:"frontendPort"`
	// Protocol on load balancer side. Possible values: "http", "https", "tcp".
	FrontendProtocol pulumi.StringInput    `pulumi:"frontendProtocol"`
	RuleId           pulumi.StringPtrInput `pulumi:"ruleId"`
}

func (LoadBalancerForwardingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerForwardingRule)(nil)).Elem()
}

func (i LoadBalancerForwardingRuleArgs) ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput {
	return i.ToLoadBalancerForwardingRuleOutputWithContext(context.Background())
}

func (i LoadBalancerForwardingRuleArgs) ToLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerForwardingRuleOutput)
}

// LoadBalancerForwardingRuleArrayInput is an input type that accepts LoadBalancerForwardingRuleArray and LoadBalancerForwardingRuleArrayOutput values.
// You can construct a concrete instance of `LoadBalancerForwardingRuleArrayInput` via:
//
//	LoadBalancerForwardingRuleArray{ LoadBalancerForwardingRuleArgs{...} }
type LoadBalancerForwardingRuleArrayInput interface {
	pulumi.Input

	ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput
	ToLoadBalancerForwardingRuleArrayOutputWithContext(context.Context) LoadBalancerForwardingRuleArrayOutput
}

type LoadBalancerForwardingRuleArray []LoadBalancerForwardingRuleInput

func (LoadBalancerForwardingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerForwardingRule)(nil)).Elem()
}

func (i LoadBalancerForwardingRuleArray) ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput {
	return i.ToLoadBalancerForwardingRuleArrayOutputWithContext(context.Background())
}

func (i LoadBalancerForwardingRuleArray) ToLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerForwardingRuleArrayOutput)
}

type LoadBalancerForwardingRuleOutput struct{ *pulumi.OutputState }

func (LoadBalancerForwardingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerForwardingRule)(nil)).Elem()
}

func (o LoadBalancerForwardingRuleOutput) ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput {
	return o
}

func (o LoadBalancerForwardingRuleOutput) ToLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleOutput {
	return o
}

// Port on instance side.
func (o LoadBalancerForwardingRuleOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) int { return v.BackendPort }).(pulumi.IntOutput)
}

// Protocol on instance side. Possible values: "http", "https", "tcp".
func (o LoadBalancerForwardingRuleOutput) BackendProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) string { return v.BackendProtocol }).(pulumi.StringOutput)
}

// Port on load balancer side.
func (o LoadBalancerForwardingRuleOutput) FrontendPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) int { return v.FrontendPort }).(pulumi.IntOutput)
}

// Protocol on load balancer side. Possible values: "http", "https", "tcp".
func (o LoadBalancerForwardingRuleOutput) FrontendProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) string { return v.FrontendProtocol }).(pulumi.StringOutput)
}

func (o LoadBalancerForwardingRuleOutput) RuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) *string { return v.RuleId }).(pulumi.StringPtrOutput)
}

type LoadBalancerForwardingRuleArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerForwardingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerForwardingRule)(nil)).Elem()
}

func (o LoadBalancerForwardingRuleArrayOutput) ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o LoadBalancerForwardingRuleArrayOutput) ToLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o LoadBalancerForwardingRuleArrayOutput) Index(i pulumi.IntInput) LoadBalancerForwardingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerForwardingRule {
		return vs[0].([]LoadBalancerForwardingRule)[vs[1].(int)]
	}).(LoadBalancerForwardingRuleOutput)
}

type LoadBalancerHealthCheck struct {
	// Time in seconds to perform health check. Default value is 15.
	CheckInterval int `pulumi:"checkInterval"`
	// Number of failed attempts encountered before failover. Default value is 5.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The path on the attached instances that the load balancer should check against. Default value is `/`
	Path *string `pulumi:"path"`
	// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
	Port int `pulumi:"port"`
	// The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
	Protocol string `pulumi:"protocol"`
	// Time in seconds to wait for a health check response. Default value is 5.
	ResponseTimeout int `pulumi:"responseTimeout"`
	// Number of failed attempts encountered before failover. Default value is 5.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// LoadBalancerHealthCheckInput is an input type that accepts LoadBalancerHealthCheckArgs and LoadBalancerHealthCheckOutput values.
// You can construct a concrete instance of `LoadBalancerHealthCheckInput` via:
//
//	LoadBalancerHealthCheckArgs{...}
type LoadBalancerHealthCheckInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput
	ToLoadBalancerHealthCheckOutputWithContext(context.Context) LoadBalancerHealthCheckOutput
}

type LoadBalancerHealthCheckArgs struct {
	// Time in seconds to perform health check. Default value is 15.
	CheckInterval pulumi.IntInput `pulumi:"checkInterval"`
	// Number of failed attempts encountered before failover. Default value is 5.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The path on the attached instances that the load balancer should check against. Default value is `/`
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Time in seconds to wait for a health check response. Default value is 5.
	ResponseTimeout pulumi.IntInput `pulumi:"responseTimeout"`
	// Number of failed attempts encountered before failover. Default value is 5.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return i.ToLoadBalancerHealthCheckOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput)
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i LoadBalancerHealthCheckArgs) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckOutput).ToLoadBalancerHealthCheckPtrOutputWithContext(ctx)
}

// LoadBalancerHealthCheckPtrInput is an input type that accepts LoadBalancerHealthCheckArgs, LoadBalancerHealthCheckPtr and LoadBalancerHealthCheckPtrOutput values.
// You can construct a concrete instance of `LoadBalancerHealthCheckPtrInput` via:
//
//	        LoadBalancerHealthCheckArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerHealthCheckPtrInput interface {
	pulumi.Input

	ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput
	ToLoadBalancerHealthCheckPtrOutputWithContext(context.Context) LoadBalancerHealthCheckPtrOutput
}

type loadBalancerHealthCheckPtrType LoadBalancerHealthCheckArgs

func LoadBalancerHealthCheckPtr(v *LoadBalancerHealthCheckArgs) LoadBalancerHealthCheckPtrInput {
	return (*loadBalancerHealthCheckPtrType)(v)
}

func (*loadBalancerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return i.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *loadBalancerHealthCheckPtrType) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthCheckPtrOutput)
}

type LoadBalancerHealthCheckOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutput() LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckOutputWithContext(ctx context.Context) LoadBalancerHealthCheckOutput {
	return o
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o.ToLoadBalancerHealthCheckPtrOutputWithContext(context.Background())
}

func (o LoadBalancerHealthCheckOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerHealthCheck) *LoadBalancerHealthCheck {
		return &v
	}).(LoadBalancerHealthCheckPtrOutput)
}

// Time in seconds to perform health check. Default value is 15.
func (o LoadBalancerHealthCheckOutput) CheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.CheckInterval }).(pulumi.IntOutput)
}

// Number of failed attempts encountered before failover. Default value is 5.
func (o LoadBalancerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The path on the attached instances that the load balancer should check against. Default value is `/`
func (o LoadBalancerHealthCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
func (o LoadBalancerHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
func (o LoadBalancerHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// Time in seconds to wait for a health check response. Default value is 5.
func (o LoadBalancerHealthCheckOutput) ResponseTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.ResponseTimeout }).(pulumi.IntOutput)
}

// Number of failed attempts encountered before failover. Default value is 5.
func (o LoadBalancerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type LoadBalancerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthCheck)(nil)).Elem()
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutput() LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) ToLoadBalancerHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerHealthCheckPtrOutput) Elem() LoadBalancerHealthCheckOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) LoadBalancerHealthCheck {
		if v != nil {
			return *v
		}
		var ret LoadBalancerHealthCheck
		return ret
	}).(LoadBalancerHealthCheckOutput)
}

// Time in seconds to perform health check. Default value is 15.
func (o LoadBalancerHealthCheckPtrOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.CheckInterval
	}).(pulumi.IntPtrOutput)
}

// Number of failed attempts encountered before failover. Default value is 5.
func (o LoadBalancerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The path on the attached instances that the load balancer should check against. Default value is `/`
func (o LoadBalancerHealthCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
func (o LoadBalancerHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
func (o LoadBalancerHealthCheckPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Time in seconds to wait for a health check response. Default value is 5.
func (o LoadBalancerHealthCheckPtrOutput) ResponseTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.ResponseTimeout
	}).(pulumi.IntPtrOutput)
}

// Number of failed attempts encountered before failover. Default value is 5.
func (o LoadBalancerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type LoadBalancerSsl struct {
	// The SSL Certificate.
	Certificate string `pulumi:"certificate"`
	// The SSL certificate chain.
	Chain *string `pulumi:"chain"`
	// The SSL certificates private key.
	PrivateKey string `pulumi:"privateKey"`
}

// LoadBalancerSslInput is an input type that accepts LoadBalancerSslArgs and LoadBalancerSslOutput values.
// You can construct a concrete instance of `LoadBalancerSslInput` via:
//
//	LoadBalancerSslArgs{...}
type LoadBalancerSslInput interface {
	pulumi.Input

	ToLoadBalancerSslOutput() LoadBalancerSslOutput
	ToLoadBalancerSslOutputWithContext(context.Context) LoadBalancerSslOutput
}

type LoadBalancerSslArgs struct {
	// The SSL Certificate.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The SSL certificate chain.
	Chain pulumi.StringPtrInput `pulumi:"chain"`
	// The SSL certificates private key.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (LoadBalancerSslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSsl)(nil)).Elem()
}

func (i LoadBalancerSslArgs) ToLoadBalancerSslOutput() LoadBalancerSslOutput {
	return i.ToLoadBalancerSslOutputWithContext(context.Background())
}

func (i LoadBalancerSslArgs) ToLoadBalancerSslOutputWithContext(ctx context.Context) LoadBalancerSslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslOutput)
}

func (i LoadBalancerSslArgs) ToLoadBalancerSslPtrOutput() LoadBalancerSslPtrOutput {
	return i.ToLoadBalancerSslPtrOutputWithContext(context.Background())
}

func (i LoadBalancerSslArgs) ToLoadBalancerSslPtrOutputWithContext(ctx context.Context) LoadBalancerSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslOutput).ToLoadBalancerSslPtrOutputWithContext(ctx)
}

// LoadBalancerSslPtrInput is an input type that accepts LoadBalancerSslArgs, LoadBalancerSslPtr and LoadBalancerSslPtrOutput values.
// You can construct a concrete instance of `LoadBalancerSslPtrInput` via:
//
//	        LoadBalancerSslArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerSslPtrInput interface {
	pulumi.Input

	ToLoadBalancerSslPtrOutput() LoadBalancerSslPtrOutput
	ToLoadBalancerSslPtrOutputWithContext(context.Context) LoadBalancerSslPtrOutput
}

type loadBalancerSslPtrType LoadBalancerSslArgs

func LoadBalancerSslPtr(v *LoadBalancerSslArgs) LoadBalancerSslPtrInput {
	return (*loadBalancerSslPtrType)(v)
}

func (*loadBalancerSslPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerSsl)(nil)).Elem()
}

func (i *loadBalancerSslPtrType) ToLoadBalancerSslPtrOutput() LoadBalancerSslPtrOutput {
	return i.ToLoadBalancerSslPtrOutputWithContext(context.Background())
}

func (i *loadBalancerSslPtrType) ToLoadBalancerSslPtrOutputWithContext(ctx context.Context) LoadBalancerSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslPtrOutput)
}

type LoadBalancerSslOutput struct{ *pulumi.OutputState }

func (LoadBalancerSslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSsl)(nil)).Elem()
}

func (o LoadBalancerSslOutput) ToLoadBalancerSslOutput() LoadBalancerSslOutput {
	return o
}

func (o LoadBalancerSslOutput) ToLoadBalancerSslOutputWithContext(ctx context.Context) LoadBalancerSslOutput {
	return o
}

func (o LoadBalancerSslOutput) ToLoadBalancerSslPtrOutput() LoadBalancerSslPtrOutput {
	return o.ToLoadBalancerSslPtrOutputWithContext(context.Background())
}

func (o LoadBalancerSslOutput) ToLoadBalancerSslPtrOutputWithContext(ctx context.Context) LoadBalancerSslPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerSsl) *LoadBalancerSsl {
		return &v
	}).(LoadBalancerSslPtrOutput)
}

// The SSL Certificate.
func (o LoadBalancerSslOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerSsl) string { return v.Certificate }).(pulumi.StringOutput)
}

// The SSL certificate chain.
func (o LoadBalancerSslOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerSsl) *string { return v.Chain }).(pulumi.StringPtrOutput)
}

// The SSL certificates private key.
func (o LoadBalancerSslOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerSsl) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type LoadBalancerSslPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerSslPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerSsl)(nil)).Elem()
}

func (o LoadBalancerSslPtrOutput) ToLoadBalancerSslPtrOutput() LoadBalancerSslPtrOutput {
	return o
}

func (o LoadBalancerSslPtrOutput) ToLoadBalancerSslPtrOutputWithContext(ctx context.Context) LoadBalancerSslPtrOutput {
	return o
}

func (o LoadBalancerSslPtrOutput) Elem() LoadBalancerSslOutput {
	return o.ApplyT(func(v *LoadBalancerSsl) LoadBalancerSsl {
		if v != nil {
			return *v
		}
		var ret LoadBalancerSsl
		return ret
	}).(LoadBalancerSslOutput)
}

// The SSL Certificate.
func (o LoadBalancerSslPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerSsl) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The SSL certificate chain.
func (o LoadBalancerSslPtrOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerSsl) *string {
		if v == nil {
			return nil
		}
		return v.Chain
	}).(pulumi.StringPtrOutput)
}

// The SSL certificates private key.
func (o LoadBalancerSslPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerSsl) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

type GetApplicationFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetApplicationFilterInput is an input type that accepts GetApplicationFilterArgs and GetApplicationFilterOutput values.
// You can construct a concrete instance of `GetApplicationFilterInput` via:
//
//	GetApplicationFilterArgs{...}
type GetApplicationFilterInput interface {
	pulumi.Input

	ToGetApplicationFilterOutput() GetApplicationFilterOutput
	ToGetApplicationFilterOutputWithContext(context.Context) GetApplicationFilterOutput
}

type GetApplicationFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetApplicationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationFilter)(nil)).Elem()
}

func (i GetApplicationFilterArgs) ToGetApplicationFilterOutput() GetApplicationFilterOutput {
	return i.ToGetApplicationFilterOutputWithContext(context.Background())
}

func (i GetApplicationFilterArgs) ToGetApplicationFilterOutputWithContext(ctx context.Context) GetApplicationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationFilterOutput)
}

// GetApplicationFilterArrayInput is an input type that accepts GetApplicationFilterArray and GetApplicationFilterArrayOutput values.
// You can construct a concrete instance of `GetApplicationFilterArrayInput` via:
//
//	GetApplicationFilterArray{ GetApplicationFilterArgs{...} }
type GetApplicationFilterArrayInput interface {
	pulumi.Input

	ToGetApplicationFilterArrayOutput() GetApplicationFilterArrayOutput
	ToGetApplicationFilterArrayOutputWithContext(context.Context) GetApplicationFilterArrayOutput
}

type GetApplicationFilterArray []GetApplicationFilterInput

func (GetApplicationFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationFilter)(nil)).Elem()
}

func (i GetApplicationFilterArray) ToGetApplicationFilterArrayOutput() GetApplicationFilterArrayOutput {
	return i.ToGetApplicationFilterArrayOutputWithContext(context.Background())
}

func (i GetApplicationFilterArray) ToGetApplicationFilterArrayOutputWithContext(ctx context.Context) GetApplicationFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationFilterArrayOutput)
}

type GetApplicationFilterOutput struct{ *pulumi.OutputState }

func (GetApplicationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationFilter)(nil)).Elem()
}

func (o GetApplicationFilterOutput) ToGetApplicationFilterOutput() GetApplicationFilterOutput {
	return o
}

func (o GetApplicationFilterOutput) ToGetApplicationFilterOutputWithContext(ctx context.Context) GetApplicationFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetApplicationFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetApplicationFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetApplicationFilterArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationFilter)(nil)).Elem()
}

func (o GetApplicationFilterArrayOutput) ToGetApplicationFilterArrayOutput() GetApplicationFilterArrayOutput {
	return o
}

func (o GetApplicationFilterArrayOutput) ToGetApplicationFilterArrayOutputWithContext(ctx context.Context) GetApplicationFilterArrayOutput {
	return o
}

func (o GetApplicationFilterArrayOutput) Index(i pulumi.IntInput) GetApplicationFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationFilter {
		return vs[0].([]GetApplicationFilter)[vs[1].(int)]
	}).(GetApplicationFilterOutput)
}

type GetFirewallGroupFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetFirewallGroupFilterInput is an input type that accepts GetFirewallGroupFilterArgs and GetFirewallGroupFilterOutput values.
// You can construct a concrete instance of `GetFirewallGroupFilterInput` via:
//
//	GetFirewallGroupFilterArgs{...}
type GetFirewallGroupFilterInput interface {
	pulumi.Input

	ToGetFirewallGroupFilterOutput() GetFirewallGroupFilterOutput
	ToGetFirewallGroupFilterOutputWithContext(context.Context) GetFirewallGroupFilterOutput
}

type GetFirewallGroupFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetFirewallGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallGroupFilter)(nil)).Elem()
}

func (i GetFirewallGroupFilterArgs) ToGetFirewallGroupFilterOutput() GetFirewallGroupFilterOutput {
	return i.ToGetFirewallGroupFilterOutputWithContext(context.Background())
}

func (i GetFirewallGroupFilterArgs) ToGetFirewallGroupFilterOutputWithContext(ctx context.Context) GetFirewallGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallGroupFilterOutput)
}

// GetFirewallGroupFilterArrayInput is an input type that accepts GetFirewallGroupFilterArray and GetFirewallGroupFilterArrayOutput values.
// You can construct a concrete instance of `GetFirewallGroupFilterArrayInput` via:
//
//	GetFirewallGroupFilterArray{ GetFirewallGroupFilterArgs{...} }
type GetFirewallGroupFilterArrayInput interface {
	pulumi.Input

	ToGetFirewallGroupFilterArrayOutput() GetFirewallGroupFilterArrayOutput
	ToGetFirewallGroupFilterArrayOutputWithContext(context.Context) GetFirewallGroupFilterArrayOutput
}

type GetFirewallGroupFilterArray []GetFirewallGroupFilterInput

func (GetFirewallGroupFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallGroupFilter)(nil)).Elem()
}

func (i GetFirewallGroupFilterArray) ToGetFirewallGroupFilterArrayOutput() GetFirewallGroupFilterArrayOutput {
	return i.ToGetFirewallGroupFilterArrayOutputWithContext(context.Background())
}

func (i GetFirewallGroupFilterArray) ToGetFirewallGroupFilterArrayOutputWithContext(ctx context.Context) GetFirewallGroupFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallGroupFilterArrayOutput)
}

type GetFirewallGroupFilterOutput struct{ *pulumi.OutputState }

func (GetFirewallGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallGroupFilter)(nil)).Elem()
}

func (o GetFirewallGroupFilterOutput) ToGetFirewallGroupFilterOutput() GetFirewallGroupFilterOutput {
	return o
}

func (o GetFirewallGroupFilterOutput) ToGetFirewallGroupFilterOutputWithContext(ctx context.Context) GetFirewallGroupFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetFirewallGroupFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallGroupFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetFirewallGroupFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFirewallGroupFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetFirewallGroupFilterArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallGroupFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallGroupFilter)(nil)).Elem()
}

func (o GetFirewallGroupFilterArrayOutput) ToGetFirewallGroupFilterArrayOutput() GetFirewallGroupFilterArrayOutput {
	return o
}

func (o GetFirewallGroupFilterArrayOutput) ToGetFirewallGroupFilterArrayOutputWithContext(ctx context.Context) GetFirewallGroupFilterArrayOutput {
	return o
}

func (o GetFirewallGroupFilterArrayOutput) Index(i pulumi.IntInput) GetFirewallGroupFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallGroupFilter {
		return vs[0].([]GetFirewallGroupFilter)[vs[1].(int)]
	}).(GetFirewallGroupFilterOutput)
}

type GetInstanceFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetInstanceFilterInput is an input type that accepts GetInstanceFilterArgs and GetInstanceFilterOutput values.
// You can construct a concrete instance of `GetInstanceFilterInput` via:
//
//	GetInstanceFilterArgs{...}
type GetInstanceFilterInput interface {
	pulumi.Input

	ToGetInstanceFilterOutput() GetInstanceFilterOutput
	ToGetInstanceFilterOutputWithContext(context.Context) GetInstanceFilterOutput
}

type GetInstanceFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFilter)(nil)).Elem()
}

func (i GetInstanceFilterArgs) ToGetInstanceFilterOutput() GetInstanceFilterOutput {
	return i.ToGetInstanceFilterOutputWithContext(context.Background())
}

func (i GetInstanceFilterArgs) ToGetInstanceFilterOutputWithContext(ctx context.Context) GetInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFilterOutput)
}

// GetInstanceFilterArrayInput is an input type that accepts GetInstanceFilterArray and GetInstanceFilterArrayOutput values.
// You can construct a concrete instance of `GetInstanceFilterArrayInput` via:
//
//	GetInstanceFilterArray{ GetInstanceFilterArgs{...} }
type GetInstanceFilterArrayInput interface {
	pulumi.Input

	ToGetInstanceFilterArrayOutput() GetInstanceFilterArrayOutput
	ToGetInstanceFilterArrayOutputWithContext(context.Context) GetInstanceFilterArrayOutput
}

type GetInstanceFilterArray []GetInstanceFilterInput

func (GetInstanceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFilter)(nil)).Elem()
}

func (i GetInstanceFilterArray) ToGetInstanceFilterArrayOutput() GetInstanceFilterArrayOutput {
	return i.ToGetInstanceFilterArrayOutputWithContext(context.Background())
}

func (i GetInstanceFilterArray) ToGetInstanceFilterArrayOutputWithContext(ctx context.Context) GetInstanceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceFilterArrayOutput)
}

type GetInstanceFilterOutput struct{ *pulumi.OutputState }

func (GetInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceFilter)(nil)).Elem()
}

func (o GetInstanceFilterOutput) ToGetInstanceFilterOutput() GetInstanceFilterOutput {
	return o
}

func (o GetInstanceFilterOutput) ToGetInstanceFilterOutputWithContext(ctx context.Context) GetInstanceFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetInstanceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetInstanceFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetInstanceFilterArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceFilter)(nil)).Elem()
}

func (o GetInstanceFilterArrayOutput) ToGetInstanceFilterArrayOutput() GetInstanceFilterArrayOutput {
	return o
}

func (o GetInstanceFilterArrayOutput) ToGetInstanceFilterArrayOutputWithContext(ctx context.Context) GetInstanceFilterArrayOutput {
	return o
}

func (o GetInstanceFilterArrayOutput) Index(i pulumi.IntInput) GetInstanceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceFilter {
		return vs[0].([]GetInstanceFilter)[vs[1].(int)]
	}).(GetInstanceFilterOutput)
}

type GetInstanceIpv4Filter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values to filter with.
	Values []string `pulumi:"values"`
}

// GetInstanceIpv4FilterInput is an input type that accepts GetInstanceIpv4FilterArgs and GetInstanceIpv4FilterOutput values.
// You can construct a concrete instance of `GetInstanceIpv4FilterInput` via:
//
//	GetInstanceIpv4FilterArgs{...}
type GetInstanceIpv4FilterInput interface {
	pulumi.Input

	ToGetInstanceIpv4FilterOutput() GetInstanceIpv4FilterOutput
	ToGetInstanceIpv4FilterOutputWithContext(context.Context) GetInstanceIpv4FilterOutput
}

type GetInstanceIpv4FilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values to filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetInstanceIpv4FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceIpv4Filter)(nil)).Elem()
}

func (i GetInstanceIpv4FilterArgs) ToGetInstanceIpv4FilterOutput() GetInstanceIpv4FilterOutput {
	return i.ToGetInstanceIpv4FilterOutputWithContext(context.Background())
}

func (i GetInstanceIpv4FilterArgs) ToGetInstanceIpv4FilterOutputWithContext(ctx context.Context) GetInstanceIpv4FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceIpv4FilterOutput)
}

// GetInstanceIpv4FilterArrayInput is an input type that accepts GetInstanceIpv4FilterArray and GetInstanceIpv4FilterArrayOutput values.
// You can construct a concrete instance of `GetInstanceIpv4FilterArrayInput` via:
//
//	GetInstanceIpv4FilterArray{ GetInstanceIpv4FilterArgs{...} }
type GetInstanceIpv4FilterArrayInput interface {
	pulumi.Input

	ToGetInstanceIpv4FilterArrayOutput() GetInstanceIpv4FilterArrayOutput
	ToGetInstanceIpv4FilterArrayOutputWithContext(context.Context) GetInstanceIpv4FilterArrayOutput
}

type GetInstanceIpv4FilterArray []GetInstanceIpv4FilterInput

func (GetInstanceIpv4FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceIpv4Filter)(nil)).Elem()
}

func (i GetInstanceIpv4FilterArray) ToGetInstanceIpv4FilterArrayOutput() GetInstanceIpv4FilterArrayOutput {
	return i.ToGetInstanceIpv4FilterArrayOutputWithContext(context.Background())
}

func (i GetInstanceIpv4FilterArray) ToGetInstanceIpv4FilterArrayOutputWithContext(ctx context.Context) GetInstanceIpv4FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceIpv4FilterArrayOutput)
}

type GetInstanceIpv4FilterOutput struct{ *pulumi.OutputState }

func (GetInstanceIpv4FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceIpv4Filter)(nil)).Elem()
}

func (o GetInstanceIpv4FilterOutput) ToGetInstanceIpv4FilterOutput() GetInstanceIpv4FilterOutput {
	return o
}

func (o GetInstanceIpv4FilterOutput) ToGetInstanceIpv4FilterOutputWithContext(ctx context.Context) GetInstanceIpv4FilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetInstanceIpv4FilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Filter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values to filter with.
func (o GetInstanceIpv4FilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceIpv4Filter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetInstanceIpv4FilterArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceIpv4FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceIpv4Filter)(nil)).Elem()
}

func (o GetInstanceIpv4FilterArrayOutput) ToGetInstanceIpv4FilterArrayOutput() GetInstanceIpv4FilterArrayOutput {
	return o
}

func (o GetInstanceIpv4FilterArrayOutput) ToGetInstanceIpv4FilterArrayOutputWithContext(ctx context.Context) GetInstanceIpv4FilterArrayOutput {
	return o
}

func (o GetInstanceIpv4FilterArrayOutput) Index(i pulumi.IntInput) GetInstanceIpv4FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceIpv4Filter {
		return vs[0].([]GetInstanceIpv4Filter)[vs[1].(int)]
	}).(GetInstanceIpv4FilterOutput)
}

type GetIsoPrivateFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetIsoPrivateFilterInput is an input type that accepts GetIsoPrivateFilterArgs and GetIsoPrivateFilterOutput values.
// You can construct a concrete instance of `GetIsoPrivateFilterInput` via:
//
//	GetIsoPrivateFilterArgs{...}
type GetIsoPrivateFilterInput interface {
	pulumi.Input

	ToGetIsoPrivateFilterOutput() GetIsoPrivateFilterOutput
	ToGetIsoPrivateFilterOutputWithContext(context.Context) GetIsoPrivateFilterOutput
}

type GetIsoPrivateFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetIsoPrivateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIsoPrivateFilter)(nil)).Elem()
}

func (i GetIsoPrivateFilterArgs) ToGetIsoPrivateFilterOutput() GetIsoPrivateFilterOutput {
	return i.ToGetIsoPrivateFilterOutputWithContext(context.Background())
}

func (i GetIsoPrivateFilterArgs) ToGetIsoPrivateFilterOutputWithContext(ctx context.Context) GetIsoPrivateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIsoPrivateFilterOutput)
}

// GetIsoPrivateFilterArrayInput is an input type that accepts GetIsoPrivateFilterArray and GetIsoPrivateFilterArrayOutput values.
// You can construct a concrete instance of `GetIsoPrivateFilterArrayInput` via:
//
//	GetIsoPrivateFilterArray{ GetIsoPrivateFilterArgs{...} }
type GetIsoPrivateFilterArrayInput interface {
	pulumi.Input

	ToGetIsoPrivateFilterArrayOutput() GetIsoPrivateFilterArrayOutput
	ToGetIsoPrivateFilterArrayOutputWithContext(context.Context) GetIsoPrivateFilterArrayOutput
}

type GetIsoPrivateFilterArray []GetIsoPrivateFilterInput

func (GetIsoPrivateFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIsoPrivateFilter)(nil)).Elem()
}

func (i GetIsoPrivateFilterArray) ToGetIsoPrivateFilterArrayOutput() GetIsoPrivateFilterArrayOutput {
	return i.ToGetIsoPrivateFilterArrayOutputWithContext(context.Background())
}

func (i GetIsoPrivateFilterArray) ToGetIsoPrivateFilterArrayOutputWithContext(ctx context.Context) GetIsoPrivateFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIsoPrivateFilterArrayOutput)
}

type GetIsoPrivateFilterOutput struct{ *pulumi.OutputState }

func (GetIsoPrivateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIsoPrivateFilter)(nil)).Elem()
}

func (o GetIsoPrivateFilterOutput) ToGetIsoPrivateFilterOutput() GetIsoPrivateFilterOutput {
	return o
}

func (o GetIsoPrivateFilterOutput) ToGetIsoPrivateFilterOutputWithContext(ctx context.Context) GetIsoPrivateFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetIsoPrivateFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIsoPrivateFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetIsoPrivateFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIsoPrivateFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetIsoPrivateFilterArrayOutput struct{ *pulumi.OutputState }

func (GetIsoPrivateFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIsoPrivateFilter)(nil)).Elem()
}

func (o GetIsoPrivateFilterArrayOutput) ToGetIsoPrivateFilterArrayOutput() GetIsoPrivateFilterArrayOutput {
	return o
}

func (o GetIsoPrivateFilterArrayOutput) ToGetIsoPrivateFilterArrayOutputWithContext(ctx context.Context) GetIsoPrivateFilterArrayOutput {
	return o
}

func (o GetIsoPrivateFilterArrayOutput) Index(i pulumi.IntInput) GetIsoPrivateFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIsoPrivateFilter {
		return vs[0].([]GetIsoPrivateFilter)[vs[1].(int)]
	}).(GetIsoPrivateFilterOutput)
}

type GetIsoPublicFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetIsoPublicFilterInput is an input type that accepts GetIsoPublicFilterArgs and GetIsoPublicFilterOutput values.
// You can construct a concrete instance of `GetIsoPublicFilterInput` via:
//
//	GetIsoPublicFilterArgs{...}
type GetIsoPublicFilterInput interface {
	pulumi.Input

	ToGetIsoPublicFilterOutput() GetIsoPublicFilterOutput
	ToGetIsoPublicFilterOutputWithContext(context.Context) GetIsoPublicFilterOutput
}

type GetIsoPublicFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetIsoPublicFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIsoPublicFilter)(nil)).Elem()
}

func (i GetIsoPublicFilterArgs) ToGetIsoPublicFilterOutput() GetIsoPublicFilterOutput {
	return i.ToGetIsoPublicFilterOutputWithContext(context.Background())
}

func (i GetIsoPublicFilterArgs) ToGetIsoPublicFilterOutputWithContext(ctx context.Context) GetIsoPublicFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIsoPublicFilterOutput)
}

// GetIsoPublicFilterArrayInput is an input type that accepts GetIsoPublicFilterArray and GetIsoPublicFilterArrayOutput values.
// You can construct a concrete instance of `GetIsoPublicFilterArrayInput` via:
//
//	GetIsoPublicFilterArray{ GetIsoPublicFilterArgs{...} }
type GetIsoPublicFilterArrayInput interface {
	pulumi.Input

	ToGetIsoPublicFilterArrayOutput() GetIsoPublicFilterArrayOutput
	ToGetIsoPublicFilterArrayOutputWithContext(context.Context) GetIsoPublicFilterArrayOutput
}

type GetIsoPublicFilterArray []GetIsoPublicFilterInput

func (GetIsoPublicFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIsoPublicFilter)(nil)).Elem()
}

func (i GetIsoPublicFilterArray) ToGetIsoPublicFilterArrayOutput() GetIsoPublicFilterArrayOutput {
	return i.ToGetIsoPublicFilterArrayOutputWithContext(context.Background())
}

func (i GetIsoPublicFilterArray) ToGetIsoPublicFilterArrayOutputWithContext(ctx context.Context) GetIsoPublicFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIsoPublicFilterArrayOutput)
}

type GetIsoPublicFilterOutput struct{ *pulumi.OutputState }

func (GetIsoPublicFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIsoPublicFilter)(nil)).Elem()
}

func (o GetIsoPublicFilterOutput) ToGetIsoPublicFilterOutput() GetIsoPublicFilterOutput {
	return o
}

func (o GetIsoPublicFilterOutput) ToGetIsoPublicFilterOutputWithContext(ctx context.Context) GetIsoPublicFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetIsoPublicFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIsoPublicFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetIsoPublicFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIsoPublicFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetIsoPublicFilterArrayOutput struct{ *pulumi.OutputState }

func (GetIsoPublicFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIsoPublicFilter)(nil)).Elem()
}

func (o GetIsoPublicFilterArrayOutput) ToGetIsoPublicFilterArrayOutput() GetIsoPublicFilterArrayOutput {
	return o
}

func (o GetIsoPublicFilterArrayOutput) ToGetIsoPublicFilterArrayOutputWithContext(ctx context.Context) GetIsoPublicFilterArrayOutput {
	return o
}

func (o GetIsoPublicFilterArrayOutput) Index(i pulumi.IntInput) GetIsoPublicFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIsoPublicFilter {
		return vs[0].([]GetIsoPublicFilter)[vs[1].(int)]
	}).(GetIsoPublicFilterOutput)
}

type GetKubernetesFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetKubernetesFilterInput is an input type that accepts GetKubernetesFilterArgs and GetKubernetesFilterOutput values.
// You can construct a concrete instance of `GetKubernetesFilterInput` via:
//
//	GetKubernetesFilterArgs{...}
type GetKubernetesFilterInput interface {
	pulumi.Input

	ToGetKubernetesFilterOutput() GetKubernetesFilterOutput
	ToGetKubernetesFilterOutputWithContext(context.Context) GetKubernetesFilterOutput
}

type GetKubernetesFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetKubernetesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesFilter)(nil)).Elem()
}

func (i GetKubernetesFilterArgs) ToGetKubernetesFilterOutput() GetKubernetesFilterOutput {
	return i.ToGetKubernetesFilterOutputWithContext(context.Background())
}

func (i GetKubernetesFilterArgs) ToGetKubernetesFilterOutputWithContext(ctx context.Context) GetKubernetesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesFilterOutput)
}

// GetKubernetesFilterArrayInput is an input type that accepts GetKubernetesFilterArray and GetKubernetesFilterArrayOutput values.
// You can construct a concrete instance of `GetKubernetesFilterArrayInput` via:
//
//	GetKubernetesFilterArray{ GetKubernetesFilterArgs{...} }
type GetKubernetesFilterArrayInput interface {
	pulumi.Input

	ToGetKubernetesFilterArrayOutput() GetKubernetesFilterArrayOutput
	ToGetKubernetesFilterArrayOutputWithContext(context.Context) GetKubernetesFilterArrayOutput
}

type GetKubernetesFilterArray []GetKubernetesFilterInput

func (GetKubernetesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesFilter)(nil)).Elem()
}

func (i GetKubernetesFilterArray) ToGetKubernetesFilterArrayOutput() GetKubernetesFilterArrayOutput {
	return i.ToGetKubernetesFilterArrayOutputWithContext(context.Background())
}

func (i GetKubernetesFilterArray) ToGetKubernetesFilterArrayOutputWithContext(ctx context.Context) GetKubernetesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesFilterArrayOutput)
}

type GetKubernetesFilterOutput struct{ *pulumi.OutputState }

func (GetKubernetesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesFilter)(nil)).Elem()
}

func (o GetKubernetesFilterOutput) ToGetKubernetesFilterOutput() GetKubernetesFilterOutput {
	return o
}

func (o GetKubernetesFilterOutput) ToGetKubernetesFilterOutputWithContext(ctx context.Context) GetKubernetesFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetKubernetesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetKubernetesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKubernetesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetKubernetesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesFilter)(nil)).Elem()
}

func (o GetKubernetesFilterArrayOutput) ToGetKubernetesFilterArrayOutput() GetKubernetesFilterArrayOutput {
	return o
}

func (o GetKubernetesFilterArrayOutput) ToGetKubernetesFilterArrayOutputWithContext(ctx context.Context) GetKubernetesFilterArrayOutput {
	return o
}

func (o GetKubernetesFilterArrayOutput) Index(i pulumi.IntInput) GetKubernetesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesFilter {
		return vs[0].([]GetKubernetesFilter)[vs[1].(int)]
	}).(GetKubernetesFilterOutput)
}

type GetKubernetesNodePool struct {
	// Boolean indicating if the auto scaler for the default node pool is active.
	AutoScaler *bool `pulumi:"autoScaler"`
	// Date node was created.
	DateCreated string `pulumi:"dateCreated"`
	// Date of node pool updates.
	DateUpdated string `pulumi:"dateUpdated"`
	// ID of node.
	Id string `pulumi:"id"`
	// Label of node.
	Label string `pulumi:"label"`
	// The maximum number of nodes used by the auto scaler.
	MaxNodes *int `pulumi:"maxNodes"`
	// The minimum number of nodes used by the auto scaler.
	MinNodes *int `pulumi:"minNodes"`
	// Number of nodes within node pool.
	NodeQuantity int `pulumi:"nodeQuantity"`
	// Array that contains information about nodes within this node pool.
	Nodes []GetKubernetesNodePoolNode `pulumi:"nodes"`
	// Node plan that nodes are using within this node pool.
	Plan string `pulumi:"plan"`
	// Status of node.
	Status string `pulumi:"status"`
	// Tag for node pool.
	Tag string `pulumi:"tag"`
}

// GetKubernetesNodePoolInput is an input type that accepts GetKubernetesNodePoolArgs and GetKubernetesNodePoolOutput values.
// You can construct a concrete instance of `GetKubernetesNodePoolInput` via:
//
//	GetKubernetesNodePoolArgs{...}
type GetKubernetesNodePoolInput interface {
	pulumi.Input

	ToGetKubernetesNodePoolOutput() GetKubernetesNodePoolOutput
	ToGetKubernetesNodePoolOutputWithContext(context.Context) GetKubernetesNodePoolOutput
}

type GetKubernetesNodePoolArgs struct {
	// Boolean indicating if the auto scaler for the default node pool is active.
	AutoScaler pulumi.BoolPtrInput `pulumi:"autoScaler"`
	// Date node was created.
	DateCreated pulumi.StringInput `pulumi:"dateCreated"`
	// Date of node pool updates.
	DateUpdated pulumi.StringInput `pulumi:"dateUpdated"`
	// ID of node.
	Id pulumi.StringInput `pulumi:"id"`
	// Label of node.
	Label pulumi.StringInput `pulumi:"label"`
	// The maximum number of nodes used by the auto scaler.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// The minimum number of nodes used by the auto scaler.
	MinNodes pulumi.IntPtrInput `pulumi:"minNodes"`
	// Number of nodes within node pool.
	NodeQuantity pulumi.IntInput `pulumi:"nodeQuantity"`
	// Array that contains information about nodes within this node pool.
	Nodes GetKubernetesNodePoolNodeArrayInput `pulumi:"nodes"`
	// Node plan that nodes are using within this node pool.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Status of node.
	Status pulumi.StringInput `pulumi:"status"`
	// Tag for node pool.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (GetKubernetesNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesNodePool)(nil)).Elem()
}

func (i GetKubernetesNodePoolArgs) ToGetKubernetesNodePoolOutput() GetKubernetesNodePoolOutput {
	return i.ToGetKubernetesNodePoolOutputWithContext(context.Background())
}

func (i GetKubernetesNodePoolArgs) ToGetKubernetesNodePoolOutputWithContext(ctx context.Context) GetKubernetesNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesNodePoolOutput)
}

// GetKubernetesNodePoolArrayInput is an input type that accepts GetKubernetesNodePoolArray and GetKubernetesNodePoolArrayOutput values.
// You can construct a concrete instance of `GetKubernetesNodePoolArrayInput` via:
//
//	GetKubernetesNodePoolArray{ GetKubernetesNodePoolArgs{...} }
type GetKubernetesNodePoolArrayInput interface {
	pulumi.Input

	ToGetKubernetesNodePoolArrayOutput() GetKubernetesNodePoolArrayOutput
	ToGetKubernetesNodePoolArrayOutputWithContext(context.Context) GetKubernetesNodePoolArrayOutput
}

type GetKubernetesNodePoolArray []GetKubernetesNodePoolInput

func (GetKubernetesNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesNodePool)(nil)).Elem()
}

func (i GetKubernetesNodePoolArray) ToGetKubernetesNodePoolArrayOutput() GetKubernetesNodePoolArrayOutput {
	return i.ToGetKubernetesNodePoolArrayOutputWithContext(context.Background())
}

func (i GetKubernetesNodePoolArray) ToGetKubernetesNodePoolArrayOutputWithContext(ctx context.Context) GetKubernetesNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesNodePoolArrayOutput)
}

type GetKubernetesNodePoolOutput struct{ *pulumi.OutputState }

func (GetKubernetesNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesNodePool)(nil)).Elem()
}

func (o GetKubernetesNodePoolOutput) ToGetKubernetesNodePoolOutput() GetKubernetesNodePoolOutput {
	return o
}

func (o GetKubernetesNodePoolOutput) ToGetKubernetesNodePoolOutputWithContext(ctx context.Context) GetKubernetesNodePoolOutput {
	return o
}

// Boolean indicating if the auto scaler for the default node pool is active.
func (o GetKubernetesNodePoolOutput) AutoScaler() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) *bool { return v.AutoScaler }).(pulumi.BoolPtrOutput)
}

// Date node was created.
func (o GetKubernetesNodePoolOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.DateCreated }).(pulumi.StringOutput)
}

// Date of node pool updates.
func (o GetKubernetesNodePoolOutput) DateUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.DateUpdated }).(pulumi.StringOutput)
}

// ID of node.
func (o GetKubernetesNodePoolOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.Id }).(pulumi.StringOutput)
}

// Label of node.
func (o GetKubernetesNodePoolOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.Label }).(pulumi.StringOutput)
}

// The maximum number of nodes used by the auto scaler.
func (o GetKubernetesNodePoolOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes used by the auto scaler.
func (o GetKubernetesNodePoolOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) *int { return v.MinNodes }).(pulumi.IntPtrOutput)
}

// Number of nodes within node pool.
func (o GetKubernetesNodePoolOutput) NodeQuantity() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) int { return v.NodeQuantity }).(pulumi.IntOutput)
}

// Array that contains information about nodes within this node pool.
func (o GetKubernetesNodePoolOutput) Nodes() GetKubernetesNodePoolNodeArrayOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) []GetKubernetesNodePoolNode { return v.Nodes }).(GetKubernetesNodePoolNodeArrayOutput)
}

// Node plan that nodes are using within this node pool.
func (o GetKubernetesNodePoolOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.Plan }).(pulumi.StringOutput)
}

// Status of node.
func (o GetKubernetesNodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.Status }).(pulumi.StringOutput)
}

// Tag for node pool.
func (o GetKubernetesNodePoolOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePool) string { return v.Tag }).(pulumi.StringOutput)
}

type GetKubernetesNodePoolArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesNodePool)(nil)).Elem()
}

func (o GetKubernetesNodePoolArrayOutput) ToGetKubernetesNodePoolArrayOutput() GetKubernetesNodePoolArrayOutput {
	return o
}

func (o GetKubernetesNodePoolArrayOutput) ToGetKubernetesNodePoolArrayOutputWithContext(ctx context.Context) GetKubernetesNodePoolArrayOutput {
	return o
}

func (o GetKubernetesNodePoolArrayOutput) Index(i pulumi.IntInput) GetKubernetesNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesNodePool {
		return vs[0].([]GetKubernetesNodePool)[vs[1].(int)]
	}).(GetKubernetesNodePoolOutput)
}

type GetKubernetesNodePoolNode struct {
	// Date node was created.
	DateCreated string `pulumi:"dateCreated"`
	// ID of node.
	Id string `pulumi:"id"`
	// Label of node.
	Label string `pulumi:"label"`
	// Status of node.
	Status string `pulumi:"status"`
}

// GetKubernetesNodePoolNodeInput is an input type that accepts GetKubernetesNodePoolNodeArgs and GetKubernetesNodePoolNodeOutput values.
// You can construct a concrete instance of `GetKubernetesNodePoolNodeInput` via:
//
//	GetKubernetesNodePoolNodeArgs{...}
type GetKubernetesNodePoolNodeInput interface {
	pulumi.Input

	ToGetKubernetesNodePoolNodeOutput() GetKubernetesNodePoolNodeOutput
	ToGetKubernetesNodePoolNodeOutputWithContext(context.Context) GetKubernetesNodePoolNodeOutput
}

type GetKubernetesNodePoolNodeArgs struct {
	// Date node was created.
	DateCreated pulumi.StringInput `pulumi:"dateCreated"`
	// ID of node.
	Id pulumi.StringInput `pulumi:"id"`
	// Label of node.
	Label pulumi.StringInput `pulumi:"label"`
	// Status of node.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetKubernetesNodePoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesNodePoolNode)(nil)).Elem()
}

func (i GetKubernetesNodePoolNodeArgs) ToGetKubernetesNodePoolNodeOutput() GetKubernetesNodePoolNodeOutput {
	return i.ToGetKubernetesNodePoolNodeOutputWithContext(context.Background())
}

func (i GetKubernetesNodePoolNodeArgs) ToGetKubernetesNodePoolNodeOutputWithContext(ctx context.Context) GetKubernetesNodePoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesNodePoolNodeOutput)
}

// GetKubernetesNodePoolNodeArrayInput is an input type that accepts GetKubernetesNodePoolNodeArray and GetKubernetesNodePoolNodeArrayOutput values.
// You can construct a concrete instance of `GetKubernetesNodePoolNodeArrayInput` via:
//
//	GetKubernetesNodePoolNodeArray{ GetKubernetesNodePoolNodeArgs{...} }
type GetKubernetesNodePoolNodeArrayInput interface {
	pulumi.Input

	ToGetKubernetesNodePoolNodeArrayOutput() GetKubernetesNodePoolNodeArrayOutput
	ToGetKubernetesNodePoolNodeArrayOutputWithContext(context.Context) GetKubernetesNodePoolNodeArrayOutput
}

type GetKubernetesNodePoolNodeArray []GetKubernetesNodePoolNodeInput

func (GetKubernetesNodePoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesNodePoolNode)(nil)).Elem()
}

func (i GetKubernetesNodePoolNodeArray) ToGetKubernetesNodePoolNodeArrayOutput() GetKubernetesNodePoolNodeArrayOutput {
	return i.ToGetKubernetesNodePoolNodeArrayOutputWithContext(context.Background())
}

func (i GetKubernetesNodePoolNodeArray) ToGetKubernetesNodePoolNodeArrayOutputWithContext(ctx context.Context) GetKubernetesNodePoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesNodePoolNodeArrayOutput)
}

type GetKubernetesNodePoolNodeOutput struct{ *pulumi.OutputState }

func (GetKubernetesNodePoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesNodePoolNode)(nil)).Elem()
}

func (o GetKubernetesNodePoolNodeOutput) ToGetKubernetesNodePoolNodeOutput() GetKubernetesNodePoolNodeOutput {
	return o
}

func (o GetKubernetesNodePoolNodeOutput) ToGetKubernetesNodePoolNodeOutputWithContext(ctx context.Context) GetKubernetesNodePoolNodeOutput {
	return o
}

// Date node was created.
func (o GetKubernetesNodePoolNodeOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePoolNode) string { return v.DateCreated }).(pulumi.StringOutput)
}

// ID of node.
func (o GetKubernetesNodePoolNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePoolNode) string { return v.Id }).(pulumi.StringOutput)
}

// Label of node.
func (o GetKubernetesNodePoolNodeOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePoolNode) string { return v.Label }).(pulumi.StringOutput)
}

// Status of node.
func (o GetKubernetesNodePoolNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesNodePoolNode) string { return v.Status }).(pulumi.StringOutput)
}

type GetKubernetesNodePoolNodeArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesNodePoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesNodePoolNode)(nil)).Elem()
}

func (o GetKubernetesNodePoolNodeArrayOutput) ToGetKubernetesNodePoolNodeArrayOutput() GetKubernetesNodePoolNodeArrayOutput {
	return o
}

func (o GetKubernetesNodePoolNodeArrayOutput) ToGetKubernetesNodePoolNodeArrayOutputWithContext(ctx context.Context) GetKubernetesNodePoolNodeArrayOutput {
	return o
}

func (o GetKubernetesNodePoolNodeArrayOutput) Index(i pulumi.IntInput) GetKubernetesNodePoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesNodePoolNode {
		return vs[0].([]GetKubernetesNodePoolNode)[vs[1].(int)]
	}).(GetKubernetesNodePoolNodeOutput)
}

type GetLoadBalancerFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetLoadBalancerFilterInput is an input type that accepts GetLoadBalancerFilterArgs and GetLoadBalancerFilterOutput values.
// You can construct a concrete instance of `GetLoadBalancerFilterInput` via:
//
//	GetLoadBalancerFilterArgs{...}
type GetLoadBalancerFilterInput interface {
	pulumi.Input

	ToGetLoadBalancerFilterOutput() GetLoadBalancerFilterOutput
	ToGetLoadBalancerFilterOutputWithContext(context.Context) GetLoadBalancerFilterOutput
}

type GetLoadBalancerFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetLoadBalancerFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerFilter)(nil)).Elem()
}

func (i GetLoadBalancerFilterArgs) ToGetLoadBalancerFilterOutput() GetLoadBalancerFilterOutput {
	return i.ToGetLoadBalancerFilterOutputWithContext(context.Background())
}

func (i GetLoadBalancerFilterArgs) ToGetLoadBalancerFilterOutputWithContext(ctx context.Context) GetLoadBalancerFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerFilterOutput)
}

// GetLoadBalancerFilterArrayInput is an input type that accepts GetLoadBalancerFilterArray and GetLoadBalancerFilterArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerFilterArrayInput` via:
//
//	GetLoadBalancerFilterArray{ GetLoadBalancerFilterArgs{...} }
type GetLoadBalancerFilterArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerFilterArrayOutput() GetLoadBalancerFilterArrayOutput
	ToGetLoadBalancerFilterArrayOutputWithContext(context.Context) GetLoadBalancerFilterArrayOutput
}

type GetLoadBalancerFilterArray []GetLoadBalancerFilterInput

func (GetLoadBalancerFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerFilter)(nil)).Elem()
}

func (i GetLoadBalancerFilterArray) ToGetLoadBalancerFilterArrayOutput() GetLoadBalancerFilterArrayOutput {
	return i.ToGetLoadBalancerFilterArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerFilterArray) ToGetLoadBalancerFilterArrayOutputWithContext(ctx context.Context) GetLoadBalancerFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerFilterArrayOutput)
}

type GetLoadBalancerFilterOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerFilter)(nil)).Elem()
}

func (o GetLoadBalancerFilterOutput) ToGetLoadBalancerFilterOutput() GetLoadBalancerFilterOutput {
	return o
}

func (o GetLoadBalancerFilterOutput) ToGetLoadBalancerFilterOutputWithContext(ctx context.Context) GetLoadBalancerFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetLoadBalancerFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetLoadBalancerFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetLoadBalancerFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerFilter)(nil)).Elem()
}

func (o GetLoadBalancerFilterArrayOutput) ToGetLoadBalancerFilterArrayOutput() GetLoadBalancerFilterArrayOutput {
	return o
}

func (o GetLoadBalancerFilterArrayOutput) ToGetLoadBalancerFilterArrayOutputWithContext(ctx context.Context) GetLoadBalancerFilterArrayOutput {
	return o
}

func (o GetLoadBalancerFilterArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerFilter {
		return vs[0].([]GetLoadBalancerFilter)[vs[1].(int)]
	}).(GetLoadBalancerFilterOutput)
}

type GetObjectStorageClusterFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetObjectStorageClusterFilterInput is an input type that accepts GetObjectStorageClusterFilterArgs and GetObjectStorageClusterFilterOutput values.
// You can construct a concrete instance of `GetObjectStorageClusterFilterInput` via:
//
//	GetObjectStorageClusterFilterArgs{...}
type GetObjectStorageClusterFilterInput interface {
	pulumi.Input

	ToGetObjectStorageClusterFilterOutput() GetObjectStorageClusterFilterOutput
	ToGetObjectStorageClusterFilterOutputWithContext(context.Context) GetObjectStorageClusterFilterOutput
}

type GetObjectStorageClusterFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetObjectStorageClusterFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectStorageClusterFilter)(nil)).Elem()
}

func (i GetObjectStorageClusterFilterArgs) ToGetObjectStorageClusterFilterOutput() GetObjectStorageClusterFilterOutput {
	return i.ToGetObjectStorageClusterFilterOutputWithContext(context.Background())
}

func (i GetObjectStorageClusterFilterArgs) ToGetObjectStorageClusterFilterOutputWithContext(ctx context.Context) GetObjectStorageClusterFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectStorageClusterFilterOutput)
}

// GetObjectStorageClusterFilterArrayInput is an input type that accepts GetObjectStorageClusterFilterArray and GetObjectStorageClusterFilterArrayOutput values.
// You can construct a concrete instance of `GetObjectStorageClusterFilterArrayInput` via:
//
//	GetObjectStorageClusterFilterArray{ GetObjectStorageClusterFilterArgs{...} }
type GetObjectStorageClusterFilterArrayInput interface {
	pulumi.Input

	ToGetObjectStorageClusterFilterArrayOutput() GetObjectStorageClusterFilterArrayOutput
	ToGetObjectStorageClusterFilterArrayOutputWithContext(context.Context) GetObjectStorageClusterFilterArrayOutput
}

type GetObjectStorageClusterFilterArray []GetObjectStorageClusterFilterInput

func (GetObjectStorageClusterFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectStorageClusterFilter)(nil)).Elem()
}

func (i GetObjectStorageClusterFilterArray) ToGetObjectStorageClusterFilterArrayOutput() GetObjectStorageClusterFilterArrayOutput {
	return i.ToGetObjectStorageClusterFilterArrayOutputWithContext(context.Background())
}

func (i GetObjectStorageClusterFilterArray) ToGetObjectStorageClusterFilterArrayOutputWithContext(ctx context.Context) GetObjectStorageClusterFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectStorageClusterFilterArrayOutput)
}

type GetObjectStorageClusterFilterOutput struct{ *pulumi.OutputState }

func (GetObjectStorageClusterFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectStorageClusterFilter)(nil)).Elem()
}

func (o GetObjectStorageClusterFilterOutput) ToGetObjectStorageClusterFilterOutput() GetObjectStorageClusterFilterOutput {
	return o
}

func (o GetObjectStorageClusterFilterOutput) ToGetObjectStorageClusterFilterOutputWithContext(ctx context.Context) GetObjectStorageClusterFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetObjectStorageClusterFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectStorageClusterFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetObjectStorageClusterFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectStorageClusterFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetObjectStorageClusterFilterArrayOutput struct{ *pulumi.OutputState }

func (GetObjectStorageClusterFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectStorageClusterFilter)(nil)).Elem()
}

func (o GetObjectStorageClusterFilterArrayOutput) ToGetObjectStorageClusterFilterArrayOutput() GetObjectStorageClusterFilterArrayOutput {
	return o
}

func (o GetObjectStorageClusterFilterArrayOutput) ToGetObjectStorageClusterFilterArrayOutputWithContext(ctx context.Context) GetObjectStorageClusterFilterArrayOutput {
	return o
}

func (o GetObjectStorageClusterFilterArrayOutput) Index(i pulumi.IntInput) GetObjectStorageClusterFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectStorageClusterFilter {
		return vs[0].([]GetObjectStorageClusterFilter)[vs[1].(int)]
	}).(GetObjectStorageClusterFilterOutput)
}

type GetObjectStorageFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetObjectStorageFilterInput is an input type that accepts GetObjectStorageFilterArgs and GetObjectStorageFilterOutput values.
// You can construct a concrete instance of `GetObjectStorageFilterInput` via:
//
//	GetObjectStorageFilterArgs{...}
type GetObjectStorageFilterInput interface {
	pulumi.Input

	ToGetObjectStorageFilterOutput() GetObjectStorageFilterOutput
	ToGetObjectStorageFilterOutputWithContext(context.Context) GetObjectStorageFilterOutput
}

type GetObjectStorageFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetObjectStorageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectStorageFilter)(nil)).Elem()
}

func (i GetObjectStorageFilterArgs) ToGetObjectStorageFilterOutput() GetObjectStorageFilterOutput {
	return i.ToGetObjectStorageFilterOutputWithContext(context.Background())
}

func (i GetObjectStorageFilterArgs) ToGetObjectStorageFilterOutputWithContext(ctx context.Context) GetObjectStorageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectStorageFilterOutput)
}

// GetObjectStorageFilterArrayInput is an input type that accepts GetObjectStorageFilterArray and GetObjectStorageFilterArrayOutput values.
// You can construct a concrete instance of `GetObjectStorageFilterArrayInput` via:
//
//	GetObjectStorageFilterArray{ GetObjectStorageFilterArgs{...} }
type GetObjectStorageFilterArrayInput interface {
	pulumi.Input

	ToGetObjectStorageFilterArrayOutput() GetObjectStorageFilterArrayOutput
	ToGetObjectStorageFilterArrayOutputWithContext(context.Context) GetObjectStorageFilterArrayOutput
}

type GetObjectStorageFilterArray []GetObjectStorageFilterInput

func (GetObjectStorageFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectStorageFilter)(nil)).Elem()
}

func (i GetObjectStorageFilterArray) ToGetObjectStorageFilterArrayOutput() GetObjectStorageFilterArrayOutput {
	return i.ToGetObjectStorageFilterArrayOutputWithContext(context.Background())
}

func (i GetObjectStorageFilterArray) ToGetObjectStorageFilterArrayOutputWithContext(ctx context.Context) GetObjectStorageFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectStorageFilterArrayOutput)
}

type GetObjectStorageFilterOutput struct{ *pulumi.OutputState }

func (GetObjectStorageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectStorageFilter)(nil)).Elem()
}

func (o GetObjectStorageFilterOutput) ToGetObjectStorageFilterOutput() GetObjectStorageFilterOutput {
	return o
}

func (o GetObjectStorageFilterOutput) ToGetObjectStorageFilterOutputWithContext(ctx context.Context) GetObjectStorageFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetObjectStorageFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectStorageFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetObjectStorageFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObjectStorageFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetObjectStorageFilterArrayOutput struct{ *pulumi.OutputState }

func (GetObjectStorageFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectStorageFilter)(nil)).Elem()
}

func (o GetObjectStorageFilterArrayOutput) ToGetObjectStorageFilterArrayOutput() GetObjectStorageFilterArrayOutput {
	return o
}

func (o GetObjectStorageFilterArrayOutput) ToGetObjectStorageFilterArrayOutputWithContext(ctx context.Context) GetObjectStorageFilterArrayOutput {
	return o
}

func (o GetObjectStorageFilterArrayOutput) Index(i pulumi.IntInput) GetObjectStorageFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectStorageFilter {
		return vs[0].([]GetObjectStorageFilter)[vs[1].(int)]
	}).(GetObjectStorageFilterOutput)
}

type GetOsFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetOsFilterInput is an input type that accepts GetOsFilterArgs and GetOsFilterOutput values.
// You can construct a concrete instance of `GetOsFilterInput` via:
//
//	GetOsFilterArgs{...}
type GetOsFilterInput interface {
	pulumi.Input

	ToGetOsFilterOutput() GetOsFilterOutput
	ToGetOsFilterOutputWithContext(context.Context) GetOsFilterOutput
}

type GetOsFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetOsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOsFilter)(nil)).Elem()
}

func (i GetOsFilterArgs) ToGetOsFilterOutput() GetOsFilterOutput {
	return i.ToGetOsFilterOutputWithContext(context.Background())
}

func (i GetOsFilterArgs) ToGetOsFilterOutputWithContext(ctx context.Context) GetOsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOsFilterOutput)
}

// GetOsFilterArrayInput is an input type that accepts GetOsFilterArray and GetOsFilterArrayOutput values.
// You can construct a concrete instance of `GetOsFilterArrayInput` via:
//
//	GetOsFilterArray{ GetOsFilterArgs{...} }
type GetOsFilterArrayInput interface {
	pulumi.Input

	ToGetOsFilterArrayOutput() GetOsFilterArrayOutput
	ToGetOsFilterArrayOutputWithContext(context.Context) GetOsFilterArrayOutput
}

type GetOsFilterArray []GetOsFilterInput

func (GetOsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOsFilter)(nil)).Elem()
}

func (i GetOsFilterArray) ToGetOsFilterArrayOutput() GetOsFilterArrayOutput {
	return i.ToGetOsFilterArrayOutputWithContext(context.Background())
}

func (i GetOsFilterArray) ToGetOsFilterArrayOutputWithContext(ctx context.Context) GetOsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOsFilterArrayOutput)
}

type GetOsFilterOutput struct{ *pulumi.OutputState }

func (GetOsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOsFilter)(nil)).Elem()
}

func (o GetOsFilterOutput) ToGetOsFilterOutput() GetOsFilterOutput {
	return o
}

func (o GetOsFilterOutput) ToGetOsFilterOutputWithContext(ctx context.Context) GetOsFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetOsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOsFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetOsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetOsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetOsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOsFilter)(nil)).Elem()
}

func (o GetOsFilterArrayOutput) ToGetOsFilterArrayOutput() GetOsFilterArrayOutput {
	return o
}

func (o GetOsFilterArrayOutput) ToGetOsFilterArrayOutputWithContext(ctx context.Context) GetOsFilterArrayOutput {
	return o
}

func (o GetOsFilterArrayOutput) Index(i pulumi.IntInput) GetOsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOsFilter {
		return vs[0].([]GetOsFilter)[vs[1].(int)]
	}).(GetOsFilterOutput)
}

type GetPlanFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetPlanFilterInput is an input type that accepts GetPlanFilterArgs and GetPlanFilterOutput values.
// You can construct a concrete instance of `GetPlanFilterInput` via:
//
//	GetPlanFilterArgs{...}
type GetPlanFilterInput interface {
	pulumi.Input

	ToGetPlanFilterOutput() GetPlanFilterOutput
	ToGetPlanFilterOutputWithContext(context.Context) GetPlanFilterOutput
}

type GetPlanFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPlanFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanFilter)(nil)).Elem()
}

func (i GetPlanFilterArgs) ToGetPlanFilterOutput() GetPlanFilterOutput {
	return i.ToGetPlanFilterOutputWithContext(context.Background())
}

func (i GetPlanFilterArgs) ToGetPlanFilterOutputWithContext(ctx context.Context) GetPlanFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanFilterOutput)
}

// GetPlanFilterArrayInput is an input type that accepts GetPlanFilterArray and GetPlanFilterArrayOutput values.
// You can construct a concrete instance of `GetPlanFilterArrayInput` via:
//
//	GetPlanFilterArray{ GetPlanFilterArgs{...} }
type GetPlanFilterArrayInput interface {
	pulumi.Input

	ToGetPlanFilterArrayOutput() GetPlanFilterArrayOutput
	ToGetPlanFilterArrayOutputWithContext(context.Context) GetPlanFilterArrayOutput
}

type GetPlanFilterArray []GetPlanFilterInput

func (GetPlanFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPlanFilter)(nil)).Elem()
}

func (i GetPlanFilterArray) ToGetPlanFilterArrayOutput() GetPlanFilterArrayOutput {
	return i.ToGetPlanFilterArrayOutputWithContext(context.Background())
}

func (i GetPlanFilterArray) ToGetPlanFilterArrayOutputWithContext(ctx context.Context) GetPlanFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanFilterArrayOutput)
}

type GetPlanFilterOutput struct{ *pulumi.OutputState }

func (GetPlanFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanFilter)(nil)).Elem()
}

func (o GetPlanFilterOutput) ToGetPlanFilterOutput() GetPlanFilterOutput {
	return o
}

func (o GetPlanFilterOutput) ToGetPlanFilterOutputWithContext(ctx context.Context) GetPlanFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetPlanFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlanFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetPlanFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPlanFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPlanFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPlanFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPlanFilter)(nil)).Elem()
}

func (o GetPlanFilterArrayOutput) ToGetPlanFilterArrayOutput() GetPlanFilterArrayOutput {
	return o
}

func (o GetPlanFilterArrayOutput) ToGetPlanFilterArrayOutputWithContext(ctx context.Context) GetPlanFilterArrayOutput {
	return o
}

func (o GetPlanFilterArrayOutput) Index(i pulumi.IntInput) GetPlanFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPlanFilter {
		return vs[0].([]GetPlanFilter)[vs[1].(int)]
	}).(GetPlanFilterOutput)
}

type GetPrivateNetworkFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetPrivateNetworkFilterInput is an input type that accepts GetPrivateNetworkFilterArgs and GetPrivateNetworkFilterOutput values.
// You can construct a concrete instance of `GetPrivateNetworkFilterInput` via:
//
//	GetPrivateNetworkFilterArgs{...}
type GetPrivateNetworkFilterInput interface {
	pulumi.Input

	ToGetPrivateNetworkFilterOutput() GetPrivateNetworkFilterOutput
	ToGetPrivateNetworkFilterOutputWithContext(context.Context) GetPrivateNetworkFilterOutput
}

type GetPrivateNetworkFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPrivateNetworkFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateNetworkFilter)(nil)).Elem()
}

func (i GetPrivateNetworkFilterArgs) ToGetPrivateNetworkFilterOutput() GetPrivateNetworkFilterOutput {
	return i.ToGetPrivateNetworkFilterOutputWithContext(context.Background())
}

func (i GetPrivateNetworkFilterArgs) ToGetPrivateNetworkFilterOutputWithContext(ctx context.Context) GetPrivateNetworkFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateNetworkFilterOutput)
}

// GetPrivateNetworkFilterArrayInput is an input type that accepts GetPrivateNetworkFilterArray and GetPrivateNetworkFilterArrayOutput values.
// You can construct a concrete instance of `GetPrivateNetworkFilterArrayInput` via:
//
//	GetPrivateNetworkFilterArray{ GetPrivateNetworkFilterArgs{...} }
type GetPrivateNetworkFilterArrayInput interface {
	pulumi.Input

	ToGetPrivateNetworkFilterArrayOutput() GetPrivateNetworkFilterArrayOutput
	ToGetPrivateNetworkFilterArrayOutputWithContext(context.Context) GetPrivateNetworkFilterArrayOutput
}

type GetPrivateNetworkFilterArray []GetPrivateNetworkFilterInput

func (GetPrivateNetworkFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateNetworkFilter)(nil)).Elem()
}

func (i GetPrivateNetworkFilterArray) ToGetPrivateNetworkFilterArrayOutput() GetPrivateNetworkFilterArrayOutput {
	return i.ToGetPrivateNetworkFilterArrayOutputWithContext(context.Background())
}

func (i GetPrivateNetworkFilterArray) ToGetPrivateNetworkFilterArrayOutputWithContext(ctx context.Context) GetPrivateNetworkFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateNetworkFilterArrayOutput)
}

type GetPrivateNetworkFilterOutput struct{ *pulumi.OutputState }

func (GetPrivateNetworkFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateNetworkFilter)(nil)).Elem()
}

func (o GetPrivateNetworkFilterOutput) ToGetPrivateNetworkFilterOutput() GetPrivateNetworkFilterOutput {
	return o
}

func (o GetPrivateNetworkFilterOutput) ToGetPrivateNetworkFilterOutputWithContext(ctx context.Context) GetPrivateNetworkFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetPrivateNetworkFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateNetworkFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetPrivateNetworkFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrivateNetworkFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPrivateNetworkFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateNetworkFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateNetworkFilter)(nil)).Elem()
}

func (o GetPrivateNetworkFilterArrayOutput) ToGetPrivateNetworkFilterArrayOutput() GetPrivateNetworkFilterArrayOutput {
	return o
}

func (o GetPrivateNetworkFilterArrayOutput) ToGetPrivateNetworkFilterArrayOutputWithContext(ctx context.Context) GetPrivateNetworkFilterArrayOutput {
	return o
}

func (o GetPrivateNetworkFilterArrayOutput) Index(i pulumi.IntInput) GetPrivateNetworkFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateNetworkFilter {
		return vs[0].([]GetPrivateNetworkFilter)[vs[1].(int)]
	}).(GetPrivateNetworkFilterOutput)
}

type GetRegionFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetRegionFilterInput is an input type that accepts GetRegionFilterArgs and GetRegionFilterOutput values.
// You can construct a concrete instance of `GetRegionFilterInput` via:
//
//	GetRegionFilterArgs{...}
type GetRegionFilterInput interface {
	pulumi.Input

	ToGetRegionFilterOutput() GetRegionFilterOutput
	ToGetRegionFilterOutputWithContext(context.Context) GetRegionFilterOutput
}

type GetRegionFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetRegionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionFilter)(nil)).Elem()
}

func (i GetRegionFilterArgs) ToGetRegionFilterOutput() GetRegionFilterOutput {
	return i.ToGetRegionFilterOutputWithContext(context.Background())
}

func (i GetRegionFilterArgs) ToGetRegionFilterOutputWithContext(ctx context.Context) GetRegionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionFilterOutput)
}

// GetRegionFilterArrayInput is an input type that accepts GetRegionFilterArray and GetRegionFilterArrayOutput values.
// You can construct a concrete instance of `GetRegionFilterArrayInput` via:
//
//	GetRegionFilterArray{ GetRegionFilterArgs{...} }
type GetRegionFilterArrayInput interface {
	pulumi.Input

	ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput
	ToGetRegionFilterArrayOutputWithContext(context.Context) GetRegionFilterArrayOutput
}

type GetRegionFilterArray []GetRegionFilterInput

func (GetRegionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionFilter)(nil)).Elem()
}

func (i GetRegionFilterArray) ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput {
	return i.ToGetRegionFilterArrayOutputWithContext(context.Background())
}

func (i GetRegionFilterArray) ToGetRegionFilterArrayOutputWithContext(ctx context.Context) GetRegionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionFilterArrayOutput)
}

type GetRegionFilterOutput struct{ *pulumi.OutputState }

func (GetRegionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionFilter)(nil)).Elem()
}

func (o GetRegionFilterOutput) ToGetRegionFilterOutput() GetRegionFilterOutput {
	return o
}

func (o GetRegionFilterOutput) ToGetRegionFilterOutputWithContext(ctx context.Context) GetRegionFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetRegionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetRegionFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetRegionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetRegionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionFilter)(nil)).Elem()
}

func (o GetRegionFilterArrayOutput) ToGetRegionFilterArrayOutput() GetRegionFilterArrayOutput {
	return o
}

func (o GetRegionFilterArrayOutput) ToGetRegionFilterArrayOutputWithContext(ctx context.Context) GetRegionFilterArrayOutput {
	return o
}

func (o GetRegionFilterArrayOutput) Index(i pulumi.IntInput) GetRegionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionFilter {
		return vs[0].([]GetRegionFilter)[vs[1].(int)]
	}).(GetRegionFilterOutput)
}

type GetReservedIpFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetReservedIpFilterInput is an input type that accepts GetReservedIpFilterArgs and GetReservedIpFilterOutput values.
// You can construct a concrete instance of `GetReservedIpFilterInput` via:
//
//	GetReservedIpFilterArgs{...}
type GetReservedIpFilterInput interface {
	pulumi.Input

	ToGetReservedIpFilterOutput() GetReservedIpFilterOutput
	ToGetReservedIpFilterOutputWithContext(context.Context) GetReservedIpFilterOutput
}

type GetReservedIpFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetReservedIpFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIpFilter)(nil)).Elem()
}

func (i GetReservedIpFilterArgs) ToGetReservedIpFilterOutput() GetReservedIpFilterOutput {
	return i.ToGetReservedIpFilterOutputWithContext(context.Background())
}

func (i GetReservedIpFilterArgs) ToGetReservedIpFilterOutputWithContext(ctx context.Context) GetReservedIpFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReservedIpFilterOutput)
}

// GetReservedIpFilterArrayInput is an input type that accepts GetReservedIpFilterArray and GetReservedIpFilterArrayOutput values.
// You can construct a concrete instance of `GetReservedIpFilterArrayInput` via:
//
//	GetReservedIpFilterArray{ GetReservedIpFilterArgs{...} }
type GetReservedIpFilterArrayInput interface {
	pulumi.Input

	ToGetReservedIpFilterArrayOutput() GetReservedIpFilterArrayOutput
	ToGetReservedIpFilterArrayOutputWithContext(context.Context) GetReservedIpFilterArrayOutput
}

type GetReservedIpFilterArray []GetReservedIpFilterInput

func (GetReservedIpFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReservedIpFilter)(nil)).Elem()
}

func (i GetReservedIpFilterArray) ToGetReservedIpFilterArrayOutput() GetReservedIpFilterArrayOutput {
	return i.ToGetReservedIpFilterArrayOutputWithContext(context.Background())
}

func (i GetReservedIpFilterArray) ToGetReservedIpFilterArrayOutputWithContext(ctx context.Context) GetReservedIpFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReservedIpFilterArrayOutput)
}

type GetReservedIpFilterOutput struct{ *pulumi.OutputState }

func (GetReservedIpFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIpFilter)(nil)).Elem()
}

func (o GetReservedIpFilterOutput) ToGetReservedIpFilterOutput() GetReservedIpFilterOutput {
	return o
}

func (o GetReservedIpFilterOutput) ToGetReservedIpFilterOutputWithContext(ctx context.Context) GetReservedIpFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetReservedIpFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetReservedIpFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReservedIpFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetReservedIpFilterArrayOutput struct{ *pulumi.OutputState }

func (GetReservedIpFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReservedIpFilter)(nil)).Elem()
}

func (o GetReservedIpFilterArrayOutput) ToGetReservedIpFilterArrayOutput() GetReservedIpFilterArrayOutput {
	return o
}

func (o GetReservedIpFilterArrayOutput) ToGetReservedIpFilterArrayOutputWithContext(ctx context.Context) GetReservedIpFilterArrayOutput {
	return o
}

func (o GetReservedIpFilterArrayOutput) Index(i pulumi.IntInput) GetReservedIpFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReservedIpFilter {
		return vs[0].([]GetReservedIpFilter)[vs[1].(int)]
	}).(GetReservedIpFilterOutput)
}

type GetReverseIpv4Filter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values to filter with.
	Values []string `pulumi:"values"`
}

// GetReverseIpv4FilterInput is an input type that accepts GetReverseIpv4FilterArgs and GetReverseIpv4FilterOutput values.
// You can construct a concrete instance of `GetReverseIpv4FilterInput` via:
//
//	GetReverseIpv4FilterArgs{...}
type GetReverseIpv4FilterInput interface {
	pulumi.Input

	ToGetReverseIpv4FilterOutput() GetReverseIpv4FilterOutput
	ToGetReverseIpv4FilterOutputWithContext(context.Context) GetReverseIpv4FilterOutput
}

type GetReverseIpv4FilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values to filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetReverseIpv4FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReverseIpv4Filter)(nil)).Elem()
}

func (i GetReverseIpv4FilterArgs) ToGetReverseIpv4FilterOutput() GetReverseIpv4FilterOutput {
	return i.ToGetReverseIpv4FilterOutputWithContext(context.Background())
}

func (i GetReverseIpv4FilterArgs) ToGetReverseIpv4FilterOutputWithContext(ctx context.Context) GetReverseIpv4FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReverseIpv4FilterOutput)
}

// GetReverseIpv4FilterArrayInput is an input type that accepts GetReverseIpv4FilterArray and GetReverseIpv4FilterArrayOutput values.
// You can construct a concrete instance of `GetReverseIpv4FilterArrayInput` via:
//
//	GetReverseIpv4FilterArray{ GetReverseIpv4FilterArgs{...} }
type GetReverseIpv4FilterArrayInput interface {
	pulumi.Input

	ToGetReverseIpv4FilterArrayOutput() GetReverseIpv4FilterArrayOutput
	ToGetReverseIpv4FilterArrayOutputWithContext(context.Context) GetReverseIpv4FilterArrayOutput
}

type GetReverseIpv4FilterArray []GetReverseIpv4FilterInput

func (GetReverseIpv4FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReverseIpv4Filter)(nil)).Elem()
}

func (i GetReverseIpv4FilterArray) ToGetReverseIpv4FilterArrayOutput() GetReverseIpv4FilterArrayOutput {
	return i.ToGetReverseIpv4FilterArrayOutputWithContext(context.Background())
}

func (i GetReverseIpv4FilterArray) ToGetReverseIpv4FilterArrayOutputWithContext(ctx context.Context) GetReverseIpv4FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReverseIpv4FilterArrayOutput)
}

type GetReverseIpv4FilterOutput struct{ *pulumi.OutputState }

func (GetReverseIpv4FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReverseIpv4Filter)(nil)).Elem()
}

func (o GetReverseIpv4FilterOutput) ToGetReverseIpv4FilterOutput() GetReverseIpv4FilterOutput {
	return o
}

func (o GetReverseIpv4FilterOutput) ToGetReverseIpv4FilterOutputWithContext(ctx context.Context) GetReverseIpv4FilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetReverseIpv4FilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReverseIpv4Filter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values to filter with.
func (o GetReverseIpv4FilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReverseIpv4Filter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetReverseIpv4FilterArrayOutput struct{ *pulumi.OutputState }

func (GetReverseIpv4FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReverseIpv4Filter)(nil)).Elem()
}

func (o GetReverseIpv4FilterArrayOutput) ToGetReverseIpv4FilterArrayOutput() GetReverseIpv4FilterArrayOutput {
	return o
}

func (o GetReverseIpv4FilterArrayOutput) ToGetReverseIpv4FilterArrayOutputWithContext(ctx context.Context) GetReverseIpv4FilterArrayOutput {
	return o
}

func (o GetReverseIpv4FilterArrayOutput) Index(i pulumi.IntInput) GetReverseIpv4FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReverseIpv4Filter {
		return vs[0].([]GetReverseIpv4Filter)[vs[1].(int)]
	}).(GetReverseIpv4FilterOutput)
}

type GetReverseIpv6Filter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values to filter with.
	Values []string `pulumi:"values"`
}

// GetReverseIpv6FilterInput is an input type that accepts GetReverseIpv6FilterArgs and GetReverseIpv6FilterOutput values.
// You can construct a concrete instance of `GetReverseIpv6FilterInput` via:
//
//	GetReverseIpv6FilterArgs{...}
type GetReverseIpv6FilterInput interface {
	pulumi.Input

	ToGetReverseIpv6FilterOutput() GetReverseIpv6FilterOutput
	ToGetReverseIpv6FilterOutputWithContext(context.Context) GetReverseIpv6FilterOutput
}

type GetReverseIpv6FilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values to filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetReverseIpv6FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReverseIpv6Filter)(nil)).Elem()
}

func (i GetReverseIpv6FilterArgs) ToGetReverseIpv6FilterOutput() GetReverseIpv6FilterOutput {
	return i.ToGetReverseIpv6FilterOutputWithContext(context.Background())
}

func (i GetReverseIpv6FilterArgs) ToGetReverseIpv6FilterOutputWithContext(ctx context.Context) GetReverseIpv6FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReverseIpv6FilterOutput)
}

// GetReverseIpv6FilterArrayInput is an input type that accepts GetReverseIpv6FilterArray and GetReverseIpv6FilterArrayOutput values.
// You can construct a concrete instance of `GetReverseIpv6FilterArrayInput` via:
//
//	GetReverseIpv6FilterArray{ GetReverseIpv6FilterArgs{...} }
type GetReverseIpv6FilterArrayInput interface {
	pulumi.Input

	ToGetReverseIpv6FilterArrayOutput() GetReverseIpv6FilterArrayOutput
	ToGetReverseIpv6FilterArrayOutputWithContext(context.Context) GetReverseIpv6FilterArrayOutput
}

type GetReverseIpv6FilterArray []GetReverseIpv6FilterInput

func (GetReverseIpv6FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReverseIpv6Filter)(nil)).Elem()
}

func (i GetReverseIpv6FilterArray) ToGetReverseIpv6FilterArrayOutput() GetReverseIpv6FilterArrayOutput {
	return i.ToGetReverseIpv6FilterArrayOutputWithContext(context.Background())
}

func (i GetReverseIpv6FilterArray) ToGetReverseIpv6FilterArrayOutputWithContext(ctx context.Context) GetReverseIpv6FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReverseIpv6FilterArrayOutput)
}

type GetReverseIpv6FilterOutput struct{ *pulumi.OutputState }

func (GetReverseIpv6FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReverseIpv6Filter)(nil)).Elem()
}

func (o GetReverseIpv6FilterOutput) ToGetReverseIpv6FilterOutput() GetReverseIpv6FilterOutput {
	return o
}

func (o GetReverseIpv6FilterOutput) ToGetReverseIpv6FilterOutputWithContext(ctx context.Context) GetReverseIpv6FilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetReverseIpv6FilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReverseIpv6Filter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values to filter with.
func (o GetReverseIpv6FilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReverseIpv6Filter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetReverseIpv6FilterArrayOutput struct{ *pulumi.OutputState }

func (GetReverseIpv6FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReverseIpv6Filter)(nil)).Elem()
}

func (o GetReverseIpv6FilterArrayOutput) ToGetReverseIpv6FilterArrayOutput() GetReverseIpv6FilterArrayOutput {
	return o
}

func (o GetReverseIpv6FilterArrayOutput) ToGetReverseIpv6FilterArrayOutputWithContext(ctx context.Context) GetReverseIpv6FilterArrayOutput {
	return o
}

func (o GetReverseIpv6FilterArrayOutput) Index(i pulumi.IntInput) GetReverseIpv6FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReverseIpv6Filter {
		return vs[0].([]GetReverseIpv6Filter)[vs[1].(int)]
	}).(GetReverseIpv6FilterOutput)
}

type GetSnapshotFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetSnapshotFilterInput is an input type that accepts GetSnapshotFilterArgs and GetSnapshotFilterOutput values.
// You can construct a concrete instance of `GetSnapshotFilterInput` via:
//
//	GetSnapshotFilterArgs{...}
type GetSnapshotFilterInput interface {
	pulumi.Input

	ToGetSnapshotFilterOutput() GetSnapshotFilterOutput
	ToGetSnapshotFilterOutputWithContext(context.Context) GetSnapshotFilterOutput
}

type GetSnapshotFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSnapshotFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotFilter)(nil)).Elem()
}

func (i GetSnapshotFilterArgs) ToGetSnapshotFilterOutput() GetSnapshotFilterOutput {
	return i.ToGetSnapshotFilterOutputWithContext(context.Background())
}

func (i GetSnapshotFilterArgs) ToGetSnapshotFilterOutputWithContext(ctx context.Context) GetSnapshotFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotFilterOutput)
}

// GetSnapshotFilterArrayInput is an input type that accepts GetSnapshotFilterArray and GetSnapshotFilterArrayOutput values.
// You can construct a concrete instance of `GetSnapshotFilterArrayInput` via:
//
//	GetSnapshotFilterArray{ GetSnapshotFilterArgs{...} }
type GetSnapshotFilterArrayInput interface {
	pulumi.Input

	ToGetSnapshotFilterArrayOutput() GetSnapshotFilterArrayOutput
	ToGetSnapshotFilterArrayOutputWithContext(context.Context) GetSnapshotFilterArrayOutput
}

type GetSnapshotFilterArray []GetSnapshotFilterInput

func (GetSnapshotFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotFilter)(nil)).Elem()
}

func (i GetSnapshotFilterArray) ToGetSnapshotFilterArrayOutput() GetSnapshotFilterArrayOutput {
	return i.ToGetSnapshotFilterArrayOutputWithContext(context.Background())
}

func (i GetSnapshotFilterArray) ToGetSnapshotFilterArrayOutputWithContext(ctx context.Context) GetSnapshotFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotFilterArrayOutput)
}

type GetSnapshotFilterOutput struct{ *pulumi.OutputState }

func (GetSnapshotFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotFilter)(nil)).Elem()
}

func (o GetSnapshotFilterOutput) ToGetSnapshotFilterOutput() GetSnapshotFilterOutput {
	return o
}

func (o GetSnapshotFilterOutput) ToGetSnapshotFilterOutputWithContext(ctx context.Context) GetSnapshotFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetSnapshotFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetSnapshotFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSnapshotFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotFilter)(nil)).Elem()
}

func (o GetSnapshotFilterArrayOutput) ToGetSnapshotFilterArrayOutput() GetSnapshotFilterArrayOutput {
	return o
}

func (o GetSnapshotFilterArrayOutput) ToGetSnapshotFilterArrayOutputWithContext(ctx context.Context) GetSnapshotFilterArrayOutput {
	return o
}

func (o GetSnapshotFilterArrayOutput) Index(i pulumi.IntInput) GetSnapshotFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotFilter {
		return vs[0].([]GetSnapshotFilter)[vs[1].(int)]
	}).(GetSnapshotFilterOutput)
}

type GetSshKeyFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetSshKeyFilterInput is an input type that accepts GetSshKeyFilterArgs and GetSshKeyFilterOutput values.
// You can construct a concrete instance of `GetSshKeyFilterInput` via:
//
//	GetSshKeyFilterArgs{...}
type GetSshKeyFilterInput interface {
	pulumi.Input

	ToGetSshKeyFilterOutput() GetSshKeyFilterOutput
	ToGetSshKeyFilterOutputWithContext(context.Context) GetSshKeyFilterOutput
}

type GetSshKeyFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSshKeyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshKeyFilter)(nil)).Elem()
}

func (i GetSshKeyFilterArgs) ToGetSshKeyFilterOutput() GetSshKeyFilterOutput {
	return i.ToGetSshKeyFilterOutputWithContext(context.Background())
}

func (i GetSshKeyFilterArgs) ToGetSshKeyFilterOutputWithContext(ctx context.Context) GetSshKeyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshKeyFilterOutput)
}

// GetSshKeyFilterArrayInput is an input type that accepts GetSshKeyFilterArray and GetSshKeyFilterArrayOutput values.
// You can construct a concrete instance of `GetSshKeyFilterArrayInput` via:
//
//	GetSshKeyFilterArray{ GetSshKeyFilterArgs{...} }
type GetSshKeyFilterArrayInput interface {
	pulumi.Input

	ToGetSshKeyFilterArrayOutput() GetSshKeyFilterArrayOutput
	ToGetSshKeyFilterArrayOutputWithContext(context.Context) GetSshKeyFilterArrayOutput
}

type GetSshKeyFilterArray []GetSshKeyFilterInput

func (GetSshKeyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshKeyFilter)(nil)).Elem()
}

func (i GetSshKeyFilterArray) ToGetSshKeyFilterArrayOutput() GetSshKeyFilterArrayOutput {
	return i.ToGetSshKeyFilterArrayOutputWithContext(context.Background())
}

func (i GetSshKeyFilterArray) ToGetSshKeyFilterArrayOutputWithContext(ctx context.Context) GetSshKeyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshKeyFilterArrayOutput)
}

type GetSshKeyFilterOutput struct{ *pulumi.OutputState }

func (GetSshKeyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshKeyFilter)(nil)).Elem()
}

func (o GetSshKeyFilterOutput) ToGetSshKeyFilterOutput() GetSshKeyFilterOutput {
	return o
}

func (o GetSshKeyFilterOutput) ToGetSshKeyFilterOutputWithContext(ctx context.Context) GetSshKeyFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetSshKeyFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSshKeyFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetSshKeyFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSshKeyFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSshKeyFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSshKeyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshKeyFilter)(nil)).Elem()
}

func (o GetSshKeyFilterArrayOutput) ToGetSshKeyFilterArrayOutput() GetSshKeyFilterArrayOutput {
	return o
}

func (o GetSshKeyFilterArrayOutput) ToGetSshKeyFilterArrayOutputWithContext(ctx context.Context) GetSshKeyFilterArrayOutput {
	return o
}

func (o GetSshKeyFilterArrayOutput) Index(i pulumi.IntInput) GetSshKeyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSshKeyFilter {
		return vs[0].([]GetSshKeyFilter)[vs[1].(int)]
	}).(GetSshKeyFilterOutput)
}

type GetStartupScriptFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetStartupScriptFilterInput is an input type that accepts GetStartupScriptFilterArgs and GetStartupScriptFilterOutput values.
// You can construct a concrete instance of `GetStartupScriptFilterInput` via:
//
//	GetStartupScriptFilterArgs{...}
type GetStartupScriptFilterInput interface {
	pulumi.Input

	ToGetStartupScriptFilterOutput() GetStartupScriptFilterOutput
	ToGetStartupScriptFilterOutputWithContext(context.Context) GetStartupScriptFilterOutput
}

type GetStartupScriptFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetStartupScriptFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStartupScriptFilter)(nil)).Elem()
}

func (i GetStartupScriptFilterArgs) ToGetStartupScriptFilterOutput() GetStartupScriptFilterOutput {
	return i.ToGetStartupScriptFilterOutputWithContext(context.Background())
}

func (i GetStartupScriptFilterArgs) ToGetStartupScriptFilterOutputWithContext(ctx context.Context) GetStartupScriptFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStartupScriptFilterOutput)
}

// GetStartupScriptFilterArrayInput is an input type that accepts GetStartupScriptFilterArray and GetStartupScriptFilterArrayOutput values.
// You can construct a concrete instance of `GetStartupScriptFilterArrayInput` via:
//
//	GetStartupScriptFilterArray{ GetStartupScriptFilterArgs{...} }
type GetStartupScriptFilterArrayInput interface {
	pulumi.Input

	ToGetStartupScriptFilterArrayOutput() GetStartupScriptFilterArrayOutput
	ToGetStartupScriptFilterArrayOutputWithContext(context.Context) GetStartupScriptFilterArrayOutput
}

type GetStartupScriptFilterArray []GetStartupScriptFilterInput

func (GetStartupScriptFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStartupScriptFilter)(nil)).Elem()
}

func (i GetStartupScriptFilterArray) ToGetStartupScriptFilterArrayOutput() GetStartupScriptFilterArrayOutput {
	return i.ToGetStartupScriptFilterArrayOutputWithContext(context.Background())
}

func (i GetStartupScriptFilterArray) ToGetStartupScriptFilterArrayOutputWithContext(ctx context.Context) GetStartupScriptFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStartupScriptFilterArrayOutput)
}

type GetStartupScriptFilterOutput struct{ *pulumi.OutputState }

func (GetStartupScriptFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStartupScriptFilter)(nil)).Elem()
}

func (o GetStartupScriptFilterOutput) ToGetStartupScriptFilterOutput() GetStartupScriptFilterOutput {
	return o
}

func (o GetStartupScriptFilterOutput) ToGetStartupScriptFilterOutputWithContext(ctx context.Context) GetStartupScriptFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetStartupScriptFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStartupScriptFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetStartupScriptFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStartupScriptFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetStartupScriptFilterArrayOutput struct{ *pulumi.OutputState }

func (GetStartupScriptFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStartupScriptFilter)(nil)).Elem()
}

func (o GetStartupScriptFilterArrayOutput) ToGetStartupScriptFilterArrayOutput() GetStartupScriptFilterArrayOutput {
	return o
}

func (o GetStartupScriptFilterArrayOutput) ToGetStartupScriptFilterArrayOutputWithContext(ctx context.Context) GetStartupScriptFilterArrayOutput {
	return o
}

func (o GetStartupScriptFilterArrayOutput) Index(i pulumi.IntInput) GetStartupScriptFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStartupScriptFilter {
		return vs[0].([]GetStartupScriptFilter)[vs[1].(int)]
	}).(GetStartupScriptFilterOutput)
}

type GetUserFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetUserFilterInput is an input type that accepts GetUserFilterArgs and GetUserFilterOutput values.
// You can construct a concrete instance of `GetUserFilterInput` via:
//
//	GetUserFilterArgs{...}
type GetUserFilterInput interface {
	pulumi.Input

	ToGetUserFilterOutput() GetUserFilterOutput
	ToGetUserFilterOutputWithContext(context.Context) GetUserFilterOutput
}

type GetUserFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetUserFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserFilter)(nil)).Elem()
}

func (i GetUserFilterArgs) ToGetUserFilterOutput() GetUserFilterOutput {
	return i.ToGetUserFilterOutputWithContext(context.Background())
}

func (i GetUserFilterArgs) ToGetUserFilterOutputWithContext(ctx context.Context) GetUserFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserFilterOutput)
}

// GetUserFilterArrayInput is an input type that accepts GetUserFilterArray and GetUserFilterArrayOutput values.
// You can construct a concrete instance of `GetUserFilterArrayInput` via:
//
//	GetUserFilterArray{ GetUserFilterArgs{...} }
type GetUserFilterArrayInput interface {
	pulumi.Input

	ToGetUserFilterArrayOutput() GetUserFilterArrayOutput
	ToGetUserFilterArrayOutputWithContext(context.Context) GetUserFilterArrayOutput
}

type GetUserFilterArray []GetUserFilterInput

func (GetUserFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserFilter)(nil)).Elem()
}

func (i GetUserFilterArray) ToGetUserFilterArrayOutput() GetUserFilterArrayOutput {
	return i.ToGetUserFilterArrayOutputWithContext(context.Background())
}

func (i GetUserFilterArray) ToGetUserFilterArrayOutputWithContext(ctx context.Context) GetUserFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserFilterArrayOutput)
}

type GetUserFilterOutput struct{ *pulumi.OutputState }

func (GetUserFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserFilter)(nil)).Elem()
}

func (o GetUserFilterOutput) ToGetUserFilterOutput() GetUserFilterOutput {
	return o
}

func (o GetUserFilterOutput) ToGetUserFilterOutputWithContext(ctx context.Context) GetUserFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetUserFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetUserFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetUserFilterArrayOutput struct{ *pulumi.OutputState }

func (GetUserFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserFilter)(nil)).Elem()
}

func (o GetUserFilterArrayOutput) ToGetUserFilterArrayOutput() GetUserFilterArrayOutput {
	return o
}

func (o GetUserFilterArrayOutput) ToGetUserFilterArrayOutputWithContext(ctx context.Context) GetUserFilterArrayOutput {
	return o
}

func (o GetUserFilterArrayOutput) Index(i pulumi.IntInput) GetUserFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserFilter {
		return vs[0].([]GetUserFilter)[vs[1].(int)]
	}).(GetUserFilterOutput)
}

type GetVpcFilter struct {
	// Attribute name to filter with.
	Name string `pulumi:"name"`
	// One or more values filter with.
	Values []string `pulumi:"values"`
}

// GetVpcFilterInput is an input type that accepts GetVpcFilterArgs and GetVpcFilterOutput values.
// You can construct a concrete instance of `GetVpcFilterInput` via:
//
//	GetVpcFilterArgs{...}
type GetVpcFilterInput interface {
	pulumi.Input

	ToGetVpcFilterOutput() GetVpcFilterOutput
	ToGetVpcFilterOutputWithContext(context.Context) GetVpcFilterOutput
}

type GetVpcFilterArgs struct {
	// Attribute name to filter with.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more values filter with.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetVpcFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcFilter)(nil)).Elem()
}

func (i GetVpcFilterArgs) ToGetVpcFilterOutput() GetVpcFilterOutput {
	return i.ToGetVpcFilterOutputWithContext(context.Background())
}

func (i GetVpcFilterArgs) ToGetVpcFilterOutputWithContext(ctx context.Context) GetVpcFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcFilterOutput)
}

// GetVpcFilterArrayInput is an input type that accepts GetVpcFilterArray and GetVpcFilterArrayOutput values.
// You can construct a concrete instance of `GetVpcFilterArrayInput` via:
//
//	GetVpcFilterArray{ GetVpcFilterArgs{...} }
type GetVpcFilterArrayInput interface {
	pulumi.Input

	ToGetVpcFilterArrayOutput() GetVpcFilterArrayOutput
	ToGetVpcFilterArrayOutputWithContext(context.Context) GetVpcFilterArrayOutput
}

type GetVpcFilterArray []GetVpcFilterInput

func (GetVpcFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcFilter)(nil)).Elem()
}

func (i GetVpcFilterArray) ToGetVpcFilterArrayOutput() GetVpcFilterArrayOutput {
	return i.ToGetVpcFilterArrayOutputWithContext(context.Background())
}

func (i GetVpcFilterArray) ToGetVpcFilterArrayOutputWithContext(ctx context.Context) GetVpcFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcFilterArrayOutput)
}

type GetVpcFilterOutput struct{ *pulumi.OutputState }

func (GetVpcFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcFilter)(nil)).Elem()
}

func (o GetVpcFilterOutput) ToGetVpcFilterOutput() GetVpcFilterOutput {
	return o
}

func (o GetVpcFilterOutput) ToGetVpcFilterOutputWithContext(ctx context.Context) GetVpcFilterOutput {
	return o
}

// Attribute name to filter with.
func (o GetVpcFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more values filter with.
func (o GetVpcFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVpcFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetVpcFilterArrayOutput struct{ *pulumi.OutputState }

func (GetVpcFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcFilter)(nil)).Elem()
}

func (o GetVpcFilterArrayOutput) ToGetVpcFilterArrayOutput() GetVpcFilterArrayOutput {
	return o
}

func (o GetVpcFilterArrayOutput) ToGetVpcFilterArrayOutputWithContext(ctx context.Context) GetVpcFilterArrayOutput {
	return o
}

func (o GetVpcFilterArrayOutput) Index(i pulumi.IntInput) GetVpcFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcFilter {
		return vs[0].([]GetVpcFilter)[vs[1].(int)]
	}).(GetVpcFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupsScheduleInput)(nil)).Elem(), InstanceBackupsScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupsSchedulePtrInput)(nil)).Elem(), InstanceBackupsScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolsTypeInput)(nil)).Elem(), KubernetesNodePoolsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolsTypePtrInput)(nil)).Elem(), KubernetesNodePoolsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolsNodeInput)(nil)).Elem(), KubernetesNodePoolsNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolsNodeArrayInput)(nil)).Elem(), KubernetesNodePoolsNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerFirewallRuleInput)(nil)).Elem(), LoadBalancerFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerFirewallRuleArrayInput)(nil)).Elem(), LoadBalancerFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerForwardingRuleInput)(nil)).Elem(), LoadBalancerForwardingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerForwardingRuleArrayInput)(nil)).Elem(), LoadBalancerForwardingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerHealthCheckInput)(nil)).Elem(), LoadBalancerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerHealthCheckPtrInput)(nil)).Elem(), LoadBalancerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerSslInput)(nil)).Elem(), LoadBalancerSslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerSslPtrInput)(nil)).Elem(), LoadBalancerSslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationFilterInput)(nil)).Elem(), GetApplicationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationFilterArrayInput)(nil)).Elem(), GetApplicationFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallGroupFilterInput)(nil)).Elem(), GetFirewallGroupFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallGroupFilterArrayInput)(nil)).Elem(), GetFirewallGroupFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFilterInput)(nil)).Elem(), GetInstanceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceFilterArrayInput)(nil)).Elem(), GetInstanceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceIpv4FilterInput)(nil)).Elem(), GetInstanceIpv4FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceIpv4FilterArrayInput)(nil)).Elem(), GetInstanceIpv4FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIsoPrivateFilterInput)(nil)).Elem(), GetIsoPrivateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIsoPrivateFilterArrayInput)(nil)).Elem(), GetIsoPrivateFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIsoPublicFilterInput)(nil)).Elem(), GetIsoPublicFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIsoPublicFilterArrayInput)(nil)).Elem(), GetIsoPublicFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesFilterInput)(nil)).Elem(), GetKubernetesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesFilterArrayInput)(nil)).Elem(), GetKubernetesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesNodePoolInput)(nil)).Elem(), GetKubernetesNodePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesNodePoolArrayInput)(nil)).Elem(), GetKubernetesNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesNodePoolNodeInput)(nil)).Elem(), GetKubernetesNodePoolNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKubernetesNodePoolNodeArrayInput)(nil)).Elem(), GetKubernetesNodePoolNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerFilterInput)(nil)).Elem(), GetLoadBalancerFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerFilterArrayInput)(nil)).Elem(), GetLoadBalancerFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectStorageClusterFilterInput)(nil)).Elem(), GetObjectStorageClusterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectStorageClusterFilterArrayInput)(nil)).Elem(), GetObjectStorageClusterFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectStorageFilterInput)(nil)).Elem(), GetObjectStorageFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectStorageFilterArrayInput)(nil)).Elem(), GetObjectStorageFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOsFilterInput)(nil)).Elem(), GetOsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOsFilterArrayInput)(nil)).Elem(), GetOsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPlanFilterInput)(nil)).Elem(), GetPlanFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPlanFilterArrayInput)(nil)).Elem(), GetPlanFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateNetworkFilterInput)(nil)).Elem(), GetPrivateNetworkFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateNetworkFilterArrayInput)(nil)).Elem(), GetPrivateNetworkFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionFilterInput)(nil)).Elem(), GetRegionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionFilterArrayInput)(nil)).Elem(), GetRegionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReservedIpFilterInput)(nil)).Elem(), GetReservedIpFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReservedIpFilterArrayInput)(nil)).Elem(), GetReservedIpFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReverseIpv4FilterInput)(nil)).Elem(), GetReverseIpv4FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReverseIpv4FilterArrayInput)(nil)).Elem(), GetReverseIpv4FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReverseIpv6FilterInput)(nil)).Elem(), GetReverseIpv6FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReverseIpv6FilterArrayInput)(nil)).Elem(), GetReverseIpv6FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotFilterInput)(nil)).Elem(), GetSnapshotFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotFilterArrayInput)(nil)).Elem(), GetSnapshotFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshKeyFilterInput)(nil)).Elem(), GetSshKeyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshKeyFilterArrayInput)(nil)).Elem(), GetSshKeyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStartupScriptFilterInput)(nil)).Elem(), GetStartupScriptFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStartupScriptFilterArrayInput)(nil)).Elem(), GetStartupScriptFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserFilterInput)(nil)).Elem(), GetUserFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserFilterArrayInput)(nil)).Elem(), GetUserFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcFilterInput)(nil)).Elem(), GetVpcFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcFilterArrayInput)(nil)).Elem(), GetVpcFilterArray{})
	pulumi.RegisterOutputType(InstanceBackupsScheduleOutput{})
	pulumi.RegisterOutputType(InstanceBackupsSchedulePtrOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolsTypeOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolsTypePtrOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolsNodeOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolsNodeArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerFirewallRuleOutput{})
	pulumi.RegisterOutputType(LoadBalancerFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerForwardingRuleOutput{})
	pulumi.RegisterOutputType(LoadBalancerForwardingRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerSslOutput{})
	pulumi.RegisterOutputType(LoadBalancerSslPtrOutput{})
	pulumi.RegisterOutputType(GetApplicationFilterOutput{})
	pulumi.RegisterOutputType(GetApplicationFilterArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallGroupFilterOutput{})
	pulumi.RegisterOutputType(GetFirewallGroupFilterArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceFilterOutput{})
	pulumi.RegisterOutputType(GetInstanceFilterArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceIpv4FilterOutput{})
	pulumi.RegisterOutputType(GetInstanceIpv4FilterArrayOutput{})
	pulumi.RegisterOutputType(GetIsoPrivateFilterOutput{})
	pulumi.RegisterOutputType(GetIsoPrivateFilterArrayOutput{})
	pulumi.RegisterOutputType(GetIsoPublicFilterOutput{})
	pulumi.RegisterOutputType(GetIsoPublicFilterArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesFilterOutput{})
	pulumi.RegisterOutputType(GetKubernetesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesNodePoolOutput{})
	pulumi.RegisterOutputType(GetKubernetesNodePoolArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesNodePoolNodeOutput{})
	pulumi.RegisterOutputType(GetKubernetesNodePoolNodeArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerFilterOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerFilterArrayOutput{})
	pulumi.RegisterOutputType(GetObjectStorageClusterFilterOutput{})
	pulumi.RegisterOutputType(GetObjectStorageClusterFilterArrayOutput{})
	pulumi.RegisterOutputType(GetObjectStorageFilterOutput{})
	pulumi.RegisterOutputType(GetObjectStorageFilterArrayOutput{})
	pulumi.RegisterOutputType(GetOsFilterOutput{})
	pulumi.RegisterOutputType(GetOsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPlanFilterOutput{})
	pulumi.RegisterOutputType(GetPlanFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateNetworkFilterOutput{})
	pulumi.RegisterOutputType(GetPrivateNetworkFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRegionFilterOutput{})
	pulumi.RegisterOutputType(GetRegionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetReservedIpFilterOutput{})
	pulumi.RegisterOutputType(GetReservedIpFilterArrayOutput{})
	pulumi.RegisterOutputType(GetReverseIpv4FilterOutput{})
	pulumi.RegisterOutputType(GetReverseIpv4FilterArrayOutput{})
	pulumi.RegisterOutputType(GetReverseIpv6FilterOutput{})
	pulumi.RegisterOutputType(GetReverseIpv6FilterArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotFilterOutput{})
	pulumi.RegisterOutputType(GetSnapshotFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSshKeyFilterOutput{})
	pulumi.RegisterOutputType(GetSshKeyFilterArrayOutput{})
	pulumi.RegisterOutputType(GetStartupScriptFilterOutput{})
	pulumi.RegisterOutputType(GetStartupScriptFilterArrayOutput{})
	pulumi.RegisterOutputType(GetUserFilterOutput{})
	pulumi.RegisterOutputType(GetUserFilterArrayOutput{})
	pulumi.RegisterOutputType(GetVpcFilterOutput{})
	pulumi.RegisterOutputType(GetVpcFilterArrayOutput{})
}
