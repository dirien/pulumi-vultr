// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr startup script. This data source provides the name, script, type, creation date, and the last modification date for your Vultr startup script.
//
// ## Example Usage
//
// Get the information for a startup script by `name`:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.LookupStartupScript(ctx, &vultr.LookupStartupScriptArgs{
//				Filters: []vultr.GetStartupScriptFilter{
//					{
//						Name: "name",
//						Values: []string{
//							"my-startup-script-name",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStartupScript(ctx *pulumi.Context, args *LookupStartupScriptArgs, opts ...pulumi.InvokeOption) (*LookupStartupScriptResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupStartupScriptResult
	err := ctx.Invoke("vultr:index/getStartupScript:getStartupScript", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStartupScript.
type LookupStartupScriptArgs struct {
	// Query parameters for finding startup scripts.
	Filters []GetStartupScriptFilter `pulumi:"filters"`
}

// A collection of values returned by getStartupScript.
type LookupStartupScriptResult struct {
	// The date the startup script was added to your Vultr account.
	DateCreated string `pulumi:"dateCreated"`
	// The date the startup script was last modified.
	DateModified string                   `pulumi:"dateModified"`
	Filters      []GetStartupScriptFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the startup script.
	Name string `pulumi:"name"`
	// The contents of the startup script base64 encoded.
	Script string `pulumi:"script"`
	// The type of the startup script.
	Type string `pulumi:"type"`
}

func LookupStartupScriptOutput(ctx *pulumi.Context, args LookupStartupScriptOutputArgs, opts ...pulumi.InvokeOption) LookupStartupScriptResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStartupScriptResult, error) {
			args := v.(LookupStartupScriptArgs)
			r, err := LookupStartupScript(ctx, &args, opts...)
			var s LookupStartupScriptResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStartupScriptResultOutput)
}

// A collection of arguments for invoking getStartupScript.
type LookupStartupScriptOutputArgs struct {
	// Query parameters for finding startup scripts.
	Filters GetStartupScriptFilterArrayInput `pulumi:"filters"`
}

func (LookupStartupScriptOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStartupScriptArgs)(nil)).Elem()
}

// A collection of values returned by getStartupScript.
type LookupStartupScriptResultOutput struct{ *pulumi.OutputState }

func (LookupStartupScriptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStartupScriptResult)(nil)).Elem()
}

func (o LookupStartupScriptResultOutput) ToLookupStartupScriptResultOutput() LookupStartupScriptResultOutput {
	return o
}

func (o LookupStartupScriptResultOutput) ToLookupStartupScriptResultOutputWithContext(ctx context.Context) LookupStartupScriptResultOutput {
	return o
}

// The date the startup script was added to your Vultr account.
func (o LookupStartupScriptResultOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.DateCreated }).(pulumi.StringOutput)
}

// The date the startup script was last modified.
func (o LookupStartupScriptResultOutput) DateModified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.DateModified }).(pulumi.StringOutput)
}

func (o LookupStartupScriptResultOutput) Filters() GetStartupScriptFilterArrayOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) []GetStartupScriptFilter { return v.Filters }).(GetStartupScriptFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStartupScriptResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the startup script.
func (o LookupStartupScriptResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.Name }).(pulumi.StringOutput)
}

// The contents of the startup script base64 encoded.
func (o LookupStartupScriptResultOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.Script }).(pulumi.StringOutput)
}

// The type of the startup script.
func (o LookupStartupScriptResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStartupScriptResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStartupScriptResultOutput{})
}
