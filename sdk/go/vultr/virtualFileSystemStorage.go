// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr virtual file system storage resource. This can be used to create, read, modify and delete a virtual file system storage.
//
// ## Example Usage
//
// Define a virtual file system storage resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.NewVirtualFileSystemStorage(ctx, "myVfsStorage", &vultr.VirtualFileSystemStorageArgs{
//				Label:  pulumi.String("vultr-vfs-storage"),
//				Region: pulumi.String("ewr"),
//				SizeGb: pulumi.Int(10),
//				Tags: pulumi.StringArray{
//					pulumi.String("terraform"),
//					pulumi.String("important"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual file system storage can be imported using the `ID`, e.g.
//
// ```sh
// $ pulumi import vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage my_vfs_storage 79210a84-bc58-494f-8dd1-953685654f7f
// ```
type VirtualFileSystemStorage struct {
	pulumi.CustomResourceState

	// A list of UUIDs to attach to the virtual file system storage subscription.
	AttachedInstances pulumi.StringArrayOutput `pulumi:"attachedInstances"`
	// A list of attchment states for instances currently attached to the virtual file system storage.
	Attachments VirtualFileSystemStorageAttachmentArrayOutput `pulumi:"attachments"`
	// The current pending charges for the virtual file system storage subscription in USD.
	Charges pulumi.Float64Output `pulumi:"charges"`
	// The cost per month of the virtual file system storage subscription in USD.
	Cost pulumi.Float64Output `pulumi:"cost"`
	// The date the virtual file system storage subscription was added to your Vultr account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// The label to give to the virtual file system storage subscription.
	Label pulumi.StringOutput `pulumi:"label"`
	// The region in which this virtual file system storage will reside.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the given virtual file system storage subscription.
	SizeGb pulumi.IntOutput `pulumi:"sizeGb"`
	// The status of the virtual file system storage subscription.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of tags to be used on the virtual file system storage subscription.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewVirtualFileSystemStorage registers a new resource with the given unique name, arguments, and options.
func NewVirtualFileSystemStorage(ctx *pulumi.Context,
	name string, args *VirtualFileSystemStorageArgs, opts ...pulumi.ResourceOption) (*VirtualFileSystemStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SizeGb == nil {
		return nil, errors.New("invalid value for required argument 'SizeGb'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualFileSystemStorage
	err := ctx.RegisterResource("vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualFileSystemStorage gets an existing VirtualFileSystemStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualFileSystemStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualFileSystemStorageState, opts ...pulumi.ResourceOption) (*VirtualFileSystemStorage, error) {
	var resource VirtualFileSystemStorage
	err := ctx.ReadResource("vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualFileSystemStorage resources.
type virtualFileSystemStorageState struct {
	// A list of UUIDs to attach to the virtual file system storage subscription.
	AttachedInstances []string `pulumi:"attachedInstances"`
	// A list of attchment states for instances currently attached to the virtual file system storage.
	Attachments []VirtualFileSystemStorageAttachment `pulumi:"attachments"`
	// The current pending charges for the virtual file system storage subscription in USD.
	Charges *float64 `pulumi:"charges"`
	// The cost per month of the virtual file system storage subscription in USD.
	Cost *float64 `pulumi:"cost"`
	// The date the virtual file system storage subscription was added to your Vultr account.
	DateCreated *string `pulumi:"dateCreated"`
	// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
	DiskType *string `pulumi:"diskType"`
	// The label to give to the virtual file system storage subscription.
	Label *string `pulumi:"label"`
	// The region in which this virtual file system storage will reside.
	Region *string `pulumi:"region"`
	// The size of the given virtual file system storage subscription.
	SizeGb *int `pulumi:"sizeGb"`
	// The status of the virtual file system storage subscription.
	Status *string `pulumi:"status"`
	// A list of tags to be used on the virtual file system storage subscription.
	Tags []string `pulumi:"tags"`
}

type VirtualFileSystemStorageState struct {
	// A list of UUIDs to attach to the virtual file system storage subscription.
	AttachedInstances pulumi.StringArrayInput
	// A list of attchment states for instances currently attached to the virtual file system storage.
	Attachments VirtualFileSystemStorageAttachmentArrayInput
	// The current pending charges for the virtual file system storage subscription in USD.
	Charges pulumi.Float64PtrInput
	// The cost per month of the virtual file system storage subscription in USD.
	Cost pulumi.Float64PtrInput
	// The date the virtual file system storage subscription was added to your Vultr account.
	DateCreated pulumi.StringPtrInput
	// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
	DiskType pulumi.StringPtrInput
	// The label to give to the virtual file system storage subscription.
	Label pulumi.StringPtrInput
	// The region in which this virtual file system storage will reside.
	Region pulumi.StringPtrInput
	// The size of the given virtual file system storage subscription.
	SizeGb pulumi.IntPtrInput
	// The status of the virtual file system storage subscription.
	Status pulumi.StringPtrInput
	// A list of tags to be used on the virtual file system storage subscription.
	Tags pulumi.StringArrayInput
}

func (VirtualFileSystemStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualFileSystemStorageState)(nil)).Elem()
}

type virtualFileSystemStorageArgs struct {
	// A list of UUIDs to attach to the virtual file system storage subscription.
	AttachedInstances []string `pulumi:"attachedInstances"`
	// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
	DiskType *string `pulumi:"diskType"`
	// The label to give to the virtual file system storage subscription.
	Label string `pulumi:"label"`
	// The region in which this virtual file system storage will reside.
	Region string `pulumi:"region"`
	// The size of the given virtual file system storage subscription.
	SizeGb int `pulumi:"sizeGb"`
	// A list of tags to be used on the virtual file system storage subscription.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualFileSystemStorage resource.
type VirtualFileSystemStorageArgs struct {
	// A list of UUIDs to attach to the virtual file system storage subscription.
	AttachedInstances pulumi.StringArrayInput
	// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
	DiskType pulumi.StringPtrInput
	// The label to give to the virtual file system storage subscription.
	Label pulumi.StringInput
	// The region in which this virtual file system storage will reside.
	Region pulumi.StringInput
	// The size of the given virtual file system storage subscription.
	SizeGb pulumi.IntInput
	// A list of tags to be used on the virtual file system storage subscription.
	Tags pulumi.StringArrayInput
}

func (VirtualFileSystemStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualFileSystemStorageArgs)(nil)).Elem()
}

type VirtualFileSystemStorageInput interface {
	pulumi.Input

	ToVirtualFileSystemStorageOutput() VirtualFileSystemStorageOutput
	ToVirtualFileSystemStorageOutputWithContext(ctx context.Context) VirtualFileSystemStorageOutput
}

func (*VirtualFileSystemStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualFileSystemStorage)(nil)).Elem()
}

func (i *VirtualFileSystemStorage) ToVirtualFileSystemStorageOutput() VirtualFileSystemStorageOutput {
	return i.ToVirtualFileSystemStorageOutputWithContext(context.Background())
}

func (i *VirtualFileSystemStorage) ToVirtualFileSystemStorageOutputWithContext(ctx context.Context) VirtualFileSystemStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualFileSystemStorageOutput)
}

// VirtualFileSystemStorageArrayInput is an input type that accepts VirtualFileSystemStorageArray and VirtualFileSystemStorageArrayOutput values.
// You can construct a concrete instance of `VirtualFileSystemStorageArrayInput` via:
//
//	VirtualFileSystemStorageArray{ VirtualFileSystemStorageArgs{...} }
type VirtualFileSystemStorageArrayInput interface {
	pulumi.Input

	ToVirtualFileSystemStorageArrayOutput() VirtualFileSystemStorageArrayOutput
	ToVirtualFileSystemStorageArrayOutputWithContext(context.Context) VirtualFileSystemStorageArrayOutput
}

type VirtualFileSystemStorageArray []VirtualFileSystemStorageInput

func (VirtualFileSystemStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualFileSystemStorage)(nil)).Elem()
}

func (i VirtualFileSystemStorageArray) ToVirtualFileSystemStorageArrayOutput() VirtualFileSystemStorageArrayOutput {
	return i.ToVirtualFileSystemStorageArrayOutputWithContext(context.Background())
}

func (i VirtualFileSystemStorageArray) ToVirtualFileSystemStorageArrayOutputWithContext(ctx context.Context) VirtualFileSystemStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualFileSystemStorageArrayOutput)
}

// VirtualFileSystemStorageMapInput is an input type that accepts VirtualFileSystemStorageMap and VirtualFileSystemStorageMapOutput values.
// You can construct a concrete instance of `VirtualFileSystemStorageMapInput` via:
//
//	VirtualFileSystemStorageMap{ "key": VirtualFileSystemStorageArgs{...} }
type VirtualFileSystemStorageMapInput interface {
	pulumi.Input

	ToVirtualFileSystemStorageMapOutput() VirtualFileSystemStorageMapOutput
	ToVirtualFileSystemStorageMapOutputWithContext(context.Context) VirtualFileSystemStorageMapOutput
}

type VirtualFileSystemStorageMap map[string]VirtualFileSystemStorageInput

func (VirtualFileSystemStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualFileSystemStorage)(nil)).Elem()
}

func (i VirtualFileSystemStorageMap) ToVirtualFileSystemStorageMapOutput() VirtualFileSystemStorageMapOutput {
	return i.ToVirtualFileSystemStorageMapOutputWithContext(context.Background())
}

func (i VirtualFileSystemStorageMap) ToVirtualFileSystemStorageMapOutputWithContext(ctx context.Context) VirtualFileSystemStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualFileSystemStorageMapOutput)
}

type VirtualFileSystemStorageOutput struct{ *pulumi.OutputState }

func (VirtualFileSystemStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualFileSystemStorage)(nil)).Elem()
}

func (o VirtualFileSystemStorageOutput) ToVirtualFileSystemStorageOutput() VirtualFileSystemStorageOutput {
	return o
}

func (o VirtualFileSystemStorageOutput) ToVirtualFileSystemStorageOutputWithContext(ctx context.Context) VirtualFileSystemStorageOutput {
	return o
}

// A list of UUIDs to attach to the virtual file system storage subscription.
func (o VirtualFileSystemStorageOutput) AttachedInstances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringArrayOutput { return v.AttachedInstances }).(pulumi.StringArrayOutput)
}

// A list of attchment states for instances currently attached to the virtual file system storage.
func (o VirtualFileSystemStorageOutput) Attachments() VirtualFileSystemStorageAttachmentArrayOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) VirtualFileSystemStorageAttachmentArrayOutput { return v.Attachments }).(VirtualFileSystemStorageAttachmentArrayOutput)
}

// The current pending charges for the virtual file system storage subscription in USD.
func (o VirtualFileSystemStorageOutput) Charges() pulumi.Float64Output {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.Float64Output { return v.Charges }).(pulumi.Float64Output)
}

// The cost per month of the virtual file system storage subscription in USD.
func (o VirtualFileSystemStorageOutput) Cost() pulumi.Float64Output {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.Float64Output { return v.Cost }).(pulumi.Float64Output)
}

// The date the virtual file system storage subscription was added to your Vultr account.
func (o VirtualFileSystemStorageOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
func (o VirtualFileSystemStorageOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringPtrOutput { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The label to give to the virtual file system storage subscription.
func (o VirtualFileSystemStorageOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The region in which this virtual file system storage will reside.
func (o VirtualFileSystemStorageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the given virtual file system storage subscription.
func (o VirtualFileSystemStorageOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.IntOutput { return v.SizeGb }).(pulumi.IntOutput)
}

// The status of the virtual file system storage subscription.
func (o VirtualFileSystemStorageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A list of tags to be used on the virtual file system storage subscription.
func (o VirtualFileSystemStorageOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualFileSystemStorage) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type VirtualFileSystemStorageArrayOutput struct{ *pulumi.OutputState }

func (VirtualFileSystemStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualFileSystemStorage)(nil)).Elem()
}

func (o VirtualFileSystemStorageArrayOutput) ToVirtualFileSystemStorageArrayOutput() VirtualFileSystemStorageArrayOutput {
	return o
}

func (o VirtualFileSystemStorageArrayOutput) ToVirtualFileSystemStorageArrayOutputWithContext(ctx context.Context) VirtualFileSystemStorageArrayOutput {
	return o
}

func (o VirtualFileSystemStorageArrayOutput) Index(i pulumi.IntInput) VirtualFileSystemStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualFileSystemStorage {
		return vs[0].([]*VirtualFileSystemStorage)[vs[1].(int)]
	}).(VirtualFileSystemStorageOutput)
}

type VirtualFileSystemStorageMapOutput struct{ *pulumi.OutputState }

func (VirtualFileSystemStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualFileSystemStorage)(nil)).Elem()
}

func (o VirtualFileSystemStorageMapOutput) ToVirtualFileSystemStorageMapOutput() VirtualFileSystemStorageMapOutput {
	return o
}

func (o VirtualFileSystemStorageMapOutput) ToVirtualFileSystemStorageMapOutputWithContext(ctx context.Context) VirtualFileSystemStorageMapOutput {
	return o
}

func (o VirtualFileSystemStorageMapOutput) MapIndex(k pulumi.StringInput) VirtualFileSystemStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualFileSystemStorage {
		return vs[0].(map[string]*VirtualFileSystemStorage)[vs[1].(string)]
	}).(VirtualFileSystemStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualFileSystemStorageInput)(nil)).Elem(), &VirtualFileSystemStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualFileSystemStorageArrayInput)(nil)).Elem(), VirtualFileSystemStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualFileSystemStorageMapInput)(nil)).Elem(), VirtualFileSystemStorageMap{})
	pulumi.RegisterOutputType(VirtualFileSystemStorageOutput{})
	pulumi.RegisterOutputType(VirtualFileSystemStorageArrayOutput{})
	pulumi.RegisterOutputType(VirtualFileSystemStorageMapOutput{})
}
