// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr region.
//
// ## Example Usage
//
// Get the information for a region by `id`:
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-vultr/sdk/v2/go/vultr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.GetRegion(ctx, &vultr.GetRegionArgs{
//				Filters: []vultr.GetRegionFilter{
//					{
//						Name: "id",
//						Values: []string{
//							"sea",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRegion(ctx *pulumi.Context, args *GetRegionArgs, opts ...pulumi.InvokeOption) (*GetRegionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionResult
	err := ctx.Invoke("vultr:index/getRegion:getRegion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegion.
type GetRegionArgs struct {
	// Query parameters for finding regions.
	Filters []GetRegionFilter `pulumi:"filters"`
}

// A collection of values returned by getRegion.
type GetRegionResult struct {
	// The city the region is in.
	City string `pulumi:"city"`
	// The continent the region is in.
	Continent string `pulumi:"continent"`
	// The country the region is in.
	Country string            `pulumi:"country"`
	Filters []GetRegionFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Shows whether options like ddos protection or block storage are available in the region.
	Options []string `pulumi:"options"`
}

func GetRegionOutput(ctx *pulumi.Context, args GetRegionOutputArgs, opts ...pulumi.InvokeOption) GetRegionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRegionResultOutput, error) {
			args := v.(GetRegionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetRegionResult
			secret, err := ctx.InvokePackageRaw("vultr:index/getRegion:getRegion", args, &rv, "", opts...)
			if err != nil {
				return GetRegionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetRegionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetRegionResultOutput), nil
			}
			return output, nil
		}).(GetRegionResultOutput)
}

// A collection of arguments for invoking getRegion.
type GetRegionOutputArgs struct {
	// Query parameters for finding regions.
	Filters GetRegionFilterArrayInput `pulumi:"filters"`
}

func (GetRegionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionArgs)(nil)).Elem()
}

// A collection of values returned by getRegion.
type GetRegionResultOutput struct{ *pulumi.OutputState }

func (GetRegionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionResult)(nil)).Elem()
}

func (o GetRegionResultOutput) ToGetRegionResultOutput() GetRegionResultOutput {
	return o
}

func (o GetRegionResultOutput) ToGetRegionResultOutputWithContext(ctx context.Context) GetRegionResultOutput {
	return o
}

// The city the region is in.
func (o GetRegionResultOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.City }).(pulumi.StringOutput)
}

// The continent the region is in.
func (o GetRegionResultOutput) Continent() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.Continent }).(pulumi.StringOutput)
}

// The country the region is in.
func (o GetRegionResultOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.Country }).(pulumi.StringOutput)
}

func (o GetRegionResultOutput) Filters() GetRegionFilterArrayOutput {
	return o.ApplyT(func(v GetRegionResult) []GetRegionFilter { return v.Filters }).(GetRegionFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Shows whether options like ddos protection or block storage are available in the region.
func (o GetRegionResultOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionResult) []string { return v.Options }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionResultOutput{})
}
