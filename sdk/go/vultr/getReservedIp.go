// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr reserved IP address.
//
// ## Example Usage
//
// Get the information for a reserved IP by `label`:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vultr/sdk/go/vultr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vultr.LookupReservedIp(ctx, &vultr.LookupReservedIpArgs{
//				Filters: []vultr.GetReservedIpFilter{
//					{
//						Name: "label",
//						Values: []string{
//							"my-reserved-ip-label",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupReservedIp(ctx *pulumi.Context, args *LookupReservedIpArgs, opts ...pulumi.InvokeOption) (*LookupReservedIpResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupReservedIpResult
	err := ctx.Invoke("vultr:index/getReservedIp:getReservedIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedIp.
type LookupReservedIpArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters []GetReservedIpFilter `pulumi:"filters"`
}

// A collection of values returned by getReservedIp.
type LookupReservedIpResult struct {
	Filters []GetReservedIpFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the VPS the reserved IP is attached to.
	InstanceId string `pulumi:"instanceId"`
	// The IP type of the reserved IP.
	IpType string `pulumi:"ipType"`
	// The label of the reserved IP.
	Label string `pulumi:"label"`
	// The ID of the region that the reserved IP is in.
	Region string `pulumi:"region"`
	// The subnet of the reserved IP.
	Subnet string `pulumi:"subnet"`
	// The subnet size of the reserved IP.
	SubnetSize int `pulumi:"subnetSize"`
}

func LookupReservedIpOutput(ctx *pulumi.Context, args LookupReservedIpOutputArgs, opts ...pulumi.InvokeOption) LookupReservedIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReservedIpResult, error) {
			args := v.(LookupReservedIpArgs)
			r, err := LookupReservedIp(ctx, &args, opts...)
			var s LookupReservedIpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReservedIpResultOutput)
}

// A collection of arguments for invoking getReservedIp.
type LookupReservedIpOutputArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters GetReservedIpFilterArrayInput `pulumi:"filters"`
}

func (LookupReservedIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIpArgs)(nil)).Elem()
}

// A collection of values returned by getReservedIp.
type LookupReservedIpResultOutput struct{ *pulumi.OutputState }

func (LookupReservedIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIpResult)(nil)).Elem()
}

func (o LookupReservedIpResultOutput) ToLookupReservedIpResultOutput() LookupReservedIpResultOutput {
	return o
}

func (o LookupReservedIpResultOutput) ToLookupReservedIpResultOutputWithContext(ctx context.Context) LookupReservedIpResultOutput {
	return o
}

func (o LookupReservedIpResultOutput) Filters() GetReservedIpFilterArrayOutput {
	return o.ApplyT(func(v LookupReservedIpResult) []GetReservedIpFilter { return v.Filters }).(GetReservedIpFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupReservedIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the VPS the reserved IP is attached to.
func (o LookupReservedIpResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP type of the reserved IP.
func (o LookupReservedIpResultOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.IpType }).(pulumi.StringOutput)
}

// The label of the reserved IP.
func (o LookupReservedIpResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Label }).(pulumi.StringOutput)
}

// The ID of the region that the reserved IP is in.
func (o LookupReservedIpResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Region }).(pulumi.StringOutput)
}

// The subnet of the reserved IP.
func (o LookupReservedIpResultOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Subnet }).(pulumi.StringOutput)
}

// The subnet size of the reserved IP.
func (o LookupReservedIpResultOutput) SubnetSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReservedIpResult) int { return v.SubnetSize }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReservedIpResultOutput{})
}
