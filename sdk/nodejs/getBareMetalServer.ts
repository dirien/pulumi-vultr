// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr bare metal server.
 *
 * ## Example Usage
 *
 * Get the information for a server by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myServer = vultr.getBareMetalServer({
 *     filters: [{
 *         name: "label",
 *         values: ["my-server-label"],
 *     }],
 * });
 * ```
 */
export function getBareMetalServer(args?: GetBareMetalServerArgs, opts?: pulumi.InvokeOptions): Promise<GetBareMetalServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getBareMetalServer:getBareMetalServer", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getBareMetalServer.
 */
export interface GetBareMetalServerArgs {
    /**
     * Query parameters for finding servers.
     */
    filters?: inputs.GetBareMetalServerFilter[];
}

/**
 * A collection of values returned by getBareMetalServer.
 */
export interface GetBareMetalServerResult {
    /**
     * The server's application ID.
     */
    readonly appId: number;
    /**
     * The number of CPUs available on the server.
     */
    readonly cpuCount: number;
    /**
     * The date the server was added to your Vultr account.
     */
    readonly dateCreated: string;
    /**
     * The description of the disk(s) on the server.
     */
    readonly disk: string;
    readonly features: string[];
    readonly filters?: outputs.GetBareMetalServerFilter[];
    /**
     * The server's IPv4 gateway.
     */
    readonly gatewayV4: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Marketplace ID for this application.
     */
    readonly imageId: string;
    /**
     * The server's label.
     */
    readonly label: string;
    readonly macAddress: number;
    /**
     * The server's main IP address.
     */
    readonly mainIp: string;
    /**
     * The server's IPv4 netmask.
     */
    readonly netmaskV4: string;
    /**
     * The operating system of the server.
     */
    readonly os: string;
    /**
     * The server's operating system ID.
     */
    readonly osId: number;
    /**
     * The server's plan ID.
     */
    readonly plan: string;
    /**
     * The amount of memory available on the server in MB.
     */
    readonly ram: string;
    /**
     * The region ID of the server.
     */
    readonly region: string;
    /**
     * The status of the server's subscription.
     */
    readonly status: string;
    /**
     * A list of tags applied to the server.
     */
    readonly tags: string[];
    readonly v6MainIp: string;
    readonly v6Network: string;
    readonly v6NetworkSize: number;
    /**
     * A list of VPC 2.0 IDs attached to the server.
     */
    readonly vpc2Ids: string[];
}
/**
 * Get information about a Vultr bare metal server.
 *
 * ## Example Usage
 *
 * Get the information for a server by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myServer = vultr.getBareMetalServer({
 *     filters: [{
 *         name: "label",
 *         values: ["my-server-label"],
 *     }],
 * });
 * ```
 */
export function getBareMetalServerOutput(args?: GetBareMetalServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBareMetalServerResult> {
    return pulumi.output(args).apply((a: any) => getBareMetalServer(a, opts))
}

/**
 * A collection of arguments for invoking getBareMetalServer.
 */
export interface GetBareMetalServerOutputArgs {
    /**
     * Query parameters for finding servers.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetBareMetalServerFilterArgs>[]>;
}
