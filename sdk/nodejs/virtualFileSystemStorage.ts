// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Vultr virtual file system storage resource. This can be used to create, read, modify and delete a virtual file system storage.
 *
 * ## Example Usage
 *
 * Define a virtual file system storage resource:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myVfsStorage = new vultr.VirtualFileSystemStorage("myVfsStorage", {
 *     label: "vultr-vfs-storage",
 *     region: "ewr",
 *     sizeGb: 10,
 *     tags: [
 *         "terraform",
 *         "important",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Virtual file system storage can be imported using the `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage my_vfs_storage 79210a84-bc58-494f-8dd1-953685654f7f
 * ```
 */
export class VirtualFileSystemStorage extends pulumi.CustomResource {
    /**
     * Get an existing VirtualFileSystemStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualFileSystemStorageState, opts?: pulumi.CustomResourceOptions): VirtualFileSystemStorage {
        return new VirtualFileSystemStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage';

    /**
     * Returns true if the given object is an instance of VirtualFileSystemStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualFileSystemStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualFileSystemStorage.__pulumiType;
    }

    /**
     * A list of UUIDs to attach to the virtual file system storage subscription.
     */
    public readonly attachedInstances!: pulumi.Output<string[] | undefined>;
    /**
     * A list of attchment states for instances currently attached to the virtual file system storage.
     */
    public /*out*/ readonly attachments!: pulumi.Output<outputs.VirtualFileSystemStorageAttachment[]>;
    /**
     * The current pending charges for the virtual file system storage subscription in USD.
     */
    public /*out*/ readonly charges!: pulumi.Output<number>;
    /**
     * The cost per month of the virtual file system storage subscription in USD.
     */
    public /*out*/ readonly cost!: pulumi.Output<number>;
    /**
     * The date the virtual file system storage subscription was added to your Vultr account.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
     */
    public readonly diskType!: pulumi.Output<string | undefined>;
    /**
     * The label to give to the virtual file system storage subscription.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The region in which this virtual file system storage will reside.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The size of the given virtual file system storage subscription.
     */
    public readonly sizeGb!: pulumi.Output<number>;
    /**
     * The status of the virtual file system storage subscription.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A list of tags to be used on the virtual file system storage subscription.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VirtualFileSystemStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualFileSystemStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualFileSystemStorageArgs | VirtualFileSystemStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualFileSystemStorageState | undefined;
            resourceInputs["attachedInstances"] = state ? state.attachedInstances : undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["charges"] = state ? state.charges : undefined;
            resourceInputs["cost"] = state ? state.cost : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sizeGb"] = state ? state.sizeGb : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VirtualFileSystemStorageArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.sizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeGb'");
            }
            resourceInputs["attachedInstances"] = args ? args.attachedInstances : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sizeGb"] = args ? args.sizeGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["attachments"] = undefined /*out*/;
            resourceInputs["charges"] = undefined /*out*/;
            resourceInputs["cost"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualFileSystemStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualFileSystemStorage resources.
 */
export interface VirtualFileSystemStorageState {
    /**
     * A list of UUIDs to attach to the virtual file system storage subscription.
     */
    attachedInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of attchment states for instances currently attached to the virtual file system storage.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.VirtualFileSystemStorageAttachment>[]>;
    /**
     * The current pending charges for the virtual file system storage subscription in USD.
     */
    charges?: pulumi.Input<number>;
    /**
     * The cost per month of the virtual file system storage subscription in USD.
     */
    cost?: pulumi.Input<number>;
    /**
     * The date the virtual file system storage subscription was added to your Vultr account.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
     */
    diskType?: pulumi.Input<string>;
    /**
     * The label to give to the virtual file system storage subscription.
     */
    label?: pulumi.Input<string>;
    /**
     * The region in which this virtual file system storage will reside.
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the given virtual file system storage subscription.
     */
    sizeGb?: pulumi.Input<number>;
    /**
     * The status of the virtual file system storage subscription.
     */
    status?: pulumi.Input<string>;
    /**
     * A list of tags to be used on the virtual file system storage subscription.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VirtualFileSystemStorage resource.
 */
export interface VirtualFileSystemStorageArgs {
    /**
     * A list of UUIDs to attach to the virtual file system storage subscription.
     */
    attachedInstances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
     */
    diskType?: pulumi.Input<string>;
    /**
     * The label to give to the virtual file system storage subscription.
     */
    label: pulumi.Input<string>;
    /**
     * The region in which this virtual file system storage will reside.
     */
    region: pulumi.Input<string>;
    /**
     * The size of the given virtual file system storage subscription.
     */
    sizeGb: pulumi.Input<number>;
    /**
     * A list of tags to be used on the virtual file system storage subscription.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
