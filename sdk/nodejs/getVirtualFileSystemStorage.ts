// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr virtual file system storage subscription.
 *
 * ## Example Usage
 *
 * Get the information for a virtual file system storage subscription by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myVfsStorage = vultr.getVirtualFileSystemStorage({
 *     filters: [{
 *         name: "label",
 *         values: ["my-vfs-storage-label"],
 *     }],
 * });
 * ```
 */
export function getVirtualFileSystemStorage(args?: GetVirtualFileSystemStorageArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualFileSystemStorageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getVirtualFileSystemStorage:getVirtualFileSystemStorage", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualFileSystemStorage.
 */
export interface GetVirtualFileSystemStorageArgs {
    /**
     * Query parameters for finding virtual file system storage subscriptions.
     */
    filters?: inputs.GetVirtualFileSystemStorageFilter[];
}

/**
 * A collection of values returned by getVirtualFileSystemStorage.
 */
export interface GetVirtualFileSystemStorageResult {
    /**
     * A list of instance IDs currently attached to the virtual file system storage.
     */
    readonly attachedInstances: string[];
    /**
     * A list of attchment states for instances currently attached to the virtual file system storage.
     */
    readonly attachments: outputs.GetVirtualFileSystemStorageAttachment[];
    /**
     * The current pending charges for the virtual file system storage subscription in USD.
     */
    readonly charges: number;
    /**
     * The cost per month of the virtual file system storage subscription in USD.
     */
    readonly cost: number;
    /**
     * The date the virtual file system storage subscription was added to your Vultr account.
     */
    readonly dateCreated: string;
    /**
     * The underlying disk type used by the virtual file system storage subscription.
     */
    readonly diskType: string;
    readonly filters?: outputs.GetVirtualFileSystemStorageFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The label of the virtual file system storage subscription.
     */
    readonly label: string;
    /**
     * The region ID of the virtual file system storage subscription.
     */
    readonly region: string;
    /**
     * The size of the virtual file system storage subscription in GB.
     */
    readonly sizeGb: number;
    /**
     * The status of the virtual file system storage subscription.
     */
    readonly status: string;
    /**
     * A list of tags used on the virtual file system storage subscription.
     */
    readonly tags: string[];
}
/**
 * Get information about a Vultr virtual file system storage subscription.
 *
 * ## Example Usage
 *
 * Get the information for a virtual file system storage subscription by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myVfsStorage = vultr.getVirtualFileSystemStorage({
 *     filters: [{
 *         name: "label",
 *         values: ["my-vfs-storage-label"],
 *     }],
 * });
 * ```
 */
export function getVirtualFileSystemStorageOutput(args?: GetVirtualFileSystemStorageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualFileSystemStorageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vultr:index/getVirtualFileSystemStorage:getVirtualFileSystemStorage", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualFileSystemStorage.
 */
export interface GetVirtualFileSystemStorageOutputArgs {
    /**
     * Query parameters for finding virtual file system storage subscriptions.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVirtualFileSystemStorageFilterArgs>[]>;
}
