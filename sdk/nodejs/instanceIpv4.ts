// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr instance IPv4 resource. This can be used to create, read, and
 * modify a IPv4 address. instance is rebooted by default.
 *
 * ## Example Usage
 *
 * Create a new IPv4 address for a instance:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myInstance = new vultr.Instance("myInstance", {
 *     enableIpv6: true,
 *     osId: 167,
 *     plan: "vc2-1c-1gb",
 *     region: "ewr",
 * });
 * const myInstanceIpv4 = new vultr.InstanceIpv4("myInstanceIpv4", {
 *     instanceId: myInstance.id,
 *     reboot: false,
 * });
 * ```
 */
export class InstanceIpv4 extends pulumi.CustomResource {
    /**
     * Get an existing InstanceIpv4 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceIpv4State, opts?: pulumi.CustomResourceOptions): InstanceIpv4 {
        return new InstanceIpv4(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/instanceIpv4:InstanceIpv4';

    /**
     * Returns true if the given object is an instance of InstanceIpv4.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceIpv4 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceIpv4.__pulumiType;
    }

    /**
     * The gateway IP address.
     */
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    /**
     * The ID of the instance to be assigned the IPv4 address.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The IPv4 address in canonical format.
     */
    public /*out*/ readonly ip!: pulumi.Output<string>;
    /**
     * The IPv4 netmask in dot-decimal notation.
     */
    public /*out*/ readonly netmask!: pulumi.Output<string>;
    /**
     * Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     */
    public readonly reboot!: pulumi.Output<boolean | undefined>;
    /**
     * The reverse DNS information for this IP address.
     */
    public /*out*/ readonly reverse!: pulumi.Output<string>;

    /**
     * Create a InstanceIpv4 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceIpv4Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceIpv4Args | InstanceIpv4State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceIpv4State | undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["reboot"] = state ? state.reboot : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
        } else {
            const args = argsOrState as InstanceIpv4Args | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["reboot"] = args ? args.reboot : undefined;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["netmask"] = undefined /*out*/;
            resourceInputs["reverse"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceIpv4.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceIpv4 resources.
 */
export interface InstanceIpv4State {
    /**
     * The gateway IP address.
     */
    gateway?: pulumi.Input<string>;
    /**
     * The ID of the instance to be assigned the IPv4 address.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The IPv4 address in canonical format.
     */
    ip?: pulumi.Input<string>;
    /**
     * The IPv4 netmask in dot-decimal notation.
     */
    netmask?: pulumi.Input<string>;
    /**
     * Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     */
    reboot?: pulumi.Input<boolean>;
    /**
     * The reverse DNS information for this IP address.
     */
    reverse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceIpv4 resource.
 */
export interface InstanceIpv4Args {
    /**
     * The ID of the instance to be assigned the IPv4 address.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     */
    reboot?: pulumi.Input<boolean>;
}
