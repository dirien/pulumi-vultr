// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr VPC 2.0 resource. This can be used to create, read, and delete VPCs 2.0 on your Vultr account.
 *
 * ## Example Usage
 *
 * Create a new VPC 2.0 with an automatically generated CIDR block:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myVpc2 = new vultr.Vpc2("myVpc2", {
 *     description: "my vpc2",
 *     region: "ewr",
 * });
 * ```
 *
 * Create a new VPC 2.0 with a specified CIDR block:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myVpc2 = new vultr.Vpc2("myVpc2", {
 *     description: "my private vpc2",
 *     ipBlock: "10.0.0.0",
 *     prefixLength: 24,
 *     region: "ewr",
 * });
 * ```
 *
 * ## Import
 *
 * VPCs 2.0 can be imported using the VPC 2.0 `ID`, e.g.
 *
 * ```sh
 *  $ pulumi import vultr:index/vpc2:Vpc2 my_vpc2 0e04f918-575e-41cb-86f6-d729b354a5a1
 * ```
 */
export class Vpc2 extends pulumi.CustomResource {
    /**
     * Get an existing Vpc2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vpc2State, opts?: pulumi.CustomResourceOptions): Vpc2 {
        return new Vpc2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/vpc2:Vpc2';

    /**
     * Returns true if the given object is an instance of Vpc2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc2.__pulumiType;
    }

    /**
     * The date that the VPC 2.0 was added to your Vultr account.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * The description you want to give your VPC 2.0.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The IPv4 subnet to be used when attaching instances to this VPC 2.0.
     */
    public readonly ipBlock!: pulumi.Output<string | undefined>;
    /**
     * Accepted values: `v4`.
     */
    public readonly ipType!: pulumi.Output<string | undefined>;
    /**
     * The number of bits for the netmask in CIDR notation. Example: 32
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    /**
     * The region ID that you want the VPC 2.0 to be created in.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a Vpc2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vpc2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vpc2Args | Vpc2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vpc2State | undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipBlock"] = state ? state.ipBlock : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as Vpc2Args | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipBlock"] = args ? args.ipBlock : undefined;
            resourceInputs["ipType"] = args ? args.ipType : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["dateCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vpc2 resources.
 */
export interface Vpc2State {
    /**
     * The date that the VPC 2.0 was added to your Vultr account.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * The description you want to give your VPC 2.0.
     */
    description?: pulumi.Input<string>;
    /**
     * The IPv4 subnet to be used when attaching instances to this VPC 2.0.
     */
    ipBlock?: pulumi.Input<string>;
    /**
     * Accepted values: `v4`.
     */
    ipType?: pulumi.Input<string>;
    /**
     * The number of bits for the netmask in CIDR notation. Example: 32
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * The region ID that you want the VPC 2.0 to be created in.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpc2 resource.
 */
export interface Vpc2Args {
    /**
     * The description you want to give your VPC 2.0.
     */
    description?: pulumi.Input<string>;
    /**
     * The IPv4 subnet to be used when attaching instances to this VPC 2.0.
     */
    ipBlock?: pulumi.Input<string>;
    /**
     * Accepted values: `v4`.
     */
    ipType?: pulumi.Input<string>;
    /**
     * The number of bits for the netmask in CIDR notation. Example: 32
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * The region ID that you want the VPC 2.0 to be created in.
     */
    region: pulumi.Input<string>;
}
