// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr DNS Record resource. This can be used to create, read, modify, and delete DNS Records.
 *
 * ## Example Usage
 *
 * Create a new DNS Record
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myDomain = new vultr.DnsDomain("myDomain", {
 *     domain: "domain.com",
 *     ip: "66.42.94.227",
 * });
 * const myRecord = new vultr.DnsRecord("myRecord", {
 *     data: "66.42.94.227",
 *     domain: myDomain.id,
 *     type: "A",
 * });
 * ```
 *
 * ## Import
 *
 * DNS Records can be imported using the Dns Domain `domain` and DNS Record `ID` e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/dnsRecord:DnsRecord rec domain.com,1a0019bd-7645-4310-81bd-03bc5906940f
 * ```
 */
export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * IP Address of the instance the domain is associated with.
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * Name of the DNS Domain this record will belong to.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Name (subdomain) for this record.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority of this record (only required for MX and SRV).
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The time to live of this record.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * Type of record.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * IP Address of the instance the domain is associated with.
     */
    data?: pulumi.Input<string>;
    /**
     * Name of the DNS Domain this record will belong to.
     */
    domain?: pulumi.Input<string>;
    /**
     * Name (subdomain) for this record.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of this record (only required for MX and SRV).
     */
    priority?: pulumi.Input<number>;
    /**
     * The time to live of this record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Type of record.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * IP Address of the instance the domain is associated with.
     */
    data: pulumi.Input<string>;
    /**
     * Name of the DNS Domain this record will belong to.
     */
    domain: pulumi.Input<string>;
    /**
     * Name (subdomain) for this record.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of this record (only required for MX and SRV).
     */
    priority?: pulumi.Input<number>;
    /**
     * The time to live of this record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Type of record.
     */
    type: pulumi.Input<string>;
}
