// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr region.
 *
 * ## Example Usage
 *
 * Get the information for a region by `id`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myRegion = vultr.getRegion({
 *     filters: [{
 *         name: "id",
 *         values: ["sea"],
 *     }],
 * });
 * ```
 */
export function getRegion(args?: GetRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getRegion:getRegion", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionArgs {
    /**
     * Query parameters for finding regions.
     */
    filters?: inputs.GetRegionFilter[];
}

/**
 * A collection of values returned by getRegion.
 */
export interface GetRegionResult {
    /**
     * The city the region is in.
     */
    readonly city: string;
    /**
     * The continent the region is in.
     */
    readonly continent: string;
    /**
     * The country the region is in.
     */
    readonly country: string;
    readonly filters?: outputs.GetRegionFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Shows whether options like ddos protection or block storage are available in the region.
     */
    readonly options: string[];
}
/**
 * Get information about a Vultr region.
 *
 * ## Example Usage
 *
 * Get the information for a region by `id`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myRegion = vultr.getRegion({
 *     filters: [{
 *         name: "id",
 *         values: ["sea"],
 *     }],
 * });
 * ```
 */
export function getRegionOutput(args?: GetRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vultr:index/getRegion:getRegion", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionOutputArgs {
    /**
     * Query parameters for finding regions.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetRegionFilterArgs>[]>;
}
