// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr database connection pool resource. This can be used to create, read, modify, and delete connection pools for a PostgreSQL managed database on your Vultr account.
 *
 * ## Example Usage
 *
 * Create a new database connection pool:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myDatabaseConnectionPool = new vultr.DatabaseConnectionPool("myDatabaseConnectionPool", {
 *     databaseId: vultr_database.my_database.id,
 *     database: "defaultdb",
 *     username: "vultradmin",
 *     mode: "transaction",
 *     size: 3,
 * });
 * ```
 */
export class DatabaseConnectionPool extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseConnectionPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseConnectionPoolState, opts?: pulumi.CustomResourceOptions): DatabaseConnectionPool {
        return new DatabaseConnectionPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/databaseConnectionPool:DatabaseConnectionPool';

    /**
     * Returns true if the given object is an instance of DatabaseConnectionPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseConnectionPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseConnectionPool.__pulumiType;
    }

    /**
     * The logical database to use for the new managed database connection pool.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * The managed database ID you want to attach this connection pool to.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * The mode to configure for the new managed database connection pool (`session`, `transaction`, `statement`).
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The name of the new managed database connection pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The size of the new managed database connection pool.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The database user to use for the new managed database connection pool.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DatabaseConnectionPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseConnectionPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseConnectionPoolArgs | DatabaseConnectionPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseConnectionPoolState | undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DatabaseConnectionPoolArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseConnectionPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseConnectionPool resources.
 */
export interface DatabaseConnectionPoolState {
    /**
     * The logical database to use for the new managed database connection pool.
     */
    database?: pulumi.Input<string>;
    /**
     * The managed database ID you want to attach this connection pool to.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The mode to configure for the new managed database connection pool (`session`, `transaction`, `statement`).
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the new managed database connection pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the new managed database connection pool.
     */
    size?: pulumi.Input<number>;
    /**
     * The database user to use for the new managed database connection pool.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseConnectionPool resource.
 */
export interface DatabaseConnectionPoolArgs {
    /**
     * The logical database to use for the new managed database connection pool.
     */
    database: pulumi.Input<string>;
    /**
     * The managed database ID you want to attach this connection pool to.
     */
    databaseId: pulumi.Input<string>;
    /**
     * The mode to configure for the new managed database connection pool (`session`, `transaction`, `statement`).
     */
    mode: pulumi.Input<string>;
    /**
     * The name of the new managed database connection pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the new managed database connection pool.
     */
    size: pulumi.Input<number>;
    /**
     * The database user to use for the new managed database connection pool.
     */
    username: pulumi.Input<string>;
}
