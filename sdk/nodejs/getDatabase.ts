// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabase(args?: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getDatabase:getDatabase", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseArgs {
    filters?: inputs.GetDatabaseFilter[];
}

/**
 * A collection of values returned by getDatabase.
 */
export interface GetDatabaseResult {
    readonly clusterTimeZone: string;
    readonly databaseEngine: string;
    readonly databaseEngineVersion: string;
    readonly dateCreated: string;
    readonly dbname: string;
    readonly filters?: outputs.GetDatabaseFilter[];
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly label: string;
    readonly latestBackup: string;
    readonly maintenanceDow: string;
    readonly maintenanceTime: string;
    readonly mysqlLongQueryTime: number;
    readonly mysqlRequirePrimaryKey: boolean;
    readonly mysqlSlowQueryLog: boolean;
    readonly mysqlSqlModes: string[];
    readonly password: string;
    readonly plan: string;
    readonly planDisk: number;
    readonly planRam: number;
    readonly planReplicas: number;
    readonly planVcpus: number;
    readonly port: string;
    readonly readReplicas: outputs.GetDatabaseReadReplica[];
    readonly redisEvictionPolicy: string;
    readonly region: string;
    readonly status: string;
    readonly tag: string;
    readonly trustedIps: string[];
    readonly user: string;
}
export function getDatabaseOutput(args?: GetDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabase.
 */
export interface GetDatabaseOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseFilterArgs>[]>;
}
