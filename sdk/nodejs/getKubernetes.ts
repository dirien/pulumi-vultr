// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr Kubernetes Engine (VKE) Cluster.
 *
 * ## Example Usage
 *
 * Create a new VKE cluster:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myVke = vultr.getKubernetes({
 *     filters: [{
 *         name: "label",
 *         values: ["my-lb-label"],
 *     }],
 * });
 * ```
 */
export function getKubernetes(args?: GetKubernetesArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getKubernetes:getKubernetes", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetes.
 */
export interface GetKubernetesArgs {
    /**
     * Query parameters for finding VKE.
     */
    filters?: inputs.GetKubernetesFilter[];
}

/**
 * A collection of values returned by getKubernetes.
 */
export interface GetKubernetesResult {
    /**
     * The base64 encoded public certificate used by clients to access the cluster.
     */
    readonly clientCertificate: string;
    /**
     * The base64 encoded private key used by clients to access the cluster.
     */
    readonly clientKey: string;
    /**
     * The base64 encoded public certificate for the cluster's certificate authority.
     */
    readonly clusterCaCertificate: string;
    /**
     * IP range that your pods will run on in this cluster.
     */
    readonly clusterSubnet: string;
    /**
     * Date node was created.
     */
    readonly dateCreated: string;
    /**
     * Domain for your Kubernetes clusters control plane.
     */
    readonly endpoint: string;
    readonly filters?: outputs.GetKubernetesFilter[];
    /**
     * ID of node.
     */
    readonly id: string;
    /**
     * IP address of VKE cluster control plane.
     */
    readonly ip: string;
    /**
     * Base64 encoded Kubeconfig for this VKE cluster.
     */
    readonly kubeConfig: string;
    /**
     * Label of node.
     */
    readonly label: string;
    /**
     * Contains the default node pool that was deployed.
     */
    readonly nodePools: outputs.GetKubernetesNodePool[];
    /**
     * The region your VKE cluster is deployed in.
     */
    readonly region: string;
    /**
     * IP range that services will run on this cluster.
     */
    readonly serviceSubnet: string;
    /**
     * Status of node.
     */
    readonly status: string;
    /**
     * The current kubernetes version your VKE cluster is running on.
     */
    readonly version: string;
}
/**
 * Get information about a Vultr Kubernetes Engine (VKE) Cluster.
 *
 * ## Example Usage
 *
 * Create a new VKE cluster:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myVke = vultr.getKubernetes({
 *     filters: [{
 *         name: "label",
 *         values: ["my-lb-label"],
 *     }],
 * });
 * ```
 */
export function getKubernetesOutput(args?: GetKubernetesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesResult> {
    return pulumi.output(args).apply((a: any) => getKubernetes(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetes.
 */
export interface GetKubernetesOutputArgs {
    /**
     * Query parameters for finding VKE.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetKubernetesFilterArgs>[]>;
}
