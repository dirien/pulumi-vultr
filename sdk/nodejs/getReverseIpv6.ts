// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr Reverse IPv6.
 *
 * ## Example Usage
 *
 * Get the information for an IPv6 reverse DNS record by `reverse`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myReverseIpv6 = vultr.getReverseIpv6({
 *     filters: [{
 *         name: "reverse",
 *         values: ["host.example.com"],
 *     }],
 * });
 * ```
 */
export function getReverseIpv6(args?: GetReverseIpv6Args, opts?: pulumi.InvokeOptions): Promise<GetReverseIpv6Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getReverseIpv6:getReverseIpv6", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getReverseIpv6.
 */
export interface GetReverseIpv6Args {
    /**
     * Query parameters for finding IPv6 reverse DNS records.
     */
    filters?: inputs.GetReverseIpv6Filter[];
}

/**
 * A collection of values returned by getReverseIpv6.
 */
export interface GetReverseIpv6Result {
    readonly filters?: outputs.GetReverseIpv6Filter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the instance the IPv6 reverse DNS record was set for.
     */
    readonly instanceId: string;
    /**
     * The IPv6 address in canonical format used in the reverse DNS record.
     */
    readonly ip: string;
    /**
     * The hostname used in the IPv6 reverse DNS record.
     */
    readonly reverse: string;
}
/**
 * Get information about a Vultr Reverse IPv6.
 *
 * ## Example Usage
 *
 * Get the information for an IPv6 reverse DNS record by `reverse`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myReverseIpv6 = vultr.getReverseIpv6({
 *     filters: [{
 *         name: "reverse",
 *         values: ["host.example.com"],
 *     }],
 * });
 * ```
 */
export function getReverseIpv6Output(args?: GetReverseIpv6OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetReverseIpv6Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vultr:index/getReverseIpv6:getReverseIpv6", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getReverseIpv6.
 */
export interface GetReverseIpv6OutputArgs {
    /**
     * Query parameters for finding IPv6 reverse DNS records.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetReverseIpv6FilterArgs>[]>;
}
