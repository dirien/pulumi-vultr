// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create and update a Vultr container registry.
 *
 * ## Example Usage
 *
 * Create a new container registry:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const vcr1 = new vultr.ContainerRegistry("vcr1", {
 *     name: "examplecontainerregistry",
 *     plan: "start_up",
 *     "public": false,
 *     region: "sjc",
 * });
 * ```
 *
 * The `name` for container registries must be all lowercase and only contain alphanumeric characters.
 */
export class ContainerRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerRegistryState, opts?: pulumi.CustomResourceOptions): ContainerRegistry {
        return new ContainerRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/containerRegistry:ContainerRegistry';

    /**
     * Returns true if the given object is an instance of ContainerRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistry.__pulumiType;
    }

    /**
     * A date-time of when the root user was created.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * The name for your container registry.  Must be lowercase and only alphanumeric characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
     */
    public readonly public!: pulumi.Output<boolean>;
    /**
     * The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The user associated with the container registry.
     */
    public /*out*/ readonly rootUser!: pulumi.Output<{[key: string]: any}>;
    /**
     * A listing of current storage usage relevant to the container registry.
     */
    public /*out*/ readonly storage!: pulumi.Output<{[key: string]: any}>;
    /**
     * The URN of the container registry.
     */
    public /*out*/ readonly urn!: pulumi.Output<string>;

    /**
     * Create a ContainerRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerRegistryArgs | ContainerRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerRegistryState | undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootUser"] = state ? state.rootUser : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["urn"] = state ? state.urn : undefined;
        } else {
            const args = argsOrState as ContainerRegistryArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.public === undefined) && !opts.urn) {
                throw new Error("Missing required property 'public'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["rootUser"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["urn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerRegistry resources.
 */
export interface ContainerRegistryState {
    /**
     * A date-time of when the root user was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * The name for your container registry.  Must be lowercase and only alphanumeric characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
     */
    plan?: pulumi.Input<string>;
    /**
     * Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
     */
    public?: pulumi.Input<boolean>;
    /**
     * The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
     */
    region?: pulumi.Input<string>;
    /**
     * The user associated with the container registry.
     */
    rootUser?: pulumi.Input<{[key: string]: any}>;
    /**
     * A listing of current storage usage relevant to the container registry.
     */
    storage?: pulumi.Input<{[key: string]: any}>;
    /**
     * The URN of the container registry.
     */
    urn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerRegistry resource.
 */
export interface ContainerRegistryArgs {
    /**
     * The name for your container registry.  Must be lowercase and only alphanumeric characters.
     */
    name: pulumi.Input<string>;
    /**
     * The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
     */
    plan: pulumi.Input<string>;
    /**
     * Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
     */
    public: pulumi.Input<boolean>;
    /**
     * The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
     */
    region: pulumi.Input<string>;
}
