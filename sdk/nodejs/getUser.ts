// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr user associated with your account. This data source provides the name, email, access control list, and API status for a Vultr user associated with your account.
 *
 * ## Example Usage
 *
 * Get the information for a user by `email`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myUser = vultr.getUser({
 *     filters: [{
 *         name: "email",
 *         values: ["jdoe@example.com"],
 *     }],
 * });
 * ```
 *
 * Get the information for a user by `name`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myUser = vultr.getUser({
 *     filters: [{
 *         name: "name",
 *         values: ["John Doe"],
 *     }],
 * });
 * ```
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getUser:getUser", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * Query parameters for finding users.
     */
    filters?: inputs.GetUserFilter[];
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * The access control list for the user.
     */
    readonly acls: string[];
    /**
     * Whether API is enabled for the user.
     */
    readonly apiEnabled: boolean;
    /**
     * The email of the user.
     */
    readonly email: string;
    readonly filters?: outputs.GetUserFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the user.
     */
    readonly name: string;
}
/**
 * Get information about a Vultr user associated with your account. This data source provides the name, email, access control list, and API status for a Vultr user associated with your account.
 *
 * ## Example Usage
 *
 * Get the information for a user by `email`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myUser = vultr.getUser({
 *     filters: [{
 *         name: "email",
 *         values: ["jdoe@example.com"],
 *     }],
 * });
 * ```
 *
 * Get the information for a user by `name`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myUser = vultr.getUser({
 *     filters: [{
 *         name: "name",
 *         values: ["John Doe"],
 *     }],
 * });
 * ```
 */
export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vultr:index/getUser:getUser", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * Query parameters for finding users.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetUserFilterArgs>[]>;
}
