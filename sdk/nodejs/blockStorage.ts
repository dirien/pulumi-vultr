// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr Block Storage resource. This can be used to create, read, modify, and delete Block Storage.
 *
 * ## Example Usage
 *
 * Create a new Block Storage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myBlockstorage = new vultr.BlockStorage("myBlockstorage", {
 *     label: "vultr-block-storage",
 *     region: "ewr",
 *     sizeGb: 10,
 * });
 * ```
 *
 * ## Import
 *
 * Block Storage can be imported using the Block Storage `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/blockStorage:BlockStorage my_blockstorage e315835e-d466-4e89-9b4c-dfd8788d7685
 * ```
 */
export class BlockStorage extends pulumi.CustomResource {
    /**
     * Get an existing BlockStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockStorageState, opts?: pulumi.CustomResourceOptions): BlockStorage {
        return new BlockStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/blockStorage:BlockStorage';

    /**
     * Returns true if the given object is an instance of BlockStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockStorage.__pulumiType;
    }

    /**
     * VPS ID that you want to have this block storage attached to.
     */
    public readonly attachedToInstance!: pulumi.Output<string | undefined>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    public readonly blockType!: pulumi.Output<string>;
    /**
     * The monthly cost of this block storage.
     */
    public /*out*/ readonly cost!: pulumi.Output<number>;
    /**
     * The date this block storage was created.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * Label that is given to your block storage.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    public readonly live!: pulumi.Output<boolean | undefined>;
    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     */
    public /*out*/ readonly mountId!: pulumi.Output<string>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The size of the given block storage.
     */
    public readonly sizeGb!: pulumi.Output<number>;
    /**
     * Current status of your block storage.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a BlockStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockStorageArgs | BlockStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockStorageState | undefined;
            resourceInputs["attachedToInstance"] = state ? state.attachedToInstance : undefined;
            resourceInputs["blockType"] = state ? state.blockType : undefined;
            resourceInputs["cost"] = state ? state.cost : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["live"] = state ? state.live : undefined;
            resourceInputs["mountId"] = state ? state.mountId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sizeGb"] = state ? state.sizeGb : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as BlockStorageArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.sizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeGb'");
            }
            resourceInputs["attachedToInstance"] = args ? args.attachedToInstance : undefined;
            resourceInputs["blockType"] = args ? args.blockType : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["live"] = args ? args.live : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sizeGb"] = args ? args.sizeGb : undefined;
            resourceInputs["cost"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["mountId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockStorage resources.
 */
export interface BlockStorageState {
    /**
     * VPS ID that you want to have this block storage attached to.
     */
    attachedToInstance?: pulumi.Input<string>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    blockType?: pulumi.Input<string>;
    /**
     * The monthly cost of this block storage.
     */
    cost?: pulumi.Input<number>;
    /**
     * The date this block storage was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Label that is given to your block storage.
     */
    label?: pulumi.Input<string>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    live?: pulumi.Input<boolean>;
    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     */
    mountId?: pulumi.Input<string>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the given block storage.
     */
    sizeGb?: pulumi.Input<number>;
    /**
     * Current status of your block storage.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockStorage resource.
 */
export interface BlockStorageArgs {
    /**
     * VPS ID that you want to have this block storage attached to.
     */
    attachedToInstance?: pulumi.Input<string>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    blockType?: pulumi.Input<string>;
    /**
     * Label that is given to your block storage.
     */
    label?: pulumi.Input<string>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    live?: pulumi.Input<boolean>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    region: pulumi.Input<string>;
    /**
     * The size of the given block storage.
     */
    sizeGb: pulumi.Input<number>;
}
