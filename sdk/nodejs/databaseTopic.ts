// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Vultr database topic resource. This can be used to create, read, modify, and delete topics for a managed database on your Vultr account.
 *
 * ## Example Usage
 *
 * Create a new database topic:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myDatabaseTopic = new vultr.DatabaseTopic("myDatabaseTopic", {
 *     databaseId: vultr_database.my_database.id,
 *     name: "my_database_topic",
 *     partitions: 3,
 *     replication: 2,
 *     retentionHours: 120,
 *     retentionBytes: -1,
 * });
 * ```
 */
export class DatabaseTopic extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseTopicState, opts?: pulumi.CustomResourceOptions): DatabaseTopic {
        return new DatabaseTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/databaseTopic:DatabaseTopic';

    /**
     * Returns true if the given object is an instance of DatabaseTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseTopic.__pulumiType;
    }

    /**
     * The managed database ID you want to attach this topic to.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * The name for the new managed database topic.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of partitions for the new managed database topic.
     */
    public readonly partitions!: pulumi.Output<number>;
    /**
     * The replication factor for the new managed database topic.
     */
    public readonly replication!: pulumi.Output<number>;
    /**
     * The retention bytes for the new managed database topic.
     */
    public readonly retentionBytes!: pulumi.Output<number>;
    /**
     * The retention hours for the new managed database topic.
     */
    public readonly retentionHours!: pulumi.Output<number>;

    /**
     * Create a DatabaseTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseTopicArgs | DatabaseTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseTopicState | undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            resourceInputs["retentionHours"] = state ? state.retentionHours : undefined;
        } else {
            const args = argsOrState as DatabaseTopicArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.partitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitions'");
            }
            if ((!args || args.replication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replication'");
            }
            if ((!args || args.retentionBytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionBytes'");
            }
            if ((!args || args.retentionHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionHours'");
            }
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            resourceInputs["retentionHours"] = args ? args.retentionHours : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseTopic resources.
 */
export interface DatabaseTopicState {
    /**
     * The managed database ID you want to attach this topic to.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The name for the new managed database topic.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of partitions for the new managed database topic.
     */
    partitions?: pulumi.Input<number>;
    /**
     * The replication factor for the new managed database topic.
     */
    replication?: pulumi.Input<number>;
    /**
     * The retention bytes for the new managed database topic.
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * The retention hours for the new managed database topic.
     */
    retentionHours?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DatabaseTopic resource.
 */
export interface DatabaseTopicArgs {
    /**
     * The managed database ID you want to attach this topic to.
     */
    databaseId: pulumi.Input<string>;
    /**
     * The name for the new managed database topic.
     */
    name: pulumi.Input<string>;
    /**
     * The number of partitions for the new managed database topic.
     */
    partitions: pulumi.Input<number>;
    /**
     * The replication factor for the new managed database topic.
     */
    replication: pulumi.Input<number>;
    /**
     * The retention bytes for the new managed database topic.
     */
    retentionBytes: pulumi.Input<number>;
    /**
     * The retention hours for the new managed database topic.
     */
    retentionHours: pulumi.Input<number>;
}
