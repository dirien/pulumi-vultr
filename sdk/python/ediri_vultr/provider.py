# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 retry_limit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] api_key: The API Key that allows interaction with the API
        :param pulumi.Input[int] rate_limit: Allows users to set the speed of API calls to work with the Vultr Rate Limit
        :param pulumi.Input[int] retry_limit: Allows users to set the maximum number of retries allowed for a failed API call.
        """
        ProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_key=api_key,
            rate_limit=rate_limit,
            retry_limit=retry_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_key: Optional[pulumi.Input[str]] = None,
             rate_limit: Optional[pulumi.Input[int]] = None,
             retry_limit: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiKey' in kwargs:
            api_key = kwargs['apiKey']
        if 'rateLimit' in kwargs:
            rate_limit = kwargs['rateLimit']
        if 'retryLimit' in kwargs:
            retry_limit = kwargs['retryLimit']

        if api_key is None:
            api_key = _utilities.get_env('VULTR_API_KEY')
        if api_key is not None:
            _setter("api_key", api_key)
        if rate_limit is None:
            rate_limit = 500
        if rate_limit is not None:
            _setter("rate_limit", rate_limit)
        if retry_limit is None:
            retry_limit = 3
        if retry_limit is not None:
            _setter("retry_limit", retry_limit)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API Key that allows interaction with the API
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Allows users to set the speed of API calls to work with the Vultr Rate Limit
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter(name="retryLimit")
    def retry_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Allows users to set the maximum number of retries allowed for a failed API call.
        """
        return pulumi.get(self, "retry_limit")

    @retry_limit.setter
    def retry_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_limit", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 retry_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        The provider type for the vultr package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: The API Key that allows interaction with the API
        :param pulumi.Input[int] rate_limit: Allows users to set the speed of API calls to work with the Vultr Rate Limit
        :param pulumi.Input[int] retry_limit: Allows users to set the maximum number of retries allowed for a failed API call.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the vultr package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ProviderArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 retry_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if api_key is None:
                api_key = _utilities.get_env('VULTR_API_KEY')
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            if rate_limit is None:
                rate_limit = 500
            __props__.__dict__["rate_limit"] = pulumi.Output.from_input(rate_limit).apply(pulumi.runtime.to_json) if rate_limit is not None else None
            if retry_limit is None:
                retry_limit = 3
            __props__.__dict__["retry_limit"] = pulumi.Output.from_input(retry_limit).apply(pulumi.runtime.to_json) if retry_limit is not None else None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'vultr',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[Optional[str]]:
        """
        The API Key that allows interaction with the API
        """
        return pulumi.get(self, "api_key")

