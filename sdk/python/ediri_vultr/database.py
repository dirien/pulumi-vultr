# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 database_engine: pulumi.Input[str],
                 database_engine_version: pulumi.Input[str],
                 label: pulumi.Input[str],
                 plan: pulumi.Input[str],
                 region: pulumi.Input[str],
                 cluster_time_zone: Optional[pulumi.Input[str]] = None,
                 maintenance_dow: Optional[pulumi.Input[str]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 mysql_long_query_time: Optional[pulumi.Input[int]] = None,
                 mysql_require_primary_key: Optional[pulumi.Input[bool]] = None,
                 mysql_slow_query_log: Optional[pulumi.Input[bool]] = None,
                 mysql_sql_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plan_disk: Optional[pulumi.Input[int]] = None,
                 read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]] = None,
                 redis_eviction_policy: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 trusted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Database resource.
        """
        pulumi.set(__self__, "database_engine", database_engine)
        pulumi.set(__self__, "database_engine_version", database_engine_version)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "region", region)
        if cluster_time_zone is not None:
            pulumi.set(__self__, "cluster_time_zone", cluster_time_zone)
        if maintenance_dow is not None:
            pulumi.set(__self__, "maintenance_dow", maintenance_dow)
        if maintenance_time is not None:
            pulumi.set(__self__, "maintenance_time", maintenance_time)
        if mysql_long_query_time is not None:
            pulumi.set(__self__, "mysql_long_query_time", mysql_long_query_time)
        if mysql_require_primary_key is not None:
            pulumi.set(__self__, "mysql_require_primary_key", mysql_require_primary_key)
        if mysql_slow_query_log is not None:
            pulumi.set(__self__, "mysql_slow_query_log", mysql_slow_query_log)
        if mysql_sql_modes is not None:
            pulumi.set(__self__, "mysql_sql_modes", mysql_sql_modes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if plan_disk is not None:
            pulumi.set(__self__, "plan_disk", plan_disk)
        if read_replicas is not None:
            pulumi.set(__self__, "read_replicas", read_replicas)
        if redis_eviction_policy is not None:
            pulumi.set(__self__, "redis_eviction_policy", redis_eviction_policy)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if trusted_ips is not None:
            pulumi.set(__self__, "trusted_ips", trusted_ips)

    @property
    @pulumi.getter(name="databaseEngine")
    def database_engine(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_engine")

    @database_engine.setter
    def database_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_engine", value)

    @property
    @pulumi.getter(name="databaseEngineVersion")
    def database_engine_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_engine_version")

    @database_engine_version.setter
    def database_engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_engine_version", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="clusterTimeZone")
    def cluster_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_time_zone")

    @cluster_time_zone.setter
    def cluster_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_time_zone", value)

    @property
    @pulumi.getter(name="maintenanceDow")
    def maintenance_dow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_dow")

    @maintenance_dow.setter
    def maintenance_dow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_dow", value)

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_time")

    @maintenance_time.setter
    def maintenance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_time", value)

    @property
    @pulumi.getter(name="mysqlLongQueryTime")
    def mysql_long_query_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mysql_long_query_time")

    @mysql_long_query_time.setter
    def mysql_long_query_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mysql_long_query_time", value)

    @property
    @pulumi.getter(name="mysqlRequirePrimaryKey")
    def mysql_require_primary_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mysql_require_primary_key")

    @mysql_require_primary_key.setter
    def mysql_require_primary_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mysql_require_primary_key", value)

    @property
    @pulumi.getter(name="mysqlSlowQueryLog")
    def mysql_slow_query_log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mysql_slow_query_log")

    @mysql_slow_query_log.setter
    def mysql_slow_query_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mysql_slow_query_log", value)

    @property
    @pulumi.getter(name="mysqlSqlModes")
    def mysql_sql_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "mysql_sql_modes")

    @mysql_sql_modes.setter
    def mysql_sql_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mysql_sql_modes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="planDisk")
    def plan_disk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "plan_disk")

    @plan_disk.setter
    def plan_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plan_disk", value)

    @property
    @pulumi.getter(name="readReplicas")
    def read_replicas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]]:
        return pulumi.get(self, "read_replicas")

    @read_replicas.setter
    def read_replicas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]]):
        pulumi.set(self, "read_replicas", value)

    @property
    @pulumi.getter(name="redisEvictionPolicy")
    def redis_eviction_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_eviction_policy")

    @redis_eviction_policy.setter
    def redis_eviction_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_eviction_policy", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="trustedIps")
    def trusted_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_ips")

    @trusted_ips.setter
    def trusted_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_ips", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 cluster_time_zone: Optional[pulumi.Input[str]] = None,
                 database_engine: Optional[pulumi.Input[str]] = None,
                 database_engine_version: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 dbname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 latest_backup: Optional[pulumi.Input[str]] = None,
                 maintenance_dow: Optional[pulumi.Input[str]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 mysql_long_query_time: Optional[pulumi.Input[int]] = None,
                 mysql_require_primary_key: Optional[pulumi.Input[bool]] = None,
                 mysql_slow_query_log: Optional[pulumi.Input[bool]] = None,
                 mysql_sql_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 plan_disk: Optional[pulumi.Input[int]] = None,
                 plan_ram: Optional[pulumi.Input[int]] = None,
                 plan_replicas: Optional[pulumi.Input[int]] = None,
                 plan_vcpus: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]] = None,
                 redis_eviction_policy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 trusted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        """
        if cluster_time_zone is not None:
            pulumi.set(__self__, "cluster_time_zone", cluster_time_zone)
        if database_engine is not None:
            pulumi.set(__self__, "database_engine", database_engine)
        if database_engine_version is not None:
            pulumi.set(__self__, "database_engine_version", database_engine_version)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if latest_backup is not None:
            pulumi.set(__self__, "latest_backup", latest_backup)
        if maintenance_dow is not None:
            pulumi.set(__self__, "maintenance_dow", maintenance_dow)
        if maintenance_time is not None:
            pulumi.set(__self__, "maintenance_time", maintenance_time)
        if mysql_long_query_time is not None:
            pulumi.set(__self__, "mysql_long_query_time", mysql_long_query_time)
        if mysql_require_primary_key is not None:
            pulumi.set(__self__, "mysql_require_primary_key", mysql_require_primary_key)
        if mysql_slow_query_log is not None:
            pulumi.set(__self__, "mysql_slow_query_log", mysql_slow_query_log)
        if mysql_sql_modes is not None:
            pulumi.set(__self__, "mysql_sql_modes", mysql_sql_modes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if plan_disk is not None:
            pulumi.set(__self__, "plan_disk", plan_disk)
        if plan_ram is not None:
            pulumi.set(__self__, "plan_ram", plan_ram)
        if plan_replicas is not None:
            pulumi.set(__self__, "plan_replicas", plan_replicas)
        if plan_vcpus is not None:
            pulumi.set(__self__, "plan_vcpus", plan_vcpus)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_replicas is not None:
            pulumi.set(__self__, "read_replicas", read_replicas)
        if redis_eviction_policy is not None:
            pulumi.set(__self__, "redis_eviction_policy", redis_eviction_policy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if trusted_ips is not None:
            pulumi.set(__self__, "trusted_ips", trusted_ips)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="clusterTimeZone")
    def cluster_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_time_zone")

    @cluster_time_zone.setter
    def cluster_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_time_zone", value)

    @property
    @pulumi.getter(name="databaseEngine")
    def database_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_engine")

    @database_engine.setter
    def database_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_engine", value)

    @property
    @pulumi.getter(name="databaseEngineVersion")
    def database_engine_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_engine_version")

    @database_engine_version.setter
    def database_engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_engine_version", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="latestBackup")
    def latest_backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_backup")

    @latest_backup.setter
    def latest_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_backup", value)

    @property
    @pulumi.getter(name="maintenanceDow")
    def maintenance_dow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_dow")

    @maintenance_dow.setter
    def maintenance_dow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_dow", value)

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maintenance_time")

    @maintenance_time.setter
    def maintenance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_time", value)

    @property
    @pulumi.getter(name="mysqlLongQueryTime")
    def mysql_long_query_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mysql_long_query_time")

    @mysql_long_query_time.setter
    def mysql_long_query_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mysql_long_query_time", value)

    @property
    @pulumi.getter(name="mysqlRequirePrimaryKey")
    def mysql_require_primary_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mysql_require_primary_key")

    @mysql_require_primary_key.setter
    def mysql_require_primary_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mysql_require_primary_key", value)

    @property
    @pulumi.getter(name="mysqlSlowQueryLog")
    def mysql_slow_query_log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mysql_slow_query_log")

    @mysql_slow_query_log.setter
    def mysql_slow_query_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mysql_slow_query_log", value)

    @property
    @pulumi.getter(name="mysqlSqlModes")
    def mysql_sql_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "mysql_sql_modes")

    @mysql_sql_modes.setter
    def mysql_sql_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mysql_sql_modes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="planDisk")
    def plan_disk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "plan_disk")

    @plan_disk.setter
    def plan_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plan_disk", value)

    @property
    @pulumi.getter(name="planRam")
    def plan_ram(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "plan_ram")

    @plan_ram.setter
    def plan_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plan_ram", value)

    @property
    @pulumi.getter(name="planReplicas")
    def plan_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "plan_replicas")

    @plan_replicas.setter
    def plan_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plan_replicas", value)

    @property
    @pulumi.getter(name="planVcpus")
    def plan_vcpus(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "plan_vcpus")

    @plan_vcpus.setter
    def plan_vcpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plan_vcpus", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readReplicas")
    def read_replicas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]]:
        return pulumi.get(self, "read_replicas")

    @read_replicas.setter
    def read_replicas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseReadReplicaArgs']]]]):
        pulumi.set(self, "read_replicas", value)

    @property
    @pulumi.getter(name="redisEvictionPolicy")
    def redis_eviction_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_eviction_policy")

    @redis_eviction_policy.setter
    def redis_eviction_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_eviction_policy", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="trustedIps")
    def trusted_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "trusted_ips")

    @trusted_ips.setter
    def trusted_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_ips", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_time_zone: Optional[pulumi.Input[str]] = None,
                 database_engine: Optional[pulumi.Input[str]] = None,
                 database_engine_version: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 maintenance_dow: Optional[pulumi.Input[str]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 mysql_long_query_time: Optional[pulumi.Input[int]] = None,
                 mysql_require_primary_key: Optional[pulumi.Input[bool]] = None,
                 mysql_slow_query_log: Optional[pulumi.Input[bool]] = None,
                 mysql_sql_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 plan_disk: Optional[pulumi.Input[int]] = None,
                 read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatabaseReadReplicaArgs']]]]] = None,
                 redis_eviction_policy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 trusted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_time_zone: Optional[pulumi.Input[str]] = None,
                 database_engine: Optional[pulumi.Input[str]] = None,
                 database_engine_version: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 maintenance_dow: Optional[pulumi.Input[str]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 mysql_long_query_time: Optional[pulumi.Input[int]] = None,
                 mysql_require_primary_key: Optional[pulumi.Input[bool]] = None,
                 mysql_slow_query_log: Optional[pulumi.Input[bool]] = None,
                 mysql_sql_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 plan_disk: Optional[pulumi.Input[int]] = None,
                 read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatabaseReadReplicaArgs']]]]] = None,
                 redis_eviction_policy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 trusted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["cluster_time_zone"] = cluster_time_zone
            if database_engine is None and not opts.urn:
                raise TypeError("Missing required property 'database_engine'")
            __props__.__dict__["database_engine"] = database_engine
            if database_engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'database_engine_version'")
            __props__.__dict__["database_engine_version"] = database_engine_version
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["maintenance_dow"] = maintenance_dow
            __props__.__dict__["maintenance_time"] = maintenance_time
            __props__.__dict__["mysql_long_query_time"] = mysql_long_query_time
            __props__.__dict__["mysql_require_primary_key"] = mysql_require_primary_key
            __props__.__dict__["mysql_slow_query_log"] = mysql_slow_query_log
            __props__.__dict__["mysql_sql_modes"] = mysql_sql_modes
            __props__.__dict__["password"] = password
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            __props__.__dict__["plan_disk"] = plan_disk
            __props__.__dict__["read_replicas"] = read_replicas
            __props__.__dict__["redis_eviction_policy"] = redis_eviction_policy
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["tag"] = tag
            __props__.__dict__["trusted_ips"] = trusted_ips
            __props__.__dict__["date_created"] = None
            __props__.__dict__["dbname"] = None
            __props__.__dict__["host"] = None
            __props__.__dict__["latest_backup"] = None
            __props__.__dict__["plan_ram"] = None
            __props__.__dict__["plan_replicas"] = None
            __props__.__dict__["plan_vcpus"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["user"] = None
        super(Database, __self__).__init__(
            'vultr:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_time_zone: Optional[pulumi.Input[str]] = None,
            database_engine: Optional[pulumi.Input[str]] = None,
            database_engine_version: Optional[pulumi.Input[str]] = None,
            date_created: Optional[pulumi.Input[str]] = None,
            dbname: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            latest_backup: Optional[pulumi.Input[str]] = None,
            maintenance_dow: Optional[pulumi.Input[str]] = None,
            maintenance_time: Optional[pulumi.Input[str]] = None,
            mysql_long_query_time: Optional[pulumi.Input[int]] = None,
            mysql_require_primary_key: Optional[pulumi.Input[bool]] = None,
            mysql_slow_query_log: Optional[pulumi.Input[bool]] = None,
            mysql_sql_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            password: Optional[pulumi.Input[str]] = None,
            plan: Optional[pulumi.Input[str]] = None,
            plan_disk: Optional[pulumi.Input[int]] = None,
            plan_ram: Optional[pulumi.Input[int]] = None,
            plan_replicas: Optional[pulumi.Input[int]] = None,
            plan_vcpus: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[str]] = None,
            read_replicas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatabaseReadReplicaArgs']]]]] = None,
            redis_eviction_policy: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tag: Optional[pulumi.Input[str]] = None,
            trusted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["cluster_time_zone"] = cluster_time_zone
        __props__.__dict__["database_engine"] = database_engine
        __props__.__dict__["database_engine_version"] = database_engine_version
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["dbname"] = dbname
        __props__.__dict__["host"] = host
        __props__.__dict__["label"] = label
        __props__.__dict__["latest_backup"] = latest_backup
        __props__.__dict__["maintenance_dow"] = maintenance_dow
        __props__.__dict__["maintenance_time"] = maintenance_time
        __props__.__dict__["mysql_long_query_time"] = mysql_long_query_time
        __props__.__dict__["mysql_require_primary_key"] = mysql_require_primary_key
        __props__.__dict__["mysql_slow_query_log"] = mysql_slow_query_log
        __props__.__dict__["mysql_sql_modes"] = mysql_sql_modes
        __props__.__dict__["password"] = password
        __props__.__dict__["plan"] = plan
        __props__.__dict__["plan_disk"] = plan_disk
        __props__.__dict__["plan_ram"] = plan_ram
        __props__.__dict__["plan_replicas"] = plan_replicas
        __props__.__dict__["plan_vcpus"] = plan_vcpus
        __props__.__dict__["port"] = port
        __props__.__dict__["read_replicas"] = read_replicas
        __props__.__dict__["redis_eviction_policy"] = redis_eviction_policy
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tag"] = tag
        __props__.__dict__["trusted_ips"] = trusted_ips
        __props__.__dict__["user"] = user
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterTimeZone")
    def cluster_time_zone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cluster_time_zone")

    @property
    @pulumi.getter(name="databaseEngine")
    def database_engine(self) -> pulumi.Output[str]:
        return pulumi.get(self, "database_engine")

    @property
    @pulumi.getter(name="databaseEngineVersion")
    def database_engine_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "database_engine_version")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[str]:
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter
    def dbname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dbname")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestBackup")
    def latest_backup(self) -> pulumi.Output[str]:
        return pulumi.get(self, "latest_backup")

    @property
    @pulumi.getter(name="maintenanceDow")
    def maintenance_dow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "maintenance_dow")

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "maintenance_time")

    @property
    @pulumi.getter(name="mysqlLongQueryTime")
    def mysql_long_query_time(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "mysql_long_query_time")

    @property
    @pulumi.getter(name="mysqlRequirePrimaryKey")
    def mysql_require_primary_key(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "mysql_require_primary_key")

    @property
    @pulumi.getter(name="mysqlSlowQueryLog")
    def mysql_slow_query_log(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "mysql_slow_query_log")

    @property
    @pulumi.getter(name="mysqlSqlModes")
    def mysql_sql_modes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "mysql_sql_modes")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="planDisk")
    def plan_disk(self) -> pulumi.Output[int]:
        return pulumi.get(self, "plan_disk")

    @property
    @pulumi.getter(name="planRam")
    def plan_ram(self) -> pulumi.Output[int]:
        return pulumi.get(self, "plan_ram")

    @property
    @pulumi.getter(name="planReplicas")
    def plan_replicas(self) -> pulumi.Output[int]:
        return pulumi.get(self, "plan_replicas")

    @property
    @pulumi.getter(name="planVcpus")
    def plan_vcpus(self) -> pulumi.Output[int]:
        return pulumi.get(self, "plan_vcpus")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="readReplicas")
    def read_replicas(self) -> pulumi.Output[Sequence['outputs.DatabaseReadReplica']]:
        return pulumi.get(self, "read_replicas")

    @property
    @pulumi.getter(name="redisEvictionPolicy")
    def redis_eviction_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "redis_eviction_policy")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="trustedIps")
    def trusted_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "trusted_ips")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user")

