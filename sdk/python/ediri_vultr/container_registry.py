# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ContainerRegistryArgs', 'ContainerRegistry']

@pulumi.input_type
class ContainerRegistryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 plan: pulumi.Input[str],
                 public: pulumi.Input[bool],
                 region: pulumi.Input[str]):
        """
        The set of arguments for constructing a ContainerRegistry resource.
        :param pulumi.Input[str] name: The name for your container registry.  Must be lowercase and only alphanumeric characters.
        :param pulumi.Input[str] plan: The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        :param pulumi.Input[bool] public: Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        :param pulumi.Input[str] region: The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for your container registry.  Must be lowercase and only alphanumeric characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        """
        The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def public(self) -> pulumi.Input[bool]:
        """
        Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: pulumi.Input[bool]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ContainerRegistryState:
    def __init__(__self__, *,
                 date_created: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_user: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 storage: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 urn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContainerRegistry resources.
        :param pulumi.Input[str] date_created: A date-time of when the root user was created.
        :param pulumi.Input[str] name: The name for your container registry.  Must be lowercase and only alphanumeric characters.
        :param pulumi.Input[str] plan: The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        :param pulumi.Input[bool] public: Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        :param pulumi.Input[str] region: The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        :param pulumi.Input[Mapping[str, Any]] root_user: The user associated with the container registry.
        :param pulumi.Input[Mapping[str, Any]] storage: A listing of current storage usage relevant to the container registry.
        :param pulumi.Input[str] urn: The URN of the container registry.
        """
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_user is not None:
            pulumi.set(__self__, "root_user", root_user)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        A date-time of when the root user was created.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for your container registry.  Must be lowercase and only alphanumeric characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        """
        The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The user associated with the container registry.
        """
        return pulumi.get(self, "root_user")

    @root_user.setter
    def root_user(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "root_user", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A listing of current storage usage relevant to the container registry.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[str]]:
        """
        The URN of the container registry.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urn", value)


class ContainerRegistry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create and update a Vultr container registry.

        ## Example Usage

        Create a new container registry:

        ```python
        import pulumi
        import ediri_vultr as vultr

        vcr1 = vultr.ContainerRegistry("vcr1",
            name="examplecontainerregistry",
            plan="start_up",
            public=False,
            region="sjc")
        ```

        The `name` for container registries must be all lowercase and only contain alphanumeric characters.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name for your container registry.  Must be lowercase and only alphanumeric characters.
        :param pulumi.Input[str] plan: The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        :param pulumi.Input[bool] public: Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        :param pulumi.Input[str] region: The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerRegistryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create and update a Vultr container registry.

        ## Example Usage

        Create a new container registry:

        ```python
        import pulumi
        import ediri_vultr as vultr

        vcr1 = vultr.ContainerRegistry("vcr1",
            name="examplecontainerregistry",
            plan="start_up",
            public=False,
            region="sjc")
        ```

        The `name` for container registries must be all lowercase and only contain alphanumeric characters.

        :param str resource_name: The name of the resource.
        :param ContainerRegistryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerRegistryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerRegistryArgs.__new__(ContainerRegistryArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            if public is None and not opts.urn:
                raise TypeError("Missing required property 'public'")
            __props__.__dict__["public"] = public
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["date_created"] = None
            __props__.__dict__["root_user"] = None
            __props__.__dict__["storage"] = None
            __props__.__dict__["urn"] = None
        super(ContainerRegistry, __self__).__init__(
            'vultr:index/containerRegistry:ContainerRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            date_created: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            plan: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[str]] = None,
            root_user: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            storage: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            urn: Optional[pulumi.Input[str]] = None) -> 'ContainerRegistry':
        """
        Get an existing ContainerRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] date_created: A date-time of when the root user was created.
        :param pulumi.Input[str] name: The name for your container registry.  Must be lowercase and only alphanumeric characters.
        :param pulumi.Input[str] plan: The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        :param pulumi.Input[bool] public: Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        :param pulumi.Input[str] region: The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        :param pulumi.Input[Mapping[str, Any]] root_user: The user associated with the container registry.
        :param pulumi.Input[Mapping[str, Any]] storage: A listing of current storage usage relevant to the container registry.
        :param pulumi.Input[str] urn: The URN of the container registry.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerRegistryState.__new__(_ContainerRegistryState)

        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["name"] = name
        __props__.__dict__["plan"] = plan
        __props__.__dict__["public"] = public
        __props__.__dict__["region"] = region
        __props__.__dict__["root_user"] = root_user
        __props__.__dict__["storage"] = storage
        __props__.__dict__["urn"] = urn
        return ContainerRegistry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[str]:
        """
        A date-time of when the root user was created.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name for your container registry.  Must be lowercase and only alphanumeric characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Output[str]:
        """
        The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[bool]:
        """
        Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        The user associated with the container registry.
        """
        return pulumi.get(self, "root_user")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        A listing of current storage usage relevant to the container registry.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def urn(self) -> pulumi.Output[str]:
        """
        The URN of the container registry.
        """
        return pulumi.get(self, "urn")

