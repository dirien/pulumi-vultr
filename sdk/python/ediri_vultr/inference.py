# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['InferenceArgs', 'Inference']

@pulumi.input_type
class InferenceArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str]):
        """
        The set of arguments for constructing a Inference resource.
        :param pulumi.Input[str] label: A label for the inference subscription.
        """
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        A label for the inference subscription.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class _InferenceState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 date_created: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering Inference resources.
        :param pulumi.Input[str] api_key: The inference subscription's API key for accessing the Vultr Inference API.
        :param pulumi.Input[str] date_created: The date the inference subscription was added to your Vultr account.
        :param pulumi.Input[str] label: A label for the inference subscription.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The inference subscription's API key for accessing the Vultr Inference API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date the inference subscription was added to your Vultr account.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_created", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        A label for the inference subscription.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "usage", value)


class Inference(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Vultr Serverless Inference resource. This can be used to create, read, modify, and delete managed inference subscriptions on your Vultr account.

        ## Example Usage

        Create a new inference subscription:

        ```python
        import pulumi
        import ediri_vultr as vultr

        my_inference_subscription = vultr.Inference("myInferenceSubscription", label="my_inference_label")
        ```

        ## Import

        Inference subscriptions can be imported using the subscription's `ID`, e.g.

        ```sh
        $ pulumi import vultr:index/inference:Inference my_inference_subscription b6a859c5-b299-49dd-8888-b1abbc517d08
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] label: A label for the inference subscription.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InferenceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Vultr Serverless Inference resource. This can be used to create, read, modify, and delete managed inference subscriptions on your Vultr account.

        ## Example Usage

        Create a new inference subscription:

        ```python
        import pulumi
        import ediri_vultr as vultr

        my_inference_subscription = vultr.Inference("myInferenceSubscription", label="my_inference_label")
        ```

        ## Import

        Inference subscriptions can be imported using the subscription's `ID`, e.g.

        ```sh
        $ pulumi import vultr:index/inference:Inference my_inference_subscription b6a859c5-b299-49dd-8888-b1abbc517d08
        ```

        :param str resource_name: The name of the resource.
        :param InferenceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InferenceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InferenceArgs.__new__(InferenceArgs)

            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["api_key"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["usage"] = None
        super(Inference, __self__).__init__(
            'vultr:index/inference:Inference',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            date_created: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            usage: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'Inference':
        """
        Get an existing Inference resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: The inference subscription's API key for accessing the Vultr Inference API.
        :param pulumi.Input[str] date_created: The date the inference subscription was added to your Vultr account.
        :param pulumi.Input[str] label: A label for the inference subscription.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InferenceState.__new__(_InferenceState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["label"] = label
        __props__.__dict__["usage"] = usage
        return Inference(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        The inference subscription's API key for accessing the Vultr Inference API.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[str]:
        """
        The date the inference subscription was added to your Vultr account.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        A label for the inference subscription.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "usage")

