// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetLoadBalancerFilter;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLoadBalancerResult {
    /**
     * @return Array of instances that are currently attached to the load balancer.
     * 
     */
    private List<String> attachedInstances;
    /**
     * @return The balancing algorithm for your load balancer.
     * 
     */
    private String balancingAlgorithm;
    /**
     * @return Name for your given sticky session.
     * 
     */
    private String cookieName;
    private String dateCreated;
    private @Nullable List<GetLoadBalancerFilter> filters;
    private List<Map<String,Object>> firewallRules;
    /**
     * @return Defines the forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    private List<Map<String,Object>> forwardingRules;
    /**
     * @return Boolean value that indicates if SSL is enabled.
     * 
     */
    private Boolean hasSsl;
    /**
     * @return Defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    private Map<String,Object> healthCheck;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return IPv4 address for your load balancer.
     * 
     */
    private String ipv4;
    /**
     * @return IPv6 address for your load balancer.
     * 
     */
    private String ipv6;
    /**
     * @return The load balancers label.
     * 
     */
    private String label;
    /**
     * @return (Deprecated: use `vpc` instead) Defines the private network the load balancer is attached to.
     * 
     */
    private String privateNetwork;
    /**
     * @return Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    private @Nullable Boolean proxyProtocol;
    /**
     * @return The region your load balancer is deployed in.
     * 
     */
    private String region;
    private Map<String,Object> ssl;
    /**
     * @return Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    private Boolean sslRedirect;
    /**
     * @return Current status for the load balancer
     * 
     */
    private String status;

    private GetLoadBalancerResult() {}
    /**
     * @return Array of instances that are currently attached to the load balancer.
     * 
     */
    public List<String> attachedInstances() {
        return this.attachedInstances;
    }
    /**
     * @return The balancing algorithm for your load balancer.
     * 
     */
    public String balancingAlgorithm() {
        return this.balancingAlgorithm;
    }
    /**
     * @return Name for your given sticky session.
     * 
     */
    public String cookieName() {
        return this.cookieName;
    }
    public String dateCreated() {
        return this.dateCreated;
    }
    public List<GetLoadBalancerFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public List<Map<String,Object>> firewallRules() {
        return this.firewallRules;
    }
    /**
     * @return Defines the forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    public List<Map<String,Object>> forwardingRules() {
        return this.forwardingRules;
    }
    /**
     * @return Boolean value that indicates if SSL is enabled.
     * 
     */
    public Boolean hasSsl() {
        return this.hasSsl;
    }
    /**
     * @return Defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    public Map<String,Object> healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IPv4 address for your load balancer.
     * 
     */
    public String ipv4() {
        return this.ipv4;
    }
    /**
     * @return IPv6 address for your load balancer.
     * 
     */
    public String ipv6() {
        return this.ipv6;
    }
    /**
     * @return The load balancers label.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return (Deprecated: use `vpc` instead) Defines the private network the load balancer is attached to.
     * 
     */
    public String privateNetwork() {
        return this.privateNetwork;
    }
    /**
     * @return Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    public Optional<Boolean> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }
    /**
     * @return The region your load balancer is deployed in.
     * 
     */
    public String region() {
        return this.region;
    }
    public Map<String,Object> ssl() {
        return this.ssl;
    }
    /**
     * @return Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    public Boolean sslRedirect() {
        return this.sslRedirect;
    }
    /**
     * @return Current status for the load balancer
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> attachedInstances;
        private String balancingAlgorithm;
        private String cookieName;
        private String dateCreated;
        private @Nullable List<GetLoadBalancerFilter> filters;
        private List<Map<String,Object>> firewallRules;
        private List<Map<String,Object>> forwardingRules;
        private Boolean hasSsl;
        private Map<String,Object> healthCheck;
        private String id;
        private String ipv4;
        private String ipv6;
        private String label;
        private String privateNetwork;
        private @Nullable Boolean proxyProtocol;
        private String region;
        private Map<String,Object> ssl;
        private Boolean sslRedirect;
        private String status;
        public Builder() {}
        public Builder(GetLoadBalancerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedInstances = defaults.attachedInstances;
    	      this.balancingAlgorithm = defaults.balancingAlgorithm;
    	      this.cookieName = defaults.cookieName;
    	      this.dateCreated = defaults.dateCreated;
    	      this.filters = defaults.filters;
    	      this.firewallRules = defaults.firewallRules;
    	      this.forwardingRules = defaults.forwardingRules;
    	      this.hasSsl = defaults.hasSsl;
    	      this.healthCheck = defaults.healthCheck;
    	      this.id = defaults.id;
    	      this.ipv4 = defaults.ipv4;
    	      this.ipv6 = defaults.ipv6;
    	      this.label = defaults.label;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.proxyProtocol = defaults.proxyProtocol;
    	      this.region = defaults.region;
    	      this.ssl = defaults.ssl;
    	      this.sslRedirect = defaults.sslRedirect;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder attachedInstances(List<String> attachedInstances) {
            this.attachedInstances = Objects.requireNonNull(attachedInstances);
            return this;
        }
        public Builder attachedInstances(String... attachedInstances) {
            return attachedInstances(List.of(attachedInstances));
        }
        @CustomType.Setter
        public Builder balancingAlgorithm(String balancingAlgorithm) {
            this.balancingAlgorithm = Objects.requireNonNull(balancingAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder cookieName(String cookieName) {
            this.cookieName = Objects.requireNonNull(cookieName);
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(String dateCreated) {
            this.dateCreated = Objects.requireNonNull(dateCreated);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetLoadBalancerFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetLoadBalancerFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder firewallRules(List<Map<String,Object>> firewallRules) {
            this.firewallRules = Objects.requireNonNull(firewallRules);
            return this;
        }
        @CustomType.Setter
        public Builder forwardingRules(List<Map<String,Object>> forwardingRules) {
            this.forwardingRules = Objects.requireNonNull(forwardingRules);
            return this;
        }
        @CustomType.Setter
        public Builder hasSsl(Boolean hasSsl) {
            this.hasSsl = Objects.requireNonNull(hasSsl);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(Map<String,Object> healthCheck) {
            this.healthCheck = Objects.requireNonNull(healthCheck);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4(String ipv4) {
            this.ipv4 = Objects.requireNonNull(ipv4);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6(String ipv6) {
            this.ipv6 = Objects.requireNonNull(ipv6);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder privateNetwork(String privateNetwork) {
            this.privateNetwork = Objects.requireNonNull(privateNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder proxyProtocol(@Nullable Boolean proxyProtocol) {
            this.proxyProtocol = proxyProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder ssl(Map<String,Object> ssl) {
            this.ssl = Objects.requireNonNull(ssl);
            return this;
        }
        @CustomType.Setter
        public Builder sslRedirect(Boolean sslRedirect) {
            this.sslRedirect = Objects.requireNonNull(sslRedirect);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetLoadBalancerResult build() {
            final var o = new GetLoadBalancerResult();
            o.attachedInstances = attachedInstances;
            o.balancingAlgorithm = balancingAlgorithm;
            o.cookieName = cookieName;
            o.dateCreated = dateCreated;
            o.filters = filters;
            o.firewallRules = firewallRules;
            o.forwardingRules = forwardingRules;
            o.hasSsl = hasSsl;
            o.healthCheck = healthCheck;
            o.id = id;
            o.ipv4 = ipv4;
            o.ipv6 = ipv6;
            o.label = label;
            o.privateNetwork = privateNetwork;
            o.proxyProtocol = proxyProtocol;
            o.region = region;
            o.ssl = ssl;
            o.sslRedirect = sslRedirect;
            o.status = status;
            return o;
        }
    }
}
