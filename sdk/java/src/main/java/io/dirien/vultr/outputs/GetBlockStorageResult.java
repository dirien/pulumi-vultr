// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetBlockStorageFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetBlockStorageResult {
    /**
     * @return The ID of the VPS the block storage subscription is attached to.
     * 
     */
    private String attachedToInstance;
    /**
     * @return The type of block storage volume.
     * 
     */
    private String blockType;
    /**
     * @return The cost per month of the block storage subscription in USD.
     * 
     */
    private Integer cost;
    /**
     * @return The date the block storage subscription was added to your Vultr account.
     * 
     */
    private String dateCreated;
    private @Nullable List<GetBlockStorageFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The label of the block storage subscription.
     * 
     */
    private String label;
    /**
     * @return An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    private String mountId;
    /**
     * @return The region ID of the block storage subscription.
     * 
     */
    private String region;
    /**
     * @return The size of the block storage subscription in GB.
     * 
     */
    private Integer sizeGb;
    /**
     * @return The status of the block storage subscription.
     * 
     */
    private String status;

    private GetBlockStorageResult() {}
    /**
     * @return The ID of the VPS the block storage subscription is attached to.
     * 
     */
    public String attachedToInstance() {
        return this.attachedToInstance;
    }
    /**
     * @return The type of block storage volume.
     * 
     */
    public String blockType() {
        return this.blockType;
    }
    /**
     * @return The cost per month of the block storage subscription in USD.
     * 
     */
    public Integer cost() {
        return this.cost;
    }
    /**
     * @return The date the block storage subscription was added to your Vultr account.
     * 
     */
    public String dateCreated() {
        return this.dateCreated;
    }
    public List<GetBlockStorageFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The label of the block storage subscription.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    public String mountId() {
        return this.mountId;
    }
    /**
     * @return The region ID of the block storage subscription.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The size of the block storage subscription in GB.
     * 
     */
    public Integer sizeGb() {
        return this.sizeGb;
    }
    /**
     * @return The status of the block storage subscription.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBlockStorageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attachedToInstance;
        private String blockType;
        private Integer cost;
        private String dateCreated;
        private @Nullable List<GetBlockStorageFilter> filters;
        private String id;
        private String label;
        private String mountId;
        private String region;
        private Integer sizeGb;
        private String status;
        public Builder() {}
        public Builder(GetBlockStorageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedToInstance = defaults.attachedToInstance;
    	      this.blockType = defaults.blockType;
    	      this.cost = defaults.cost;
    	      this.dateCreated = defaults.dateCreated;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.mountId = defaults.mountId;
    	      this.region = defaults.region;
    	      this.sizeGb = defaults.sizeGb;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder attachedToInstance(String attachedToInstance) {
            this.attachedToInstance = Objects.requireNonNull(attachedToInstance);
            return this;
        }
        @CustomType.Setter
        public Builder blockType(String blockType) {
            this.blockType = Objects.requireNonNull(blockType);
            return this;
        }
        @CustomType.Setter
        public Builder cost(Integer cost) {
            this.cost = Objects.requireNonNull(cost);
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(String dateCreated) {
            this.dateCreated = Objects.requireNonNull(dateCreated);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetBlockStorageFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetBlockStorageFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder mountId(String mountId) {
            this.mountId = Objects.requireNonNull(mountId);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder sizeGb(Integer sizeGb) {
            this.sizeGb = Objects.requireNonNull(sizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetBlockStorageResult build() {
            final var o = new GetBlockStorageResult();
            o.attachedToInstance = attachedToInstance;
            o.blockType = blockType;
            o.cost = cost;
            o.dateCreated = dateCreated;
            o.filters = filters;
            o.id = id;
            o.label = label;
            o.mountId = mountId;
            o.region = region;
            o.sizeGb = sizeGb;
            o.status = status;
            return o;
        }
    }
}
