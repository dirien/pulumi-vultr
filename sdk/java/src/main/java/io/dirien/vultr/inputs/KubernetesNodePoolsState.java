// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.vultr.inputs.KubernetesNodePoolsNodeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesNodePoolsState extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesNodePoolsState Empty = new KubernetesNodePoolsState();

    /**
     * Enable the auto scaler for the default node pool.
     * 
     */
    @Import(name="autoScaler")
    private @Nullable Output<Boolean> autoScaler;

    /**
     * @return Enable the auto scaler for the default node pool.
     * 
     */
    public Optional<Output<Boolean>> autoScaler() {
        return Optional.ofNullable(this.autoScaler);
    }

    /**
     * The VKE cluster ID you want to attach this nodepool to.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The VKE cluster ID you want to attach this nodepool to.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Date node was created.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return Date node was created.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * Date of node pool updates.
     * 
     */
    @Import(name="dateUpdated")
    private @Nullable Output<String> dateUpdated;

    /**
     * @return Date of node pool updates.
     * 
     */
    public Optional<Output<String>> dateUpdated() {
        return Optional.ofNullable(this.dateUpdated);
    }

    /**
     * The label to be used as a prefix for nodes in this node pool.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label to be used as a prefix for nodes in this node pool.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The maximum number of nodes to use with the auto scaler.
     * 
     */
    @Import(name="maxNodes")
    private @Nullable Output<Integer> maxNodes;

    /**
     * @return The maximum number of nodes to use with the auto scaler.
     * 
     */
    public Optional<Output<Integer>> maxNodes() {
        return Optional.ofNullable(this.maxNodes);
    }

    /**
     * The minimum number of nodes to use with the auto scaler.
     * 
     */
    @Import(name="minNodes")
    private @Nullable Output<Integer> minNodes;

    /**
     * @return The minimum number of nodes to use with the auto scaler.
     * 
     */
    public Optional<Output<Integer>> minNodes() {
        return Optional.ofNullable(this.minNodes);
    }

    /**
     * The number of nodes in this node pool.
     * 
     */
    @Import(name="nodeQuantity")
    private @Nullable Output<Integer> nodeQuantity;

    /**
     * @return The number of nodes in this node pool.
     * 
     */
    public Optional<Output<Integer>> nodeQuantity() {
        return Optional.ofNullable(this.nodeQuantity);
    }

    /**
     * Array that contains information about nodes within this node pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<KubernetesNodePoolsNodeArgs>> nodes;

    /**
     * @return Array that contains information about nodes within this node pool.
     * 
     */
    public Optional<Output<List<KubernetesNodePoolsNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Status of node.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of node.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A tag that is assigned to this node pool.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return A tag that is assigned to this node pool.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private KubernetesNodePoolsState() {}

    private KubernetesNodePoolsState(KubernetesNodePoolsState $) {
        this.autoScaler = $.autoScaler;
        this.clusterId = $.clusterId;
        this.dateCreated = $.dateCreated;
        this.dateUpdated = $.dateUpdated;
        this.label = $.label;
        this.maxNodes = $.maxNodes;
        this.minNodes = $.minNodes;
        this.nodeQuantity = $.nodeQuantity;
        this.nodes = $.nodes;
        this.plan = $.plan;
        this.status = $.status;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesNodePoolsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesNodePoolsState $;

        public Builder() {
            $ = new KubernetesNodePoolsState();
        }

        public Builder(KubernetesNodePoolsState defaults) {
            $ = new KubernetesNodePoolsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoScaler Enable the auto scaler for the default node pool.
         * 
         * @return builder
         * 
         */
        public Builder autoScaler(@Nullable Output<Boolean> autoScaler) {
            $.autoScaler = autoScaler;
            return this;
        }

        /**
         * @param autoScaler Enable the auto scaler for the default node pool.
         * 
         * @return builder
         * 
         */
        public Builder autoScaler(Boolean autoScaler) {
            return autoScaler(Output.of(autoScaler));
        }

        /**
         * @param clusterId The VKE cluster ID you want to attach this nodepool to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The VKE cluster ID you want to attach this nodepool to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param dateCreated Date node was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated Date node was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param dateUpdated Date of node pool updates.
         * 
         * @return builder
         * 
         */
        public Builder dateUpdated(@Nullable Output<String> dateUpdated) {
            $.dateUpdated = dateUpdated;
            return this;
        }

        /**
         * @param dateUpdated Date of node pool updates.
         * 
         * @return builder
         * 
         */
        public Builder dateUpdated(String dateUpdated) {
            return dateUpdated(Output.of(dateUpdated));
        }

        /**
         * @param label The label to be used as a prefix for nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label to be used as a prefix for nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param maxNodes The maximum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder maxNodes(@Nullable Output<Integer> maxNodes) {
            $.maxNodes = maxNodes;
            return this;
        }

        /**
         * @param maxNodes The maximum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder maxNodes(Integer maxNodes) {
            return maxNodes(Output.of(maxNodes));
        }

        /**
         * @param minNodes The minimum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder minNodes(@Nullable Output<Integer> minNodes) {
            $.minNodes = minNodes;
            return this;
        }

        /**
         * @param minNodes The minimum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder minNodes(Integer minNodes) {
            return minNodes(Output.of(minNodes));
        }

        /**
         * @param nodeQuantity The number of nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeQuantity(@Nullable Output<Integer> nodeQuantity) {
            $.nodeQuantity = nodeQuantity;
            return this;
        }

        /**
         * @param nodeQuantity The number of nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeQuantity(Integer nodeQuantity) {
            return nodeQuantity(Output.of(nodeQuantity));
        }

        /**
         * @param nodes Array that contains information about nodes within this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<KubernetesNodePoolsNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes Array that contains information about nodes within this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<KubernetesNodePoolsNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes Array that contains information about nodes within this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(KubernetesNodePoolsNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param plan The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param status Status of node.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of node.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tag A tag that is assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag A tag that is assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public KubernetesNodePoolsState build() {
            return $;
        }
    }

}
