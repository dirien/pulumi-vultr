// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerForwardingRule {
    /**
     * @return Port on instance side.
     * 
     */
    private Integer backendPort;
    /**
     * @return Protocol on instance side. Possible values: &#34;http&#34;, &#34;https&#34;, &#34;tcp&#34;.
     * 
     */
    private String backendProtocol;
    /**
     * @return Port on load balancer side.
     * 
     */
    private Integer frontendPort;
    /**
     * @return Protocol on load balancer side. Possible values: &#34;http&#34;, &#34;https&#34;, &#34;tcp&#34;.
     * 
     */
    private String frontendProtocol;
    private @Nullable String ruleId;

    private LoadBalancerForwardingRule() {}
    /**
     * @return Port on instance side.
     * 
     */
    public Integer backendPort() {
        return this.backendPort;
    }
    /**
     * @return Protocol on instance side. Possible values: &#34;http&#34;, &#34;https&#34;, &#34;tcp&#34;.
     * 
     */
    public String backendProtocol() {
        return this.backendProtocol;
    }
    /**
     * @return Port on load balancer side.
     * 
     */
    public Integer frontendPort() {
        return this.frontendPort;
    }
    /**
     * @return Protocol on load balancer side. Possible values: &#34;http&#34;, &#34;https&#34;, &#34;tcp&#34;.
     * 
     */
    public String frontendProtocol() {
        return this.frontendProtocol;
    }
    public Optional<String> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerForwardingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer backendPort;
        private String backendProtocol;
        private Integer frontendPort;
        private String frontendProtocol;
        private @Nullable String ruleId;
        public Builder() {}
        public Builder(LoadBalancerForwardingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendPort = defaults.backendPort;
    	      this.backendProtocol = defaults.backendProtocol;
    	      this.frontendPort = defaults.frontendPort;
    	      this.frontendProtocol = defaults.frontendProtocol;
    	      this.ruleId = defaults.ruleId;
        }

        @CustomType.Setter
        public Builder backendPort(Integer backendPort) {
            this.backendPort = Objects.requireNonNull(backendPort);
            return this;
        }
        @CustomType.Setter
        public Builder backendProtocol(String backendProtocol) {
            this.backendProtocol = Objects.requireNonNull(backendProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder frontendPort(Integer frontendPort) {
            this.frontendPort = Objects.requireNonNull(frontendPort);
            return this;
        }
        @CustomType.Setter
        public Builder frontendProtocol(String frontendProtocol) {
            this.frontendProtocol = Objects.requireNonNull(frontendProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder ruleId(@Nullable String ruleId) {
            this.ruleId = ruleId;
            return this;
        }
        public LoadBalancerForwardingRule build() {
            final var o = new LoadBalancerForwardingRule();
            o.backendPort = backendPort;
            o.backendProtocol = backendProtocol;
            o.frontendPort = frontendPort;
            o.frontendProtocol = frontendProtocol;
            o.ruleId = ruleId;
            return o;
        }
    }
}
