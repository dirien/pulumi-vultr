// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceBackupsScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceBackupsScheduleArgs Empty = new InstanceBackupsScheduleArgs();

    /**
     * Day of month to run. Use values between 1 and 28.
     * 
     */
    @Import(name="dom")
    private @Nullable Output<Integer> dom;

    /**
     * @return Day of month to run. Use values between 1 and 28.
     * 
     */
    public Optional<Output<Integer>> dom() {
        return Optional.ofNullable(this.dom);
    }

    /**
     * Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
     * 
     */
    @Import(name="dow")
    private @Nullable Output<Integer> dow;

    /**
     * @return Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
     * 
     */
    public Optional<Output<Integer>> dow() {
        return Optional.ofNullable(this.dow);
    }

    /**
     * Hour of day to run in UTC.
     * 
     */
    @Import(name="hour")
    private @Nullable Output<Integer> hour;

    /**
     * @return Hour of day to run in UTC.
     * 
     */
    public Optional<Output<Integer>> hour() {
        return Optional.ofNullable(this.hour);
    }

    /**
     * Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `daily_alt_even`, or `daily_alt_odd`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `daily_alt_even`, or `daily_alt_odd`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private InstanceBackupsScheduleArgs() {}

    private InstanceBackupsScheduleArgs(InstanceBackupsScheduleArgs $) {
        this.dom = $.dom;
        this.dow = $.dow;
        this.hour = $.hour;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceBackupsScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceBackupsScheduleArgs $;

        public Builder() {
            $ = new InstanceBackupsScheduleArgs();
        }

        public Builder(InstanceBackupsScheduleArgs defaults) {
            $ = new InstanceBackupsScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dom Day of month to run. Use values between 1 and 28.
         * 
         * @return builder
         * 
         */
        public Builder dom(@Nullable Output<Integer> dom) {
            $.dom = dom;
            return this;
        }

        /**
         * @param dom Day of month to run. Use values between 1 and 28.
         * 
         * @return builder
         * 
         */
        public Builder dom(Integer dom) {
            return dom(Output.of(dom));
        }

        /**
         * @param dow Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
         * 
         * @return builder
         * 
         */
        public Builder dow(@Nullable Output<Integer> dow) {
            $.dow = dow;
            return this;
        }

        /**
         * @param dow Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`
         * 
         * @return builder
         * 
         */
        public Builder dow(Integer dow) {
            return dow(Output.of(dow));
        }

        /**
         * @param hour Hour of day to run in UTC.
         * 
         * @return builder
         * 
         */
        public Builder hour(@Nullable Output<Integer> hour) {
            $.hour = hour;
            return this;
        }

        /**
         * @param hour Hour of day to run in UTC.
         * 
         * @return builder
         * 
         */
        public Builder hour(Integer hour) {
            return hour(Output.of(hour));
        }

        /**
         * @param type Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `daily_alt_even`, or `daily_alt_odd`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `daily_alt_even`, or `daily_alt_odd`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstanceBackupsScheduleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
