// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetObjectStorageFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetObjectStorageResult {
    /**
     * @return The identifying cluster ID.
     * 
     */
    private Integer clusterId;
    /**
     * @return Date of creation for the object storage subscription.
     * 
     */
    private String dateCreated;
    private @Nullable List<GetObjectStorageFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The label of the object storage subscription.
     * 
     */
    private String label;
    /**
     * @return The location which this subscription resides in.
     * 
     */
    private String location;
    /**
     * @return The region ID of the object storage subscription.
     * 
     */
    private String region;
    /**
     * @return Your access key.
     * 
     */
    private String s3AccessKey;
    /**
     * @return The hostname for this subscription.
     * 
     */
    private String s3Hostname;
    /**
     * @return Your secret key.
     * 
     */
    private String s3SecretKey;
    /**
     * @return Current status of this object storage subscription.
     * 
     */
    private String status;

    private GetObjectStorageResult() {}
    /**
     * @return The identifying cluster ID.
     * 
     */
    public Integer clusterId() {
        return this.clusterId;
    }
    /**
     * @return Date of creation for the object storage subscription.
     * 
     */
    public String dateCreated() {
        return this.dateCreated;
    }
    public List<GetObjectStorageFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The label of the object storage subscription.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The location which this subscription resides in.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The region ID of the object storage subscription.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Your access key.
     * 
     */
    public String s3AccessKey() {
        return this.s3AccessKey;
    }
    /**
     * @return The hostname for this subscription.
     * 
     */
    public String s3Hostname() {
        return this.s3Hostname;
    }
    /**
     * @return Your secret key.
     * 
     */
    public String s3SecretKey() {
        return this.s3SecretKey;
    }
    /**
     * @return Current status of this object storage subscription.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetObjectStorageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer clusterId;
        private String dateCreated;
        private @Nullable List<GetObjectStorageFilter> filters;
        private String id;
        private String label;
        private String location;
        private String region;
        private String s3AccessKey;
        private String s3Hostname;
        private String s3SecretKey;
        private String status;
        public Builder() {}
        public Builder(GetObjectStorageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.dateCreated = defaults.dateCreated;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.location = defaults.location;
    	      this.region = defaults.region;
    	      this.s3AccessKey = defaults.s3AccessKey;
    	      this.s3Hostname = defaults.s3Hostname;
    	      this.s3SecretKey = defaults.s3SecretKey;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder clusterId(Integer clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(String dateCreated) {
            this.dateCreated = Objects.requireNonNull(dateCreated);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetObjectStorageFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetObjectStorageFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder s3AccessKey(String s3AccessKey) {
            this.s3AccessKey = Objects.requireNonNull(s3AccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder s3Hostname(String s3Hostname) {
            this.s3Hostname = Objects.requireNonNull(s3Hostname);
            return this;
        }
        @CustomType.Setter
        public Builder s3SecretKey(String s3SecretKey) {
            this.s3SecretKey = Objects.requireNonNull(s3SecretKey);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetObjectStorageResult build() {
            final var o = new GetObjectStorageResult();
            o.clusterId = clusterId;
            o.dateCreated = dateCreated;
            o.filters = filters;
            o.id = id;
            o.label = label;
            o.location = location;
            o.region = region;
            o.s3AccessKey = s3AccessKey;
            o.s3Hostname = s3Hostname;
            o.s3SecretKey = s3SecretKey;
            o.status = status;
            return o;
        }
    }
}
