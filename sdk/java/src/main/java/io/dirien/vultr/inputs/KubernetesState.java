// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.vultr.inputs.KubernetesNodePoolsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesState extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesState Empty = new KubernetesState();

    /**
     * IP range that your pods will run on in this cluster.
     * 
     */
    @Import(name="clusterSubnet")
    private @Nullable Output<String> clusterSubnet;

    /**
     * @return IP range that your pods will run on in this cluster.
     * 
     */
    public Optional<Output<String>> clusterSubnet() {
        return Optional.ofNullable(this.clusterSubnet);
    }

    /**
     * Date node was created.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return Date node was created.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * Domain for your Kubernetes clusters control plane.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return Domain for your Kubernetes clusters control plane.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * IP address of VKE cluster control plane.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IP address of VKE cluster control plane.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    @Import(name="kubeConfig")
    private @Nullable Output<String> kubeConfig;

    /**
     * @return Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    public Optional<Output<String>> kubeConfig() {
        return Optional.ofNullable(this.kubeConfig);
    }

    /**
     * The VKE clusters label.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The VKE clusters label.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Contains the default node pool that was deployed.
     * 
     */
    @Import(name="nodePools")
    private @Nullable Output<KubernetesNodePoolsArgs> nodePools;

    /**
     * @return Contains the default node pool that was deployed.
     * 
     */
    public Optional<Output<KubernetesNodePoolsArgs>> nodePools() {
        return Optional.ofNullable(this.nodePools);
    }

    /**
     * The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * IP range that services will run on this cluster.
     * 
     */
    @Import(name="serviceSubnet")
    private @Nullable Output<String> serviceSubnet;

    /**
     * @return IP range that services will run on this cluster.
     * 
     */
    public Optional<Output<String>> serviceSubnet() {
        return Optional.ofNullable(this.serviceSubnet);
    }

    /**
     * Status of node.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of node.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private KubernetesState() {}

    private KubernetesState(KubernetesState $) {
        this.clusterSubnet = $.clusterSubnet;
        this.dateCreated = $.dateCreated;
        this.endpoint = $.endpoint;
        this.ip = $.ip;
        this.kubeConfig = $.kubeConfig;
        this.label = $.label;
        this.nodePools = $.nodePools;
        this.region = $.region;
        this.serviceSubnet = $.serviceSubnet;
        this.status = $.status;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesState $;

        public Builder() {
            $ = new KubernetesState();
        }

        public Builder(KubernetesState defaults) {
            $ = new KubernetesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterSubnet IP range that your pods will run on in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterSubnet(@Nullable Output<String> clusterSubnet) {
            $.clusterSubnet = clusterSubnet;
            return this;
        }

        /**
         * @param clusterSubnet IP range that your pods will run on in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterSubnet(String clusterSubnet) {
            return clusterSubnet(Output.of(clusterSubnet));
        }

        /**
         * @param dateCreated Date node was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated Date node was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param endpoint Domain for your Kubernetes clusters control plane.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Domain for your Kubernetes clusters control plane.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param ip IP address of VKE cluster control plane.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP address of VKE cluster control plane.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param kubeConfig Base64 encoded Kubeconfig for this VKE cluster.
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(@Nullable Output<String> kubeConfig) {
            $.kubeConfig = kubeConfig;
            return this;
        }

        /**
         * @param kubeConfig Base64 encoded Kubeconfig for this VKE cluster.
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(String kubeConfig) {
            return kubeConfig(Output.of(kubeConfig));
        }

        /**
         * @param label The VKE clusters label.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The VKE clusters label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param nodePools Contains the default node pool that was deployed.
         * 
         * @return builder
         * 
         */
        public Builder nodePools(@Nullable Output<KubernetesNodePoolsArgs> nodePools) {
            $.nodePools = nodePools;
            return this;
        }

        /**
         * @param nodePools Contains the default node pool that was deployed.
         * 
         * @return builder
         * 
         */
        public Builder nodePools(KubernetesNodePoolsArgs nodePools) {
            return nodePools(Output.of(nodePools));
        }

        /**
         * @param region The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceSubnet IP range that services will run on this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubnet(@Nullable Output<String> serviceSubnet) {
            $.serviceSubnet = serviceSubnet;
            return this;
        }

        /**
         * @param serviceSubnet IP range that services will run on this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceSubnet(String serviceSubnet) {
            return serviceSubnet(Output.of(serviceSubnet));
        }

        /**
         * @param status Status of node.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of node.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param version The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public KubernetesState build() {
            return $;
        }
    }

}
