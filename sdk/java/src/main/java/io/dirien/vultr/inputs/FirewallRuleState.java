// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallRuleState extends com.pulumi.resources.ResourceArgs {

    public static final FirewallRuleState Empty = new FirewallRuleState();

    /**
     * The firewall group that the firewall rule will belong to.
     * 
     */
    @Import(name="firewallGroupId")
    private @Nullable Output<String> firewallGroupId;

    /**
     * @return The firewall group that the firewall rule will belong to.
     * 
     */
    public Optional<Output<String>> firewallGroupId() {
        return Optional.ofNullable(this.firewallGroupId);
    }

    /**
     * The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase
     * 
     */
    @Import(name="ipType")
    private @Nullable Output<String> ipType;

    /**
     * @return The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase
     * 
     */
    public Optional<Output<String>> ipType() {
        return Optional.ofNullable(this.ipType);
    }

    /**
     * A simple note for a given firewall rule
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return A simple note for a given firewall rule
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * TCP/UDP only. This field can be a specific port or a colon separated port range.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return TCP/UDP only. This field can be a specific port or a colon separated port range.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Possible values (&#34;&#34;, cloudflare)
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Possible values (&#34;&#34;, cloudflare)
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * IP address that you want to define for this firewall rule.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return IP address that you want to define for this firewall rule.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * The number of bits for the subnet in CIDR notation. Example: 32.
     * 
     */
    @Import(name="subnetSize")
    private @Nullable Output<Integer> subnetSize;

    /**
     * @return The number of bits for the subnet in CIDR notation. Example: 32.
     * 
     */
    public Optional<Output<Integer>> subnetSize() {
        return Optional.ofNullable(this.subnetSize);
    }

    private FirewallRuleState() {}

    private FirewallRuleState(FirewallRuleState $) {
        this.firewallGroupId = $.firewallGroupId;
        this.ipType = $.ipType;
        this.notes = $.notes;
        this.port = $.port;
        this.protocol = $.protocol;
        this.source = $.source;
        this.subnet = $.subnet;
        this.subnetSize = $.subnetSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallRuleState $;

        public Builder() {
            $ = new FirewallRuleState();
        }

        public Builder(FirewallRuleState defaults) {
            $ = new FirewallRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param firewallGroupId The firewall group that the firewall rule will belong to.
         * 
         * @return builder
         * 
         */
        public Builder firewallGroupId(@Nullable Output<String> firewallGroupId) {
            $.firewallGroupId = firewallGroupId;
            return this;
        }

        /**
         * @param firewallGroupId The firewall group that the firewall rule will belong to.
         * 
         * @return builder
         * 
         */
        public Builder firewallGroupId(String firewallGroupId) {
            return firewallGroupId(Output.of(firewallGroupId));
        }

        /**
         * @param ipType The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase
         * 
         * @return builder
         * 
         */
        public Builder ipType(@Nullable Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param notes A simple note for a given firewall rule
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes A simple note for a given firewall rule
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param port TCP/UDP only. This field can be a specific port or a colon separated port range.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port TCP/UDP only. This field can be a specific port or a colon separated port range.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param source Possible values (&#34;&#34;, cloudflare)
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Possible values (&#34;&#34;, cloudflare)
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param subnet IP address that you want to define for this firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet IP address that you want to define for this firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param subnetSize The number of bits for the subnet in CIDR notation. Example: 32.
         * 
         * @return builder
         * 
         */
        public Builder subnetSize(@Nullable Output<Integer> subnetSize) {
            $.subnetSize = subnetSize;
            return this;
        }

        /**
         * @param subnetSize The number of bits for the subnet in CIDR notation. Example: 32.
         * 
         * @return builder
         * 
         */
        public Builder subnetSize(Integer subnetSize) {
            return subnetSize(Output.of(subnetSize));
        }

        public FirewallRuleState build() {
            return $;
        }
    }

}
