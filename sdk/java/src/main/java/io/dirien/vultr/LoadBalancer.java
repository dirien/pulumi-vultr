// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.LoadBalancerArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.LoadBalancerState;
import io.dirien.vultr.outputs.LoadBalancerFirewallRule;
import io.dirien.vultr.outputs.LoadBalancerForwardingRule;
import io.dirien.vultr.outputs.LoadBalancerHealthCheck;
import io.dirien.vultr.outputs.LoadBalancerSsl;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Get information about a Vultr load balancer.
 * 
 * ## Example Usage
 * 
 * Create a new load balancer:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.LoadBalancer;
 * import com.pulumi.vultr.LoadBalancerArgs;
 * import com.pulumi.vultr.inputs.LoadBalancerForwardingRuleArgs;
 * import com.pulumi.vultr.inputs.LoadBalancerHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var lb = new LoadBalancer(&#34;lb&#34;, LoadBalancerArgs.builder()        
 *             .balancingAlgorithm(&#34;roundrobin&#34;)
 *             .forwardingRules(LoadBalancerForwardingRuleArgs.builder()
 *                 .backendPort(81)
 *                 .backendProtocol(&#34;http&#34;)
 *                 .frontendPort(82)
 *                 .frontendProtocol(&#34;http&#34;)
 *                 .build())
 *             .healthCheck(LoadBalancerHealthCheckArgs.builder()
 *                 .checkInterval(3)
 *                 .healthyThreshold(4)
 *                 .path(&#34;/test&#34;)
 *                 .port(&#34;8080&#34;)
 *                 .protocol(&#34;http&#34;)
 *                 .responseTimeout(1)
 *                 .unhealthyThreshold(2)
 *                 .build())
 *             .label(&#34;terraform lb example&#34;)
 *             .region(&#34;ewr&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load Balancers can be imported using the load balancer `ID`, e.g.
 * 
 * ```sh
 *  $ pulumi import vultr:index/loadBalancer:LoadBalancer lb b6a859c5-b299-49dd-8888-b1abbc517d08
 * ```
 * 
 */
@ResourceType(type="vultr:index/loadBalancer:LoadBalancer")
public class LoadBalancer extends com.pulumi.resources.CustomResource {
    /**
     * Array of instances that are currently attached to the load balancer.
     * 
     */
    @Export(name="attachedInstances", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> attachedInstances;

    /**
     * @return Array of instances that are currently attached to the load balancer.
     * 
     */
    public Output<List<String>> attachedInstances() {
        return this.attachedInstances;
    }
    /**
     * The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
     * 
     */
    @Export(name="balancingAlgorithm", refs={String.class}, tree="[0]")
    private Output<String> balancingAlgorithm;

    /**
     * @return The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
     * 
     */
    public Output<String> balancingAlgorithm() {
        return this.balancingAlgorithm;
    }
    /**
     * Name for your given sticky session.
     * 
     */
    @Export(name="cookieName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cookieName;

    /**
     * @return Name for your given sticky session.
     * 
     */
    public Output<Optional<String>> cookieName() {
        return Codegen.optional(this.cookieName);
    }
    /**
     * Defines the firewall rules for a load balancer.
     * 
     */
    @Export(name="firewallRules", refs={List.class,LoadBalancerFirewallRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoadBalancerFirewallRule>> firewallRules;

    /**
     * @return Defines the firewall rules for a load balancer.
     * 
     */
    public Output<Optional<List<LoadBalancerFirewallRule>>> firewallRules() {
        return Codegen.optional(this.firewallRules);
    }
    /**
     * List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    @Export(name="forwardingRules", refs={List.class,LoadBalancerForwardingRule.class}, tree="[0,1]")
    private Output<List<LoadBalancerForwardingRule>> forwardingRules;

    /**
     * @return List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    public Output<List<LoadBalancerForwardingRule>> forwardingRules() {
        return this.forwardingRules;
    }
    /**
     * Boolean value that indicates if SSL is enabled.
     * 
     */
    @Export(name="hasSsl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hasSsl;

    /**
     * @return Boolean value that indicates if SSL is enabled.
     * 
     */
    public Output<Boolean> hasSsl() {
        return this.hasSsl;
    }
    /**
     * A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    @Export(name="healthCheck", refs={LoadBalancerHealthCheck.class}, tree="[0]")
    private Output<LoadBalancerHealthCheck> healthCheck;

    /**
     * @return A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    public Output<LoadBalancerHealthCheck> healthCheck() {
        return this.healthCheck;
    }
    /**
     * IPv4 address for your load balancer.
     * 
     */
    @Export(name="ipv4", refs={String.class}, tree="[0]")
    private Output<String> ipv4;

    /**
     * @return IPv4 address for your load balancer.
     * 
     */
    public Output<String> ipv4() {
        return this.ipv4;
    }
    /**
     * IPv6 address for your load balancer.
     * 
     */
    @Export(name="ipv6", refs={String.class}, tree="[0]")
    private Output<String> ipv6;

    /**
     * @return IPv6 address for your load balancer.
     * 
     */
    public Output<String> ipv6() {
        return this.ipv6;
    }
    /**
     * The load balancer&#39;s label.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> label;

    /**
     * @return The load balancer&#39;s label.
     * 
     */
    public Output<Optional<String>> label() {
        return Codegen.optional(this.label);
    }
    /**
     * A private network ID that the load balancer should be attached to.
     * 
     * @deprecated
     * private_network is deprecated and should no longer be used. Instead, use vpc
     * 
     */
    @Deprecated /* private_network is deprecated and should no longer be used. Instead, use vpc */
    @Export(name="privateNetwork", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privateNetwork;

    /**
     * @return A private network ID that the load balancer should be attached to.
     * 
     */
    public Output<Optional<String>> privateNetwork() {
        return Codegen.optional(this.privateNetwork);
    }
    /**
     * Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    @Export(name="proxyProtocol", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> proxyProtocol;

    /**
     * @return Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    public Output<Optional<Boolean>> proxyProtocol() {
        return Codegen.optional(this.proxyProtocol);
    }
    /**
     * The region your load balancer is deployed in.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region your load balancer is deployed in.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
     * 
     */
    @Export(name="ssl", refs={LoadBalancerSsl.class}, tree="[0]")
    private Output</* @Nullable */ LoadBalancerSsl> ssl;

    /**
     * @return A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
     * 
     */
    public Output<Optional<LoadBalancerSsl>> ssl() {
        return Codegen.optional(this.ssl);
    }
    /**
     * Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    @Export(name="sslRedirect", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> sslRedirect;

    /**
     * @return Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    public Output<Optional<Boolean>> sslRedirect() {
        return Codegen.optional(this.sslRedirect);
    }
    /**
     * Current status for the load balancer
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Current status for the load balancer
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * A VPC ID that the load balancer should be attached to.
     * 
     */
    @Export(name="vpc", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vpc;

    /**
     * @return A VPC ID that the load balancer should be attached to.
     * 
     */
    public Output<Optional<String>> vpc() {
        return Codegen.optional(this.vpc);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadBalancer(String name) {
        this(name, LoadBalancerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadBalancer(String name, LoadBalancerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadBalancer(String name, LoadBalancerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/loadBalancer:LoadBalancer", name, args == null ? LoadBalancerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LoadBalancer(String name, Output<String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/loadBalancer:LoadBalancer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadBalancer get(String name, Output<String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadBalancer(name, id, state, options);
    }
}
