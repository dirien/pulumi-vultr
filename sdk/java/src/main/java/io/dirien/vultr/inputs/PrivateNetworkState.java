// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateNetworkState extends com.pulumi.resources.ResourceArgs {

    public static final PrivateNetworkState Empty = new PrivateNetworkState();

    /**
     * The date that the network was added to your Vultr account.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return The date that the network was added to your Vultr account.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * The description you want to give your network.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description you want to give your network.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The region ID that you want the network to be created in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region ID that you want the network to be created in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The IPv4 subnet to be used when attaching instances to this network.
     * 
     */
    @Import(name="v4Subnet")
    private @Nullable Output<String> v4Subnet;

    /**
     * @return The IPv4 subnet to be used when attaching instances to this network.
     * 
     */
    public Optional<Output<String>> v4Subnet() {
        return Optional.ofNullable(this.v4Subnet);
    }

    /**
     * The number of bits for the netmask in CIDR notation. Example: 32
     * 
     */
    @Import(name="v4SubnetMask")
    private @Nullable Output<Integer> v4SubnetMask;

    /**
     * @return The number of bits for the netmask in CIDR notation. Example: 32
     * 
     */
    public Optional<Output<Integer>> v4SubnetMask() {
        return Optional.ofNullable(this.v4SubnetMask);
    }

    private PrivateNetworkState() {}

    private PrivateNetworkState(PrivateNetworkState $) {
        this.dateCreated = $.dateCreated;
        this.description = $.description;
        this.region = $.region;
        this.v4Subnet = $.v4Subnet;
        this.v4SubnetMask = $.v4SubnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateNetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateNetworkState $;

        public Builder() {
            $ = new PrivateNetworkState();
        }

        public Builder(PrivateNetworkState defaults) {
            $ = new PrivateNetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dateCreated The date that the network was added to your Vultr account.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated The date that the network was added to your Vultr account.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param description The description you want to give your network.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description you want to give your network.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param region The region ID that you want the network to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region ID that you want the network to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param v4Subnet The IPv4 subnet to be used when attaching instances to this network.
         * 
         * @return builder
         * 
         */
        public Builder v4Subnet(@Nullable Output<String> v4Subnet) {
            $.v4Subnet = v4Subnet;
            return this;
        }

        /**
         * @param v4Subnet The IPv4 subnet to be used when attaching instances to this network.
         * 
         * @return builder
         * 
         */
        public Builder v4Subnet(String v4Subnet) {
            return v4Subnet(Output.of(v4Subnet));
        }

        /**
         * @param v4SubnetMask The number of bits for the netmask in CIDR notation. Example: 32
         * 
         * @return builder
         * 
         */
        public Builder v4SubnetMask(@Nullable Output<Integer> v4SubnetMask) {
            $.v4SubnetMask = v4SubnetMask;
            return this;
        }

        /**
         * @param v4SubnetMask The number of bits for the netmask in CIDR notation. Example: 32
         * 
         * @return builder
         * 
         */
        public Builder v4SubnetMask(Integer v4SubnetMask) {
            return v4SubnetMask(Output.of(v4SubnetMask));
        }

        public PrivateNetworkState build() {
            return $;
        }
    }

}
