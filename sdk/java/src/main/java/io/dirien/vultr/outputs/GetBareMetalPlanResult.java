// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetBareMetalPlanFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetBareMetalPlanResult {
    /**
     * @return The bandwidth available on the plan.
     * 
     */
    private Integer bandwidth;
    /**
     * @return The number of CPUs available on the plan.
     * 
     */
    private Integer cpuCount;
    /**
     * @return The CPU model of the plan.
     * 
     */
    private String cpuModel;
    /**
     * @return The number of CPU threads.
     * 
     */
    private Integer cpuThreads;
    /**
     * @return The description of the disk(s) on the plan.
     * 
     */
    private Integer disk;
    /**
     * @return The number of disks that this plan offers.
     * 
     */
    private Integer diskCount;
    private @Nullable List<GetBareMetalPlanFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> locations;
    /**
     * @return The price per month of the plan in USD.
     * 
     */
    private Integer monthlyCost;
    /**
     * @return The amount of memory available on the plan in MB.
     * 
     */
    private Integer ram;
    /**
     * @return The type of plan it is.
     * 
     */
    private String type;

    private GetBareMetalPlanResult() {}
    /**
     * @return The bandwidth available on the plan.
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The number of CPUs available on the plan.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return The CPU model of the plan.
     * 
     */
    public String cpuModel() {
        return this.cpuModel;
    }
    /**
     * @return The number of CPU threads.
     * 
     */
    public Integer cpuThreads() {
        return this.cpuThreads;
    }
    /**
     * @return The description of the disk(s) on the plan.
     * 
     */
    public Integer disk() {
        return this.disk;
    }
    /**
     * @return The number of disks that this plan offers.
     * 
     */
    public Integer diskCount() {
        return this.diskCount;
    }
    public List<GetBareMetalPlanFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> locations() {
        return this.locations;
    }
    /**
     * @return The price per month of the plan in USD.
     * 
     */
    public Integer monthlyCost() {
        return this.monthlyCost;
    }
    /**
     * @return The amount of memory available on the plan in MB.
     * 
     */
    public Integer ram() {
        return this.ram;
    }
    /**
     * @return The type of plan it is.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBareMetalPlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bandwidth;
        private Integer cpuCount;
        private String cpuModel;
        private Integer cpuThreads;
        private Integer disk;
        private Integer diskCount;
        private @Nullable List<GetBareMetalPlanFilter> filters;
        private String id;
        private List<String> locations;
        private Integer monthlyCost;
        private Integer ram;
        private String type;
        public Builder() {}
        public Builder(GetBareMetalPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.cpuCount = defaults.cpuCount;
    	      this.cpuModel = defaults.cpuModel;
    	      this.cpuThreads = defaults.cpuThreads;
    	      this.disk = defaults.disk;
    	      this.diskCount = defaults.diskCount;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.locations = defaults.locations;
    	      this.monthlyCost = defaults.monthlyCost;
    	      this.ram = defaults.ram;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(Integer cpuCount) {
            this.cpuCount = Objects.requireNonNull(cpuCount);
            return this;
        }
        @CustomType.Setter
        public Builder cpuModel(String cpuModel) {
            this.cpuModel = Objects.requireNonNull(cpuModel);
            return this;
        }
        @CustomType.Setter
        public Builder cpuThreads(Integer cpuThreads) {
            this.cpuThreads = Objects.requireNonNull(cpuThreads);
            return this;
        }
        @CustomType.Setter
        public Builder disk(Integer disk) {
            this.disk = Objects.requireNonNull(disk);
            return this;
        }
        @CustomType.Setter
        public Builder diskCount(Integer diskCount) {
            this.diskCount = Objects.requireNonNull(diskCount);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetBareMetalPlanFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetBareMetalPlanFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder monthlyCost(Integer monthlyCost) {
            this.monthlyCost = Objects.requireNonNull(monthlyCost);
            return this;
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            this.ram = Objects.requireNonNull(ram);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetBareMetalPlanResult build() {
            final var o = new GetBareMetalPlanResult();
            o.bandwidth = bandwidth;
            o.cpuCount = cpuCount;
            o.cpuModel = cpuModel;
            o.cpuThreads = cpuThreads;
            o.disk = disk;
            o.diskCount = diskCount;
            o.filters = filters;
            o.id = id;
            o.locations = locations;
            o.monthlyCost = monthlyCost;
            o.ram = ram;
            o.type = type;
            return o;
        }
    }
}
