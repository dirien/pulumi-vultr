// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpArgs Empty = new ReservedIpArgs();

    /**
     * The VPS ID you want this reserved IP to be attached to.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The VPS ID you want this reserved IP to be attached to.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
     * 
     */
    @Import(name="ipType", required=true)
    private Output<String> ipType;

    /**
     * @return The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
     * 
     */
    public Output<String> ipType() {
        return this.ipType;
    }

    /**
     * The label you want to give your reserved IP.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label you want to give your reserved IP.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The region ID that you want the reserved IP to be created in.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region ID that you want the reserved IP to be created in.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private ReservedIpArgs() {}

    private ReservedIpArgs(ReservedIpArgs $) {
        this.instanceId = $.instanceId;
        this.ipType = $.ipType;
        this.label = $.label;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpArgs $;

        public Builder() {
            $ = new ReservedIpArgs();
        }

        public Builder(ReservedIpArgs defaults) {
            $ = new ReservedIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The VPS ID you want this reserved IP to be attached to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The VPS ID you want this reserved IP to be attached to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ipType The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipType(Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param label The label you want to give your reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label you want to give your reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param region The region ID that you want the reserved IP to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region ID that you want the reserved IP to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ReservedIpArgs build() {
            $.ipType = Objects.requireNonNull($.ipType, "expected parameter 'ipType' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
