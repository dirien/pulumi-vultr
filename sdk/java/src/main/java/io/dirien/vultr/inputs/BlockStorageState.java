// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockStorageState extends com.pulumi.resources.ResourceArgs {

    public static final BlockStorageState Empty = new BlockStorageState();

    /**
     * VPS ID that you want to have this block storage attached to.
     * 
     */
    @Import(name="attachedToInstance")
    private @Nullable Output<String> attachedToInstance;

    /**
     * @return VPS ID that you want to have this block storage attached to.
     * 
     */
    public Optional<Output<String>> attachedToInstance() {
        return Optional.ofNullable(this.attachedToInstance);
    }

    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    @Import(name="blockType")
    private @Nullable Output<String> blockType;

    /**
     * @return Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    public Optional<Output<String>> blockType() {
        return Optional.ofNullable(this.blockType);
    }

    /**
     * The monthly cost of this block storage.
     * 
     */
    @Import(name="cost")
    private @Nullable Output<Double> cost;

    /**
     * @return The monthly cost of this block storage.
     * 
     */
    public Optional<Output<Double>> cost() {
        return Optional.ofNullable(this.cost);
    }

    /**
     * The date this block storage was created.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return The date this block storage was created.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * Label that is given to your block storage.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label that is given to your block storage.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    @Import(name="live")
    private @Nullable Output<Boolean> live;

    /**
     * @return Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    public Optional<Output<Boolean>> live() {
        return Optional.ofNullable(this.live);
    }

    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    @Import(name="mountId")
    private @Nullable Output<String> mountId;

    /**
     * @return An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    public Optional<Output<String>> mountId() {
        return Optional.ofNullable(this.mountId);
    }

    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The size of the given block storage.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return The size of the given block storage.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    /**
     * Current status of your block storage.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current status of your block storage.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BlockStorageState() {}

    private BlockStorageState(BlockStorageState $) {
        this.attachedToInstance = $.attachedToInstance;
        this.blockType = $.blockType;
        this.cost = $.cost;
        this.dateCreated = $.dateCreated;
        this.label = $.label;
        this.live = $.live;
        this.mountId = $.mountId;
        this.region = $.region;
        this.sizeGb = $.sizeGb;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockStorageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockStorageState $;

        public Builder() {
            $ = new BlockStorageState();
        }

        public Builder(BlockStorageState defaults) {
            $ = new BlockStorageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedToInstance VPS ID that you want to have this block storage attached to.
         * 
         * @return builder
         * 
         */
        public Builder attachedToInstance(@Nullable Output<String> attachedToInstance) {
            $.attachedToInstance = attachedToInstance;
            return this;
        }

        /**
         * @param attachedToInstance VPS ID that you want to have this block storage attached to.
         * 
         * @return builder
         * 
         */
        public Builder attachedToInstance(String attachedToInstance) {
            return attachedToInstance(Output.of(attachedToInstance));
        }

        /**
         * @param blockType Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
         * 
         * @return builder
         * 
         */
        public Builder blockType(@Nullable Output<String> blockType) {
            $.blockType = blockType;
            return this;
        }

        /**
         * @param blockType Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
         * 
         * @return builder
         * 
         */
        public Builder blockType(String blockType) {
            return blockType(Output.of(blockType));
        }

        /**
         * @param cost The monthly cost of this block storage.
         * 
         * @return builder
         * 
         */
        public Builder cost(@Nullable Output<Double> cost) {
            $.cost = cost;
            return this;
        }

        /**
         * @param cost The monthly cost of this block storage.
         * 
         * @return builder
         * 
         */
        public Builder cost(Double cost) {
            return cost(Output.of(cost));
        }

        /**
         * @param dateCreated The date this block storage was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated The date this block storage was created.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param label Label that is given to your block storage.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label that is given to your block storage.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param live Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder live(@Nullable Output<Boolean> live) {
            $.live = live;
            return this;
        }

        /**
         * @param live Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder live(Boolean live) {
            return live(Output.of(live));
        }

        /**
         * @param mountId An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
         * 
         * @return builder
         * 
         */
        public Builder mountId(@Nullable Output<String> mountId) {
            $.mountId = mountId;
            return this;
        }

        /**
         * @param mountId An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
         * 
         * @return builder
         * 
         */
        public Builder mountId(String mountId) {
            return mountId(Output.of(mountId));
        }

        /**
         * @param region Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sizeGb The size of the given block storage.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb The size of the given block storage.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        /**
         * @param status Current status of your block storage.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current status of your block storage.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BlockStorageState build() {
            return $;
        }
    }

}
