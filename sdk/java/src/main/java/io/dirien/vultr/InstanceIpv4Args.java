// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceIpv4Args extends com.pulumi.resources.ResourceArgs {

    public static final InstanceIpv4Args Empty = new InstanceIpv4Args();

    /**
     * The ID of the instance to be assigned the IPv4 address.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the instance to be assigned the IPv4 address.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     * 
     */
    @Import(name="reboot")
    private @Nullable Output<Boolean> reboot;

    /**
     * @return Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     * 
     */
    public Optional<Output<Boolean>> reboot() {
        return Optional.ofNullable(this.reboot);
    }

    private InstanceIpv4Args() {}

    private InstanceIpv4Args(InstanceIpv4Args $) {
        this.instanceId = $.instanceId;
        this.reboot = $.reboot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceIpv4Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceIpv4Args $;

        public Builder() {
            $ = new InstanceIpv4Args();
        }

        public Builder(InstanceIpv4Args defaults) {
            $ = new InstanceIpv4Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The ID of the instance to be assigned the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance to be assigned the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param reboot Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder reboot(@Nullable Output<Boolean> reboot) {
            $.reboot = reboot;
            return this;
        }

        /**
         * @param reboot Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder reboot(Boolean reboot) {
            return reboot(Output.of(reboot));
        }

        public InstanceIpv4Args build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
