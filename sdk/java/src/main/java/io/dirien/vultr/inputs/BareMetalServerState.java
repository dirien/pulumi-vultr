// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BareMetalServerState extends com.pulumi.resources.ResourceArgs {

    public static final BareMetalServerState Empty = new BareMetalServerState();

    /**
     * Whether an activation email will be sent when the server is ready.
     * 
     */
    @Import(name="activationEmail")
    private @Nullable Output<Boolean> activationEmail;

    /**
     * @return Whether an activation email will be sent when the server is ready.
     * 
     */
    public Optional<Output<Boolean>> activationEmail() {
        return Optional.ofNullable(this.activationEmail);
    }

    /**
     * The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
     * 
     */
    @Import(name="appId")
    private @Nullable Output<Integer> appId;

    /**
     * @return The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
     * 
     */
    public Optional<Output<Integer>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The number of CPUs available on the server.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return The number of CPUs available on the server.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * The date the server was added to your Vultr account.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return The date the server was added to your Vultr account.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * The server&#39;s default password.
     * 
     */
    @Import(name="defaultPassword")
    private @Nullable Output<String> defaultPassword;

    /**
     * @return The server&#39;s default password.
     * 
     */
    public Optional<Output<String>> defaultPassword() {
        return Optional.ofNullable(this.defaultPassword);
    }

    /**
     * The description of the disk(s) on the server.
     * 
     */
    @Import(name="disk")
    private @Nullable Output<String> disk;

    /**
     * @return The description of the disk(s) on the server.
     * 
     */
    public Optional<Output<String>> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * Whether the server has IPv6 networking activated.
     * 
     */
    @Import(name="enableIpv6")
    private @Nullable Output<Boolean> enableIpv6;

    /**
     * @return Whether the server has IPv6 networking activated.
     * 
     */
    public Optional<Output<Boolean>> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }

    /**
     * The server&#39;s IPv4 gateway.
     * 
     */
    @Import(name="gatewayV4")
    private @Nullable Output<String> gatewayV4;

    /**
     * @return The server&#39;s IPv4 gateway.
     * 
     */
    public Optional<Output<String>> gatewayV4() {
        return Optional.ofNullable(this.gatewayV4);
    }

    /**
     * The hostname to assign to the server.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname to assign to the server.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * A label for the server.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return A label for the server.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The MAC address associated with the server.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<Integer> macAddress;

    /**
     * @return The MAC address associated with the server.
     * 
     */
    public Optional<Output<Integer>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The server&#39;s main IP address.
     * 
     */
    @Import(name="mainIp")
    private @Nullable Output<String> mainIp;

    /**
     * @return The server&#39;s main IP address.
     * 
     */
    public Optional<Output<String>> mainIp() {
        return Optional.ofNullable(this.mainIp);
    }

    /**
     * The server&#39;s IPv4 netmask.
     * 
     */
    @Import(name="netmaskV4")
    private @Nullable Output<String> netmaskV4;

    /**
     * @return The server&#39;s IPv4 netmask.
     * 
     */
    public Optional<Output<String>> netmaskV4() {
        return Optional.ofNullable(this.netmaskV4);
    }

    /**
     * The string description of the operating system installed on the server.
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return The string description of the operating system installed on the server.
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
     * 
     */
    @Import(name="osId")
    private @Nullable Output<Integer> osId;

    /**
     * @return The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
     * 
     */
    public Optional<Output<Integer>> osId() {
        return Optional.ofNullable(this.osId);
    }

    /**
     * The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The amount of memory available on the server in MB.
     * 
     */
    @Import(name="ram")
    private @Nullable Output<String> ram;

    /**
     * @return The amount of memory available on the server in MB.
     * 
     */
    public Optional<Output<String>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the floating IP to use as the main IP of this server. [See Reserved IPs](https://www.vultr.com/api/#operation/list-reserved-ips)
     * 
     */
    @Import(name="reservedIpv4")
    private @Nullable Output<String> reservedIpv4;

    /**
     * @return The ID of the floating IP to use as the main IP of this server. [See Reserved IPs](https://www.vultr.com/api/#operation/list-reserved-ips)
     * 
     */
    public Optional<Output<String>> reservedIpv4() {
        return Optional.ofNullable(this.reservedIpv4);
    }

    /**
     * The ID of the startup script you want added to the server.
     * 
     */
    @Import(name="scriptId")
    private @Nullable Output<String> scriptId;

    /**
     * @return The ID of the startup script you want added to the server.
     * 
     */
    public Optional<Output<String>> scriptId() {
        return Optional.ofNullable(this.scriptId);
    }

    /**
     * The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
     * 
     */
    @Import(name="sshKeyIds")
    private @Nullable Output<List<String>> sshKeyIds;

    /**
     * @return A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
     * 
     */
    public Optional<Output<List<String>>> sshKeyIds() {
        return Optional.ofNullable(this.sshKeyIds);
    }

    /**
     * The status of the server&#39;s subscription.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the server&#39;s subscription.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A list of tags to apply to the servier.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to apply to the servier.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The main IPv6 network address.
     * 
     */
    @Import(name="v6MainIp")
    private @Nullable Output<String> v6MainIp;

    /**
     * @return The main IPv6 network address.
     * 
     */
    public Optional<Output<String>> v6MainIp() {
        return Optional.ofNullable(this.v6MainIp);
    }

    /**
     * The IPv6 subnet.
     * 
     */
    @Import(name="v6Network")
    private @Nullable Output<String> v6Network;

    /**
     * @return The IPv6 subnet.
     * 
     */
    public Optional<Output<String>> v6Network() {
        return Optional.ofNullable(this.v6Network);
    }

    /**
     * The IPv6 network size in bits.
     * 
     */
    @Import(name="v6NetworkSize")
    private @Nullable Output<Integer> v6NetworkSize;

    /**
     * @return The IPv6 network size in bits.
     * 
     */
    public Optional<Output<Integer>> v6NetworkSize() {
        return Optional.ofNullable(this.v6NetworkSize);
    }

    /**
     * A list of VPC 2.0 IDs to be attached to the server.
     * 
     */
    @Import(name="vpc2Ids")
    private @Nullable Output<List<String>> vpc2Ids;

    /**
     * @return A list of VPC 2.0 IDs to be attached to the server.
     * 
     */
    public Optional<Output<List<String>>> vpc2Ids() {
        return Optional.ofNullable(this.vpc2Ids);
    }

    private BareMetalServerState() {}

    private BareMetalServerState(BareMetalServerState $) {
        this.activationEmail = $.activationEmail;
        this.appId = $.appId;
        this.cpuCount = $.cpuCount;
        this.dateCreated = $.dateCreated;
        this.defaultPassword = $.defaultPassword;
        this.disk = $.disk;
        this.enableIpv6 = $.enableIpv6;
        this.gatewayV4 = $.gatewayV4;
        this.hostname = $.hostname;
        this.imageId = $.imageId;
        this.label = $.label;
        this.macAddress = $.macAddress;
        this.mainIp = $.mainIp;
        this.netmaskV4 = $.netmaskV4;
        this.os = $.os;
        this.osId = $.osId;
        this.plan = $.plan;
        this.ram = $.ram;
        this.region = $.region;
        this.reservedIpv4 = $.reservedIpv4;
        this.scriptId = $.scriptId;
        this.snapshotId = $.snapshotId;
        this.sshKeyIds = $.sshKeyIds;
        this.status = $.status;
        this.tags = $.tags;
        this.userData = $.userData;
        this.v6MainIp = $.v6MainIp;
        this.v6Network = $.v6Network;
        this.v6NetworkSize = $.v6NetworkSize;
        this.vpc2Ids = $.vpc2Ids;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BareMetalServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BareMetalServerState $;

        public Builder() {
            $ = new BareMetalServerState();
        }

        public Builder(BareMetalServerState defaults) {
            $ = new BareMetalServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationEmail Whether an activation email will be sent when the server is ready.
         * 
         * @return builder
         * 
         */
        public Builder activationEmail(@Nullable Output<Boolean> activationEmail) {
            $.activationEmail = activationEmail;
            return this;
        }

        /**
         * @param activationEmail Whether an activation email will be sent when the server is ready.
         * 
         * @return builder
         * 
         */
        public Builder activationEmail(Boolean activationEmail) {
            return activationEmail(Output.of(activationEmail));
        }

        /**
         * @param appId The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<Integer> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
         * 
         * @return builder
         * 
         */
        public Builder appId(Integer appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param cpuCount The number of CPUs available on the server.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount The number of CPUs available on the server.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param dateCreated The date the server was added to your Vultr account.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated The date the server was added to your Vultr account.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param defaultPassword The server&#39;s default password.
         * 
         * @return builder
         * 
         */
        public Builder defaultPassword(@Nullable Output<String> defaultPassword) {
            $.defaultPassword = defaultPassword;
            return this;
        }

        /**
         * @param defaultPassword The server&#39;s default password.
         * 
         * @return builder
         * 
         */
        public Builder defaultPassword(String defaultPassword) {
            return defaultPassword(Output.of(defaultPassword));
        }

        /**
         * @param disk The description of the disk(s) on the server.
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Output<String> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk The description of the disk(s) on the server.
         * 
         * @return builder
         * 
         */
        public Builder disk(String disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param enableIpv6 Whether the server has IPv6 networking activated.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(@Nullable Output<Boolean> enableIpv6) {
            $.enableIpv6 = enableIpv6;
            return this;
        }

        /**
         * @param enableIpv6 Whether the server has IPv6 networking activated.
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(Boolean enableIpv6) {
            return enableIpv6(Output.of(enableIpv6));
        }

        /**
         * @param gatewayV4 The server&#39;s IPv4 gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayV4(@Nullable Output<String> gatewayV4) {
            $.gatewayV4 = gatewayV4;
            return this;
        }

        /**
         * @param gatewayV4 The server&#39;s IPv4 gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayV4(String gatewayV4) {
            return gatewayV4(Output.of(gatewayV4));
        }

        /**
         * @param hostname The hostname to assign to the server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname to assign to the server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param imageId The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param label A label for the server.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A label for the server.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param macAddress The MAC address associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<Integer> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The MAC address associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(Integer macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param mainIp The server&#39;s main IP address.
         * 
         * @return builder
         * 
         */
        public Builder mainIp(@Nullable Output<String> mainIp) {
            $.mainIp = mainIp;
            return this;
        }

        /**
         * @param mainIp The server&#39;s main IP address.
         * 
         * @return builder
         * 
         */
        public Builder mainIp(String mainIp) {
            return mainIp(Output.of(mainIp));
        }

        /**
         * @param netmaskV4 The server&#39;s IPv4 netmask.
         * 
         * @return builder
         * 
         */
        public Builder netmaskV4(@Nullable Output<String> netmaskV4) {
            $.netmaskV4 = netmaskV4;
            return this;
        }

        /**
         * @param netmaskV4 The server&#39;s IPv4 netmask.
         * 
         * @return builder
         * 
         */
        public Builder netmaskV4(String netmaskV4) {
            return netmaskV4(Output.of(netmaskV4));
        }

        /**
         * @param os The string description of the operating system installed on the server.
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The string description of the operating system installed on the server.
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param osId The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
         * 
         * @return builder
         * 
         */
        public Builder osId(@Nullable Output<Integer> osId) {
            $.osId = osId;
            return this;
        }

        /**
         * @param osId The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
         * 
         * @return builder
         * 
         */
        public Builder osId(Integer osId) {
            return osId(Output.of(osId));
        }

        /**
         * @param plan The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param ram The amount of memory available on the server in MB.
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<String> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of memory available on the server in MB.
         * 
         * @return builder
         * 
         */
        public Builder ram(String ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param region The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param reservedIpv4 The ID of the floating IP to use as the main IP of this server. [See Reserved IPs](https://www.vultr.com/api/#operation/list-reserved-ips)
         * 
         * @return builder
         * 
         */
        public Builder reservedIpv4(@Nullable Output<String> reservedIpv4) {
            $.reservedIpv4 = reservedIpv4;
            return this;
        }

        /**
         * @param reservedIpv4 The ID of the floating IP to use as the main IP of this server. [See Reserved IPs](https://www.vultr.com/api/#operation/list-reserved-ips)
         * 
         * @return builder
         * 
         */
        public Builder reservedIpv4(String reservedIpv4) {
            return reservedIpv4(Output.of(reservedIpv4));
        }

        /**
         * @param scriptId The ID of the startup script you want added to the server.
         * 
         * @return builder
         * 
         */
        public Builder scriptId(@Nullable Output<String> scriptId) {
            $.scriptId = scriptId;
            return this;
        }

        /**
         * @param scriptId The ID of the startup script you want added to the server.
         * 
         * @return builder
         * 
         */
        public Builder scriptId(String scriptId) {
            return scriptId(Output.of(scriptId));
        }

        /**
         * @param snapshotId The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param sshKeyIds A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(@Nullable Output<List<String>> sshKeyIds) {
            $.sshKeyIds = sshKeyIds;
            return this;
        }

        /**
         * @param sshKeyIds A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(List<String> sshKeyIds) {
            return sshKeyIds(Output.of(sshKeyIds));
        }

        /**
         * @param sshKeyIds A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(String... sshKeyIds) {
            return sshKeyIds(List.of(sshKeyIds));
        }

        /**
         * @param status The status of the server&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the server&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A list of tags to apply to the servier.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to apply to the servier.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to apply to the servier.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param userData Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param v6MainIp The main IPv6 network address.
         * 
         * @return builder
         * 
         */
        public Builder v6MainIp(@Nullable Output<String> v6MainIp) {
            $.v6MainIp = v6MainIp;
            return this;
        }

        /**
         * @param v6MainIp The main IPv6 network address.
         * 
         * @return builder
         * 
         */
        public Builder v6MainIp(String v6MainIp) {
            return v6MainIp(Output.of(v6MainIp));
        }

        /**
         * @param v6Network The IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder v6Network(@Nullable Output<String> v6Network) {
            $.v6Network = v6Network;
            return this;
        }

        /**
         * @param v6Network The IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder v6Network(String v6Network) {
            return v6Network(Output.of(v6Network));
        }

        /**
         * @param v6NetworkSize The IPv6 network size in bits.
         * 
         * @return builder
         * 
         */
        public Builder v6NetworkSize(@Nullable Output<Integer> v6NetworkSize) {
            $.v6NetworkSize = v6NetworkSize;
            return this;
        }

        /**
         * @param v6NetworkSize The IPv6 network size in bits.
         * 
         * @return builder
         * 
         */
        public Builder v6NetworkSize(Integer v6NetworkSize) {
            return v6NetworkSize(Output.of(v6NetworkSize));
        }

        /**
         * @param vpc2Ids A list of VPC 2.0 IDs to be attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder vpc2Ids(@Nullable Output<List<String>> vpc2Ids) {
            $.vpc2Ids = vpc2Ids;
            return this;
        }

        /**
         * @param vpc2Ids A list of VPC 2.0 IDs to be attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder vpc2Ids(List<String> vpc2Ids) {
            return vpc2Ids(Output.of(vpc2Ids));
        }

        /**
         * @param vpc2Ids A list of VPC 2.0 IDs to be attached to the server.
         * 
         * @return builder
         * 
         */
        public Builder vpc2Ids(String... vpc2Ids) {
            return vpc2Ids(List.of(vpc2Ids));
        }

        public BareMetalServerState build() {
            return $;
        }
    }

}
