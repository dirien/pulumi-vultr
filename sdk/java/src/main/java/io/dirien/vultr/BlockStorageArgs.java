// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlockStorageArgs Empty = new BlockStorageArgs();

    /**
     * VPS ID that you want to have this block storage attached to.
     * 
     */
    @Import(name="attachedToInstance")
    private @Nullable Output<String> attachedToInstance;

    /**
     * @return VPS ID that you want to have this block storage attached to.
     * 
     */
    public Optional<Output<String>> attachedToInstance() {
        return Optional.ofNullable(this.attachedToInstance);
    }

    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    @Import(name="blockType")
    private @Nullable Output<String> blockType;

    /**
     * @return Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    public Optional<Output<String>> blockType() {
        return Optional.ofNullable(this.blockType);
    }

    /**
     * Label that is given to your block storage.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label that is given to your block storage.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    @Import(name="live")
    private @Nullable Output<Boolean> live;

    /**
     * @return Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    public Optional<Output<Boolean>> live() {
        return Optional.ofNullable(this.live);
    }

    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The size of the given block storage.
     * 
     */
    @Import(name="sizeGb", required=true)
    private Output<Integer> sizeGb;

    /**
     * @return The size of the given block storage.
     * 
     */
    public Output<Integer> sizeGb() {
        return this.sizeGb;
    }

    private BlockStorageArgs() {}

    private BlockStorageArgs(BlockStorageArgs $) {
        this.attachedToInstance = $.attachedToInstance;
        this.blockType = $.blockType;
        this.label = $.label;
        this.live = $.live;
        this.region = $.region;
        this.sizeGb = $.sizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockStorageArgs $;

        public Builder() {
            $ = new BlockStorageArgs();
        }

        public Builder(BlockStorageArgs defaults) {
            $ = new BlockStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedToInstance VPS ID that you want to have this block storage attached to.
         * 
         * @return builder
         * 
         */
        public Builder attachedToInstance(@Nullable Output<String> attachedToInstance) {
            $.attachedToInstance = attachedToInstance;
            return this;
        }

        /**
         * @param attachedToInstance VPS ID that you want to have this block storage attached to.
         * 
         * @return builder
         * 
         */
        public Builder attachedToInstance(String attachedToInstance) {
            return attachedToInstance(Output.of(attachedToInstance));
        }

        /**
         * @param blockType Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
         * 
         * @return builder
         * 
         */
        public Builder blockType(@Nullable Output<String> blockType) {
            $.blockType = blockType;
            return this;
        }

        /**
         * @param blockType Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
         * 
         * @return builder
         * 
         */
        public Builder blockType(String blockType) {
            return blockType(Output.of(blockType));
        }

        /**
         * @param label Label that is given to your block storage.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label that is given to your block storage.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param live Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder live(@Nullable Output<Boolean> live) {
            $.live = live;
            return this;
        }

        /**
         * @param live Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder live(Boolean live) {
            return live(Output.of(live));
        }

        /**
         * @param region Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sizeGb The size of the given block storage.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb The size of the given block storage.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public BlockStorageArgs build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.sizeGb = Objects.requireNonNull($.sizeGb, "expected parameter 'sizeGb' to be non-null");
            return $;
        }
    }

}
