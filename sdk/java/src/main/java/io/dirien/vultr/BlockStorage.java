// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.BlockStorageArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.BlockStorageState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Vultr Block Storage resource. This can be used to create, read, modify, and delete Block Storage.
 * 
 * ## Example Usage
 * 
 * Create a new Block Storage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.BlockStorage;
 * import com.pulumi.vultr.BlockStorageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myBlockstorage = new BlockStorage(&#34;myBlockstorage&#34;, BlockStorageArgs.builder()        
 *             .region(&#34;ewr&#34;)
 *             .sizeGb(10)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Block Storage can be imported using the Block Storage `ID`, e.g.
 * 
 * ```sh
 *  $ pulumi import vultr:index/blockStorage:BlockStorage my_blockstorage e315835e-d466-4e89-9b4c-dfd8788d7685
 * ```
 * 
 */
@ResourceType(type="vultr:index/blockStorage:BlockStorage")
public class BlockStorage extends com.pulumi.resources.CustomResource {
    /**
     * VPS ID that you want to have this block storage attached to.
     * 
     */
    @Export(name="attachedToInstance", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> attachedToInstance;

    /**
     * @return VPS ID that you want to have this block storage attached to.
     * 
     */
    public Output<Optional<String>> attachedToInstance() {
        return Codegen.optional(this.attachedToInstance);
    }
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    @Export(name="blockType", refs={String.class}, tree="[0]")
    private Output<String> blockType;

    /**
     * @return Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `high_perf` or `storage_opt`.
     * 
     */
    public Output<String> blockType() {
        return this.blockType;
    }
    /**
     * The monthly cost of this block storage.
     * 
     */
    @Export(name="cost", refs={Double.class}, tree="[0]")
    private Output<Double> cost;

    /**
     * @return The monthly cost of this block storage.
     * 
     */
    public Output<Double> cost() {
        return this.cost;
    }
    /**
     * The date this block storage was created.
     * 
     */
    @Export(name="dateCreated", refs={String.class}, tree="[0]")
    private Output<String> dateCreated;

    /**
     * @return The date this block storage was created.
     * 
     */
    public Output<String> dateCreated() {
        return this.dateCreated;
    }
    /**
     * Label that is given to your block storage.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> label;

    /**
     * @return Label that is given to your block storage.
     * 
     */
    public Output<Optional<String>> label() {
        return Codegen.optional(this.label);
    }
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    @Export(name="live", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> live;

    /**
     * @return Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     * 
     */
    public Output<Optional<Boolean>> live() {
        return Codegen.optional(this.live);
    }
    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    @Export(name="mountId", refs={String.class}, tree="[0]")
    private Output<String> mountId;

    /**
     * @return An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     * 
     */
    public Output<String> mountId() {
        return this.mountId;
    }
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region in which this block storage will reside in. (Currently only NJ/NY supported region &#34;ewr&#34;)
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The size of the given block storage.
     * 
     */
    @Export(name="sizeGb", refs={Integer.class}, tree="[0]")
    private Output<Integer> sizeGb;

    /**
     * @return The size of the given block storage.
     * 
     */
    public Output<Integer> sizeGb() {
        return this.sizeGb;
    }
    /**
     * Current status of your block storage.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Current status of your block storage.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BlockStorage(String name) {
        this(name, BlockStorageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BlockStorage(String name, BlockStorageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BlockStorage(String name, BlockStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/blockStorage:BlockStorage", name, args == null ? BlockStorageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BlockStorage(String name, Output<String> id, @Nullable BlockStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/blockStorage:BlockStorage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BlockStorage get(String name, Output<String> id, @Nullable BlockStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BlockStorage(name, id, state, options);
    }
}
