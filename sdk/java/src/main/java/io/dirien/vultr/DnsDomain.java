// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.DnsDomainArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.DnsDomainState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Vultr DNS Domain resource. This can be used to create, read, modify, and delete DNS Domains.
 * 
 * ## Example Usage
 * 
 * Create a new DNS Domain
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.DnsDomain;
 * import com.pulumi.vultr.DnsDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDomain = new DnsDomain(&#34;myDomain&#34;, DnsDomainArgs.builder()        
 *             .domain(&#34;domain.com&#34;)
 *             .ip(&#34;66.42.94.227&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * DNS Domains can be imported using the Dns Domain `domain`, e.g.
 * 
 * ```sh
 *  $ pulumi import vultr:index/dnsDomain:DnsDomain name domain.com
 * ```
 * 
 */
@ResourceType(type="vultr:index/dnsDomain:DnsDomain")
public class DnsDomain extends com.pulumi.resources.CustomResource {
    /**
     * The date the domain was added to your account.
     * 
     */
    @Export(name="dateCreated", refs={String.class}, tree="[0]")
    private Output<String> dateCreated;

    /**
     * @return The date the domain was added to your account.
     * 
     */
    public Output<String> dateCreated() {
        return this.dateCreated;
    }
    /**
     * The Domain&#39;s DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
     * 
     */
    @Export(name="dnsSec", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsSec;

    /**
     * @return The Domain&#39;s DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
     * 
     */
    public Output<Optional<String>> dnsSec() {
        return Codegen.optional(this.dnsSec);
    }
    /**
     * Name of domain.
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output<String> domain;

    /**
     * @return Name of domain.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * Instance IP you want associated to domain. If omitted this will create a domain with no records.
     * 
     */
    @Export(name="ip", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ip;

    /**
     * @return Instance IP you want associated to domain. If omitted this will create a domain with no records.
     * 
     */
    public Output<Optional<String>> ip() {
        return Codegen.optional(this.ip);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DnsDomain(String name) {
        this(name, DnsDomainArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DnsDomain(String name, DnsDomainArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DnsDomain(String name, DnsDomainArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/dnsDomain:DnsDomain", name, args == null ? DnsDomainArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DnsDomain(String name, Output<String> id, @Nullable DnsDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/dnsDomain:DnsDomain", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DnsDomain get(String name, Output<String> id, @Nullable DnsDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DnsDomain(name, id, state, options);
    }
}
