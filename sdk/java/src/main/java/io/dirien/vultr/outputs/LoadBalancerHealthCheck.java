// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerHealthCheck {
    /**
     * @return Time in seconds to perform health check. Default value is 15.
     * 
     */
    private Integer checkInterval;
    /**
     * @return Number of failed attempts encountered before failover. Default value is 5.
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return The path on the attached instances that the load balancer should check against. Default value is `/`
     * 
     */
    private @Nullable String path;
    /**
     * @return The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
     * 
     */
    private Integer port;
    /**
     * @return The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
     * 
     */
    private String protocol;
    /**
     * @return Time in seconds to wait for a health check response. Default value is 5.
     * 
     */
    private Integer responseTimeout;
    /**
     * @return Number of failed attempts encountered before failover. Default value is 5.
     * 
     */
    private Integer unhealthyThreshold;

    private LoadBalancerHealthCheck() {}
    /**
     * @return Time in seconds to perform health check. Default value is 15.
     * 
     */
    public Integer checkInterval() {
        return this.checkInterval;
    }
    /**
     * @return Number of failed attempts encountered before failover. Default value is 5.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return The path on the attached instances that the load balancer should check against. Default value is `/`
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Time in seconds to wait for a health check response. Default value is 5.
     * 
     */
    public Integer responseTimeout() {
        return this.responseTimeout;
    }
    /**
     * @return Number of failed attempts encountered before failover. Default value is 5.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer checkInterval;
        private Integer healthyThreshold;
        private @Nullable String path;
        private Integer port;
        private String protocol;
        private Integer responseTimeout;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(LoadBalancerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkInterval = defaults.checkInterval;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.responseTimeout = defaults.responseTimeout;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder checkInterval(Integer checkInterval) {
            this.checkInterval = Objects.requireNonNull(checkInterval);
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            this.healthyThreshold = Objects.requireNonNull(healthyThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder responseTimeout(Integer responseTimeout) {
            this.responseTimeout = Objects.requireNonNull(responseTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold);
            return this;
        }
        public LoadBalancerHealthCheck build() {
            final var o = new LoadBalancerHealthCheck();
            o.checkInterval = checkInterval;
            o.healthyThreshold = healthyThreshold;
            o.path = path;
            o.port = port;
            o.protocol = protocol;
            o.responseTimeout = responseTimeout;
            o.unhealthyThreshold = unhealthyThreshold;
            return o;
        }
    }
}
