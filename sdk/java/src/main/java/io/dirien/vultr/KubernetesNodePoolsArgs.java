// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesNodePoolsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesNodePoolsArgs Empty = new KubernetesNodePoolsArgs();

    /**
     * Enable the auto scaler for the default node pool.
     * 
     */
    @Import(name="autoScaler")
    private @Nullable Output<Boolean> autoScaler;

    /**
     * @return Enable the auto scaler for the default node pool.
     * 
     */
    public Optional<Output<Boolean>> autoScaler() {
        return Optional.ofNullable(this.autoScaler);
    }

    /**
     * The VKE cluster ID you want to attach this nodepool to.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The VKE cluster ID you want to attach this nodepool to.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The label to be used as a prefix for nodes in this node pool.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label to be used as a prefix for nodes in this node pool.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The maximum number of nodes to use with the auto scaler.
     * 
     */
    @Import(name="maxNodes")
    private @Nullable Output<Integer> maxNodes;

    /**
     * @return The maximum number of nodes to use with the auto scaler.
     * 
     */
    public Optional<Output<Integer>> maxNodes() {
        return Optional.ofNullable(this.maxNodes);
    }

    /**
     * The minimum number of nodes to use with the auto scaler.
     * 
     */
    @Import(name="minNodes")
    private @Nullable Output<Integer> minNodes;

    /**
     * @return The minimum number of nodes to use with the auto scaler.
     * 
     */
    public Optional<Output<Integer>> minNodes() {
        return Optional.ofNullable(this.minNodes);
    }

    /**
     * The number of nodes in this node pool.
     * 
     */
    @Import(name="nodeQuantity", required=true)
    private Output<Integer> nodeQuantity;

    /**
     * @return The number of nodes in this node pool.
     * 
     */
    public Output<Integer> nodeQuantity() {
        return this.nodeQuantity;
    }

    /**
     * The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
     * 
     */
    @Import(name="plan", required=true)
    private Output<String> plan;

    /**
     * @return The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }

    /**
     * A tag that is assigned to this node pool.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return A tag that is assigned to this node pool.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private KubernetesNodePoolsArgs() {}

    private KubernetesNodePoolsArgs(KubernetesNodePoolsArgs $) {
        this.autoScaler = $.autoScaler;
        this.clusterId = $.clusterId;
        this.label = $.label;
        this.maxNodes = $.maxNodes;
        this.minNodes = $.minNodes;
        this.nodeQuantity = $.nodeQuantity;
        this.plan = $.plan;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesNodePoolsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesNodePoolsArgs $;

        public Builder() {
            $ = new KubernetesNodePoolsArgs();
        }

        public Builder(KubernetesNodePoolsArgs defaults) {
            $ = new KubernetesNodePoolsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoScaler Enable the auto scaler for the default node pool.
         * 
         * @return builder
         * 
         */
        public Builder autoScaler(@Nullable Output<Boolean> autoScaler) {
            $.autoScaler = autoScaler;
            return this;
        }

        /**
         * @param autoScaler Enable the auto scaler for the default node pool.
         * 
         * @return builder
         * 
         */
        public Builder autoScaler(Boolean autoScaler) {
            return autoScaler(Output.of(autoScaler));
        }

        /**
         * @param clusterId The VKE cluster ID you want to attach this nodepool to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The VKE cluster ID you want to attach this nodepool to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param label The label to be used as a prefix for nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label to be used as a prefix for nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param maxNodes The maximum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder maxNodes(@Nullable Output<Integer> maxNodes) {
            $.maxNodes = maxNodes;
            return this;
        }

        /**
         * @param maxNodes The maximum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder maxNodes(Integer maxNodes) {
            return maxNodes(Output.of(maxNodes));
        }

        /**
         * @param minNodes The minimum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder minNodes(@Nullable Output<Integer> minNodes) {
            $.minNodes = minNodes;
            return this;
        }

        /**
         * @param minNodes The minimum number of nodes to use with the auto scaler.
         * 
         * @return builder
         * 
         */
        public Builder minNodes(Integer minNodes) {
            return minNodes(Output.of(minNodes));
        }

        /**
         * @param nodeQuantity The number of nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeQuantity(Output<Integer> nodeQuantity) {
            $.nodeQuantity = nodeQuantity;
            return this;
        }

        /**
         * @param nodeQuantity The number of nodes in this node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeQuantity(Integer nodeQuantity) {
            return nodeQuantity(Output.of(nodeQuantity));
        }

        /**
         * @param plan The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The plan to be used in this node pool. [See Plans List](https://www.vultr.com/api/#operation/list-plans) Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param tag A tag that is assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag A tag that is assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public KubernetesNodePoolsArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.nodeQuantity = Objects.requireNonNull($.nodeQuantity, "expected parameter 'nodeQuantity' to be non-null");
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            return $;
        }
    }

}
