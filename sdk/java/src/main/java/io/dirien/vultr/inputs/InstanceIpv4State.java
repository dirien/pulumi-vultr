// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceIpv4State extends com.pulumi.resources.ResourceArgs {

    public static final InstanceIpv4State Empty = new InstanceIpv4State();

    /**
     * The gateway IP address.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return The gateway IP address.
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * The ID of the instance to be assigned the IPv4 address.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the instance to be assigned the IPv4 address.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The IPv4 address in canonical format.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The IPv4 address in canonical format.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The IPv4 netmask in dot-decimal notation.
     * 
     */
    @Import(name="netmask")
    private @Nullable Output<String> netmask;

    /**
     * @return The IPv4 netmask in dot-decimal notation.
     * 
     */
    public Optional<Output<String>> netmask() {
        return Optional.ofNullable(this.netmask);
    }

    /**
     * Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     * 
     */
    @Import(name="reboot")
    private @Nullable Output<Boolean> reboot;

    /**
     * @return Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
     * 
     */
    public Optional<Output<Boolean>> reboot() {
        return Optional.ofNullable(this.reboot);
    }

    /**
     * The reverse DNS information for this IP address.
     * 
     */
    @Import(name="reverse")
    private @Nullable Output<String> reverse;

    /**
     * @return The reverse DNS information for this IP address.
     * 
     */
    public Optional<Output<String>> reverse() {
        return Optional.ofNullable(this.reverse);
    }

    private InstanceIpv4State() {}

    private InstanceIpv4State(InstanceIpv4State $) {
        this.gateway = $.gateway;
        this.instanceId = $.instanceId;
        this.ip = $.ip;
        this.netmask = $.netmask;
        this.reboot = $.reboot;
        this.reverse = $.reverse;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceIpv4State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceIpv4State $;

        public Builder() {
            $ = new InstanceIpv4State();
        }

        public Builder(InstanceIpv4State defaults) {
            $ = new InstanceIpv4State(Objects.requireNonNull(defaults));
        }

        /**
         * @param gateway The gateway IP address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The gateway IP address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param instanceId The ID of the instance to be assigned the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the instance to be assigned the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ip The IPv4 address in canonical format.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IPv4 address in canonical format.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param netmask The IPv4 netmask in dot-decimal notation.
         * 
         * @return builder
         * 
         */
        public Builder netmask(@Nullable Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        /**
         * @param netmask The IPv4 netmask in dot-decimal notation.
         * 
         * @return builder
         * 
         */
        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        /**
         * @param reboot Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder reboot(@Nullable Output<Boolean> reboot) {
            $.reboot = reboot;
            return this;
        }

        /**
         * @param reboot Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder reboot(Boolean reboot) {
            return reboot(Output.of(reboot));
        }

        /**
         * @param reverse The reverse DNS information for this IP address.
         * 
         * @return builder
         * 
         */
        public Builder reverse(@Nullable Output<String> reverse) {
            $.reverse = reverse;
            return this;
        }

        /**
         * @param reverse The reverse DNS information for this IP address.
         * 
         * @return builder
         * 
         */
        public Builder reverse(String reverse) {
            return reverse(Output.of(reverse));
        }

        public InstanceIpv4State build() {
            return $;
        }
    }

}
