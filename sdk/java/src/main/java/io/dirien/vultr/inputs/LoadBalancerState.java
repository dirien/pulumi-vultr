// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.vultr.inputs.LoadBalancerFirewallRuleArgs;
import io.dirien.vultr.inputs.LoadBalancerForwardingRuleArgs;
import io.dirien.vultr.inputs.LoadBalancerHealthCheckArgs;
import io.dirien.vultr.inputs.LoadBalancerSslArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * Array of instances that are currently attached to the load balancer.
     * 
     */
    @Import(name="attachedInstances")
    private @Nullable Output<List<String>> attachedInstances;

    /**
     * @return Array of instances that are currently attached to the load balancer.
     * 
     */
    public Optional<Output<List<String>>> attachedInstances() {
        return Optional.ofNullable(this.attachedInstances);
    }

    /**
     * The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
     * 
     */
    @Import(name="balancingAlgorithm")
    private @Nullable Output<String> balancingAlgorithm;

    /**
     * @return The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
     * 
     */
    public Optional<Output<String>> balancingAlgorithm() {
        return Optional.ofNullable(this.balancingAlgorithm);
    }

    /**
     * Name for your given sticky session.
     * 
     */
    @Import(name="cookieName")
    private @Nullable Output<String> cookieName;

    /**
     * @return Name for your given sticky session.
     * 
     */
    public Optional<Output<String>> cookieName() {
        return Optional.ofNullable(this.cookieName);
    }

    /**
     * Defines the firewall rules for a load balancer.
     * 
     */
    @Import(name="firewallRules")
    private @Nullable Output<List<LoadBalancerFirewallRuleArgs>> firewallRules;

    /**
     * @return Defines the firewall rules for a load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerFirewallRuleArgs>>> firewallRules() {
        return Optional.ofNullable(this.firewallRules);
    }

    /**
     * List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    @Import(name="forwardingRules")
    private @Nullable Output<List<LoadBalancerForwardingRuleArgs>> forwardingRules;

    /**
     * @return List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
     * 
     */
    public Optional<Output<List<LoadBalancerForwardingRuleArgs>>> forwardingRules() {
        return Optional.ofNullable(this.forwardingRules);
    }

    /**
     * Boolean value that indicates if SSL is enabled.
     * 
     */
    @Import(name="hasSsl")
    private @Nullable Output<Boolean> hasSsl;

    /**
     * @return Boolean value that indicates if SSL is enabled.
     * 
     */
    public Optional<Output<Boolean>> hasSsl() {
        return Optional.ofNullable(this.hasSsl);
    }

    /**
     * A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<LoadBalancerHealthCheckArgs> healthCheck;

    /**
     * @return A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
     * 
     */
    public Optional<Output<LoadBalancerHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * IPv4 address for your load balancer.
     * 
     */
    @Import(name="ipv4")
    private @Nullable Output<String> ipv4;

    /**
     * @return IPv4 address for your load balancer.
     * 
     */
    public Optional<Output<String>> ipv4() {
        return Optional.ofNullable(this.ipv4);
    }

    /**
     * IPv6 address for your load balancer.
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<String> ipv6;

    /**
     * @return IPv6 address for your load balancer.
     * 
     */
    public Optional<Output<String>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * The load balancer&#39;s label.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The load balancer&#39;s label.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A private network ID that the load balancer should be attached to.
     * 
     * @deprecated
     * private_network is deprecated and should no longer be used. Instead, use vpc
     * 
     */
    @Deprecated /* private_network is deprecated and should no longer be used. Instead, use vpc */
    @Import(name="privateNetwork")
    private @Nullable Output<String> privateNetwork;

    /**
     * @return A private network ID that the load balancer should be attached to.
     * 
     * @deprecated
     * private_network is deprecated and should no longer be used. Instead, use vpc
     * 
     */
    @Deprecated /* private_network is deprecated and should no longer be used. Instead, use vpc */
    public Optional<Output<String>> privateNetwork() {
        return Optional.ofNullable(this.privateNetwork);
    }

    /**
     * Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    @Import(name="proxyProtocol")
    private @Nullable Output<Boolean> proxyProtocol;

    /**
     * @return Boolean value that indicates if Proxy Protocol is enabled.
     * 
     */
    public Optional<Output<Boolean>> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }

    /**
     * The region your load balancer is deployed in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region your load balancer is deployed in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<LoadBalancerSslArgs> ssl;

    /**
     * @return A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
     * 
     */
    public Optional<Output<LoadBalancerSslArgs>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    @Import(name="sslRedirect")
    private @Nullable Output<Boolean> sslRedirect;

    /**
     * @return Boolean value that indicates if HTTP calls will be redirected to HTTPS.
     * 
     */
    public Optional<Output<Boolean>> sslRedirect() {
        return Optional.ofNullable(this.sslRedirect);
    }

    /**
     * Current status for the load balancer
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current status for the load balancer
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A VPC ID that the load balancer should be attached to.
     * 
     */
    @Import(name="vpc")
    private @Nullable Output<String> vpc;

    /**
     * @return A VPC ID that the load balancer should be attached to.
     * 
     */
    public Optional<Output<String>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.attachedInstances = $.attachedInstances;
        this.balancingAlgorithm = $.balancingAlgorithm;
        this.cookieName = $.cookieName;
        this.firewallRules = $.firewallRules;
        this.forwardingRules = $.forwardingRules;
        this.hasSsl = $.hasSsl;
        this.healthCheck = $.healthCheck;
        this.ipv4 = $.ipv4;
        this.ipv6 = $.ipv6;
        this.label = $.label;
        this.privateNetwork = $.privateNetwork;
        this.proxyProtocol = $.proxyProtocol;
        this.region = $.region;
        this.ssl = $.ssl;
        this.sslRedirect = $.sslRedirect;
        this.status = $.status;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedInstances Array of instances that are currently attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(@Nullable Output<List<String>> attachedInstances) {
            $.attachedInstances = attachedInstances;
            return this;
        }

        /**
         * @param attachedInstances Array of instances that are currently attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(List<String> attachedInstances) {
            return attachedInstances(Output.of(attachedInstances));
        }

        /**
         * @param attachedInstances Array of instances that are currently attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(String... attachedInstances) {
            return attachedInstances(List.of(attachedInstances));
        }

        /**
         * @param balancingAlgorithm The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
         * 
         * @return builder
         * 
         */
        public Builder balancingAlgorithm(@Nullable Output<String> balancingAlgorithm) {
            $.balancingAlgorithm = balancingAlgorithm;
            return this;
        }

        /**
         * @param balancingAlgorithm The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
         * 
         * @return builder
         * 
         */
        public Builder balancingAlgorithm(String balancingAlgorithm) {
            return balancingAlgorithm(Output.of(balancingAlgorithm));
        }

        /**
         * @param cookieName Name for your given sticky session.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(@Nullable Output<String> cookieName) {
            $.cookieName = cookieName;
            return this;
        }

        /**
         * @param cookieName Name for your given sticky session.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(String cookieName) {
            return cookieName(Output.of(cookieName));
        }

        /**
         * @param firewallRules Defines the firewall rules for a load balancer.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(@Nullable Output<List<LoadBalancerFirewallRuleArgs>> firewallRules) {
            $.firewallRules = firewallRules;
            return this;
        }

        /**
         * @param firewallRules Defines the firewall rules for a load balancer.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(List<LoadBalancerFirewallRuleArgs> firewallRules) {
            return firewallRules(Output.of(firewallRules));
        }

        /**
         * @param firewallRules Defines the firewall rules for a load balancer.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(LoadBalancerFirewallRuleArgs... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }

        /**
         * @param forwardingRules List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(@Nullable Output<List<LoadBalancerForwardingRuleArgs>> forwardingRules) {
            $.forwardingRules = forwardingRules;
            return this;
        }

        /**
         * @param forwardingRules List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(List<LoadBalancerForwardingRuleArgs> forwardingRules) {
            return forwardingRules(Output.of(forwardingRules));
        }

        /**
         * @param forwardingRules List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(LoadBalancerForwardingRuleArgs... forwardingRules) {
            return forwardingRules(List.of(forwardingRules));
        }

        /**
         * @param hasSsl Boolean value that indicates if SSL is enabled.
         * 
         * @return builder
         * 
         */
        public Builder hasSsl(@Nullable Output<Boolean> hasSsl) {
            $.hasSsl = hasSsl;
            return this;
        }

        /**
         * @param hasSsl Boolean value that indicates if SSL is enabled.
         * 
         * @return builder
         * 
         */
        public Builder hasSsl(Boolean hasSsl) {
            return hasSsl(Output.of(hasSsl));
        }

        /**
         * @param healthCheck A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<LoadBalancerHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(LoadBalancerHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param ipv4 IPv4 address for your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(@Nullable Output<String> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 IPv4 address for your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param ipv6 IPv6 address for your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<String> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 IPv6 address for your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(String ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param label The load balancer&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The load balancer&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param privateNetwork A private network ID that the load balancer should be attached to.
         * 
         * @return builder
         * 
         * @deprecated
         * private_network is deprecated and should no longer be used. Instead, use vpc
         * 
         */
        @Deprecated /* private_network is deprecated and should no longer be used. Instead, use vpc */
        public Builder privateNetwork(@Nullable Output<String> privateNetwork) {
            $.privateNetwork = privateNetwork;
            return this;
        }

        /**
         * @param privateNetwork A private network ID that the load balancer should be attached to.
         * 
         * @return builder
         * 
         * @deprecated
         * private_network is deprecated and should no longer be used. Instead, use vpc
         * 
         */
        @Deprecated /* private_network is deprecated and should no longer be used. Instead, use vpc */
        public Builder privateNetwork(String privateNetwork) {
            return privateNetwork(Output.of(privateNetwork));
        }

        /**
         * @param proxyProtocol Boolean value that indicates if Proxy Protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(@Nullable Output<Boolean> proxyProtocol) {
            $.proxyProtocol = proxyProtocol;
            return this;
        }

        /**
         * @param proxyProtocol Boolean value that indicates if Proxy Protocol is enabled.
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(Boolean proxyProtocol) {
            return proxyProtocol(Output.of(proxyProtocol));
        }

        /**
         * @param region The region your load balancer is deployed in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region your load balancer is deployed in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param ssl A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<LoadBalancerSslArgs> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
         * 
         * @return builder
         * 
         */
        public Builder ssl(LoadBalancerSslArgs ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param sslRedirect Boolean value that indicates if HTTP calls will be redirected to HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder sslRedirect(@Nullable Output<Boolean> sslRedirect) {
            $.sslRedirect = sslRedirect;
            return this;
        }

        /**
         * @param sslRedirect Boolean value that indicates if HTTP calls will be redirected to HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder sslRedirect(Boolean sslRedirect) {
            return sslRedirect(Output.of(sslRedirect));
        }

        /**
         * @param status Current status for the load balancer
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current status for the load balancer
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param vpc A VPC ID that the load balancer should be attached to.
         * 
         * @return builder
         * 
         */
        public Builder vpc(@Nullable Output<String> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc A VPC ID that the load balancer should be attached to.
         * 
         * @return builder
         * 
         */
        public Builder vpc(String vpc) {
            return vpc(Output.of(vpc));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
