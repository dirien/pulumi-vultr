// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpState extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpState Empty = new ReservedIpState();

    /**
     * The VPS ID you want this reserved IP to be attached to.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The VPS ID you want this reserved IP to be attached to.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
     * 
     */
    @Import(name="ipType")
    private @Nullable Output<String> ipType;

    /**
     * @return The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
     * 
     */
    public Optional<Output<String>> ipType() {
        return Optional.ofNullable(this.ipType);
    }

    /**
     * The label you want to give your reserved IP.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label you want to give your reserved IP.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The region ID that you want the reserved IP to be created in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region ID that you want the reserved IP to be created in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The reserved IP&#39;s subnet.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return The reserved IP&#39;s subnet.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * The reserved IP&#39;s subnet size.
     * 
     */
    @Import(name="subnetSize")
    private @Nullable Output<Integer> subnetSize;

    /**
     * @return The reserved IP&#39;s subnet size.
     * 
     */
    public Optional<Output<Integer>> subnetSize() {
        return Optional.ofNullable(this.subnetSize);
    }

    private ReservedIpState() {}

    private ReservedIpState(ReservedIpState $) {
        this.instanceId = $.instanceId;
        this.ipType = $.ipType;
        this.label = $.label;
        this.region = $.region;
        this.subnet = $.subnet;
        this.subnetSize = $.subnetSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpState $;

        public Builder() {
            $ = new ReservedIpState();
        }

        public Builder(ReservedIpState defaults) {
            $ = new ReservedIpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId The VPS ID you want this reserved IP to be attached to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The VPS ID you want this reserved IP to be attached to.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ipType The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipType(@Nullable Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType The type of reserved IP that you want. Either &#34;v4&#34; or &#34;v6&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param label The label you want to give your reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label you want to give your reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param region The region ID that you want the reserved IP to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region ID that you want the reserved IP to be created in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param subnet The reserved IP&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The reserved IP&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param subnetSize The reserved IP&#39;s subnet size.
         * 
         * @return builder
         * 
         */
        public Builder subnetSize(@Nullable Output<Integer> subnetSize) {
            $.subnetSize = subnetSize;
            return this;
        }

        /**
         * @param subnetSize The reserved IP&#39;s subnet size.
         * 
         * @return builder
         * 
         */
        public Builder subnetSize(Integer subnetSize) {
            return subnetSize(Output.of(subnetSize));
        }

        public ReservedIpState build() {
            return $;
        }
    }

}
