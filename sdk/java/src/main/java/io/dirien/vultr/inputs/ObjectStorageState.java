// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectStorageState extends com.pulumi.resources.ResourceArgs {

    public static final ObjectStorageState Empty = new ObjectStorageState();

    /**
     * The region ID that you want the network to be created in.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<Integer> clusterId;

    /**
     * @return The region ID that you want the network to be created in.
     * 
     */
    public Optional<Output<Integer>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Date of creation for the object storage subscription.
     * 
     */
    @Import(name="dateCreated")
    private @Nullable Output<String> dateCreated;

    /**
     * @return Date of creation for the object storage subscription.
     * 
     */
    public Optional<Output<String>> dateCreated() {
        return Optional.ofNullable(this.dateCreated);
    }

    /**
     * The description you want to give your network.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The description you want to give your network.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The location which this subscription resides in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location which this subscription resides in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The region ID of the object storage subscription.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region ID of the object storage subscription.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Your access key.
     * 
     */
    @Import(name="s3AccessKey")
    private @Nullable Output<String> s3AccessKey;

    /**
     * @return Your access key.
     * 
     */
    public Optional<Output<String>> s3AccessKey() {
        return Optional.ofNullable(this.s3AccessKey);
    }

    /**
     * The hostname for this subscription.
     * 
     */
    @Import(name="s3Hostname")
    private @Nullable Output<String> s3Hostname;

    /**
     * @return The hostname for this subscription.
     * 
     */
    public Optional<Output<String>> s3Hostname() {
        return Optional.ofNullable(this.s3Hostname);
    }

    /**
     * Your secret key.
     * 
     */
    @Import(name="s3SecretKey")
    private @Nullable Output<String> s3SecretKey;

    /**
     * @return Your secret key.
     * 
     */
    public Optional<Output<String>> s3SecretKey() {
        return Optional.ofNullable(this.s3SecretKey);
    }

    /**
     * Current status of this object storage subscription.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current status of this object storage subscription.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ObjectStorageState() {}

    private ObjectStorageState(ObjectStorageState $) {
        this.clusterId = $.clusterId;
        this.dateCreated = $.dateCreated;
        this.label = $.label;
        this.location = $.location;
        this.region = $.region;
        this.s3AccessKey = $.s3AccessKey;
        this.s3Hostname = $.s3Hostname;
        this.s3SecretKey = $.s3SecretKey;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectStorageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectStorageState $;

        public Builder() {
            $ = new ObjectStorageState();
        }

        public Builder(ObjectStorageState defaults) {
            $ = new ObjectStorageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The region ID that you want the network to be created in.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<Integer> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The region ID that you want the network to be created in.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Integer clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param dateCreated Date of creation for the object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(@Nullable Output<String> dateCreated) {
            $.dateCreated = dateCreated;
            return this;
        }

        /**
         * @param dateCreated Date of creation for the object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder dateCreated(String dateCreated) {
            return dateCreated(Output.of(dateCreated));
        }

        /**
         * @param label The description you want to give your network.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The description you want to give your network.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param location The location which this subscription resides in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location which this subscription resides in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param region The region ID of the object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region ID of the object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param s3AccessKey Your access key.
         * 
         * @return builder
         * 
         */
        public Builder s3AccessKey(@Nullable Output<String> s3AccessKey) {
            $.s3AccessKey = s3AccessKey;
            return this;
        }

        /**
         * @param s3AccessKey Your access key.
         * 
         * @return builder
         * 
         */
        public Builder s3AccessKey(String s3AccessKey) {
            return s3AccessKey(Output.of(s3AccessKey));
        }

        /**
         * @param s3Hostname The hostname for this subscription.
         * 
         * @return builder
         * 
         */
        public Builder s3Hostname(@Nullable Output<String> s3Hostname) {
            $.s3Hostname = s3Hostname;
            return this;
        }

        /**
         * @param s3Hostname The hostname for this subscription.
         * 
         * @return builder
         * 
         */
        public Builder s3Hostname(String s3Hostname) {
            return s3Hostname(Output.of(s3Hostname));
        }

        /**
         * @param s3SecretKey Your secret key.
         * 
         * @return builder
         * 
         */
        public Builder s3SecretKey(@Nullable Output<String> s3SecretKey) {
            $.s3SecretKey = s3SecretKey;
            return this;
        }

        /**
         * @param s3SecretKey Your secret key.
         * 
         * @return builder
         * 
         */
        public Builder s3SecretKey(String s3SecretKey) {
            return s3SecretKey(Output.of(s3SecretKey));
        }

        /**
         * @param status Current status of this object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current status of this object storage subscription.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ObjectStorageState build() {
            return $;
        }
    }

}
