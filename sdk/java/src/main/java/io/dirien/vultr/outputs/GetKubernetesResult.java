// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetKubernetesFilter;
import io.dirien.vultr.outputs.GetKubernetesNodePool;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetKubernetesResult {
    /**
     * @return The base64 encoded public certificate used by clients to access the cluster.
     * 
     */
    private String clientCertificate;
    /**
     * @return The base64 encoded private key used by clients to access the cluster.
     * 
     */
    private String clientKey;
    /**
     * @return The base64 encoded public certificate for the cluster&#39;s certificate authority.
     * 
     */
    private String clusterCaCertificate;
    /**
     * @return IP range that your pods will run on in this cluster.
     * 
     */
    private String clusterSubnet;
    /**
     * @return Date node was created.
     * 
     */
    private String dateCreated;
    /**
     * @return Domain for your Kubernetes clusters control plane.
     * 
     */
    private String endpoint;
    private @Nullable List<GetKubernetesFilter> filters;
    /**
     * @return ID of node.
     * 
     */
    private String id;
    /**
     * @return IP address of VKE cluster control plane.
     * 
     */
    private String ip;
    /**
     * @return Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    private String kubeConfig;
    /**
     * @return Label of node.
     * 
     */
    private String label;
    /**
     * @return Contains the default node pool that was deployed.
     * 
     */
    private List<GetKubernetesNodePool> nodePools;
    /**
     * @return The region your VKE cluster is deployed in.
     * 
     */
    private String region;
    /**
     * @return IP range that services will run on this cluster.
     * 
     */
    private String serviceSubnet;
    /**
     * @return Status of node.
     * 
     */
    private String status;
    /**
     * @return The current kubernetes version your VKE cluster is running on.
     * 
     */
    private String version;

    private GetKubernetesResult() {}
    /**
     * @return The base64 encoded public certificate used by clients to access the cluster.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }
    /**
     * @return The base64 encoded private key used by clients to access the cluster.
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }
    /**
     * @return The base64 encoded public certificate for the cluster&#39;s certificate authority.
     * 
     */
    public String clusterCaCertificate() {
        return this.clusterCaCertificate;
    }
    /**
     * @return IP range that your pods will run on in this cluster.
     * 
     */
    public String clusterSubnet() {
        return this.clusterSubnet;
    }
    /**
     * @return Date node was created.
     * 
     */
    public String dateCreated() {
        return this.dateCreated;
    }
    /**
     * @return Domain for your Kubernetes clusters control plane.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    public List<GetKubernetesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return ID of node.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP address of VKE cluster control plane.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    public String kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * @return Label of node.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return Contains the default node pool that was deployed.
     * 
     */
    public List<GetKubernetesNodePool> nodePools() {
        return this.nodePools;
    }
    /**
     * @return The region your VKE cluster is deployed in.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return IP range that services will run on this cluster.
     * 
     */
    public String serviceSubnet() {
        return this.serviceSubnet;
    }
    /**
     * @return Status of node.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The current kubernetes version your VKE cluster is running on.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientCertificate;
        private String clientKey;
        private String clusterCaCertificate;
        private String clusterSubnet;
        private String dateCreated;
        private String endpoint;
        private @Nullable List<GetKubernetesFilter> filters;
        private String id;
        private String ip;
        private String kubeConfig;
        private String label;
        private List<GetKubernetesNodePool> nodePools;
        private String region;
        private String serviceSubnet;
        private String status;
        private String version;
        public Builder() {}
        public Builder(GetKubernetesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.clusterCaCertificate = defaults.clusterCaCertificate;
    	      this.clusterSubnet = defaults.clusterSubnet;
    	      this.dateCreated = defaults.dateCreated;
    	      this.endpoint = defaults.endpoint;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.kubeConfig = defaults.kubeConfig;
    	      this.label = defaults.label;
    	      this.nodePools = defaults.nodePools;
    	      this.region = defaults.region;
    	      this.serviceSubnet = defaults.serviceSubnet;
    	      this.status = defaults.status;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        @CustomType.Setter
        public Builder clusterCaCertificate(String clusterCaCertificate) {
            this.clusterCaCertificate = Objects.requireNonNull(clusterCaCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clusterSubnet(String clusterSubnet) {
            this.clusterSubnet = Objects.requireNonNull(clusterSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder dateCreated(String dateCreated) {
            this.dateCreated = Objects.requireNonNull(dateCreated);
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetKubernetesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetKubernetesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        @CustomType.Setter
        public Builder kubeConfig(String kubeConfig) {
            this.kubeConfig = Objects.requireNonNull(kubeConfig);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder nodePools(List<GetKubernetesNodePool> nodePools) {
            this.nodePools = Objects.requireNonNull(nodePools);
            return this;
        }
        public Builder nodePools(GetKubernetesNodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder serviceSubnet(String serviceSubnet) {
            this.serviceSubnet = Objects.requireNonNull(serviceSubnet);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetKubernetesResult build() {
            final var o = new GetKubernetesResult();
            o.clientCertificate = clientCertificate;
            o.clientKey = clientKey;
            o.clusterCaCertificate = clusterCaCertificate;
            o.clusterSubnet = clusterSubnet;
            o.dateCreated = dateCreated;
            o.endpoint = endpoint;
            o.filters = filters;
            o.id = id;
            o.ip = ip;
            o.kubeConfig = kubeConfig;
            o.label = label;
            o.nodePools = nodePools;
            o.region = region;
            o.serviceSubnet = serviceSubnet;
            o.status = status;
            o.version = version;
            return o;
        }
    }
}
