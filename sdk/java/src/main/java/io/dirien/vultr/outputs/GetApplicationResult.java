// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.outputs;

import com.pulumi.core.annotations.CustomType;
import io.dirien.vultr.outputs.GetApplicationFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetApplicationResult {
    /**
     * @return The deploy name of the application.
     * 
     */
    private String deployName;
    private @Nullable List<GetApplicationFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Marketplace ID for this application.
     * 
     */
    private String imageId;
    /**
     * @return The name of the application.
     * 
     */
    private String name;
    /**
     * @return The short name of the application.
     * 
     */
    private String shortName;
    /**
     * @return This defines if an application is `one-click` or `marketplace` .
     * 
     */
    private String type;
    /**
     * @return The vendor who authored the application.
     * 
     */
    private String vendor;

    private GetApplicationResult() {}
    /**
     * @return The deploy name of the application.
     * 
     */
    public String deployName() {
        return this.deployName;
    }
    public List<GetApplicationFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Marketplace ID for this application.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The name of the application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The short name of the application.
     * 
     */
    public String shortName() {
        return this.shortName;
    }
    /**
     * @return This defines if an application is `one-click` or `marketplace` .
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The vendor who authored the application.
     * 
     */
    public String vendor() {
        return this.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deployName;
        private @Nullable List<GetApplicationFilter> filters;
        private String id;
        private String imageId;
        private String name;
        private String shortName;
        private String type;
        private String vendor;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deployName = defaults.deployName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.name = defaults.name;
    	      this.shortName = defaults.shortName;
    	      this.type = defaults.type;
    	      this.vendor = defaults.vendor;
        }

        @CustomType.Setter
        public Builder deployName(String deployName) {
            this.deployName = Objects.requireNonNull(deployName);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetApplicationFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetApplicationFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder shortName(String shortName) {
            this.shortName = Objects.requireNonNull(shortName);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vendor(String vendor) {
            this.vendor = Objects.requireNonNull(vendor);
            return this;
        }
        public GetApplicationResult build() {
            final var o = new GetApplicationResult();
            o.deployName = deployName;
            o.filters = filters;
            o.id = id;
            o.imageId = imageId;
            o.name = name;
            o.shortName = shortName;
            o.type = type;
            o.vendor = vendor;
            return o;
        }
    }
}
