// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.KubernetesArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.KubernetesState;
import io.dirien.vultr.outputs.KubernetesNodePools;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * Create a new VKE cluster:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.Kubernetes;
 * import com.pulumi.vultr.KubernetesArgs;
 * import com.pulumi.vultr.inputs.KubernetesNodePoolsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var k8 = new Kubernetes(&#34;k8&#34;, KubernetesArgs.builder()        
 *             .label(&#34;tf-test&#34;)
 *             .nodePools(KubernetesNodePoolsArgs.builder()
 *                 .autoScaler(true)
 *                 .label(&#34;my-label&#34;)
 *                 .maxNodes(2)
 *                 .minNodes(1)
 *                 .nodeQuantity(1)
 *                 .plan(&#34;vc2-2c-4gb&#34;)
 *                 .build())
 *             .region(&#34;ewr&#34;)
 *             .version(&#34;v1.23.5+1&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * A default node pool is required when first creating the resource but it can be removed at a later point so long as there is a separate `vultr.KubernetesNodePools` resource attached. For example:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.Kubernetes;
 * import com.pulumi.vultr.KubernetesArgs;
 * import com.pulumi.vultr.KubernetesNodePools;
 * import com.pulumi.vultr.KubernetesNodePoolsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var k8 = new Kubernetes(&#34;k8&#34;, KubernetesArgs.builder()        
 *             .region(&#34;ewr&#34;)
 *             .label(&#34;tf-test&#34;)
 *             .version(&#34;v1.23.5+1&#34;)
 *             .build());
 * 
 *         var np = new KubernetesNodePools(&#34;np&#34;, KubernetesNodePoolsArgs.builder()        
 *             .clusterId(k8.id())
 *             .nodeQuantity(1)
 *             .plan(&#34;vc2-2c-4gb&#34;)
 *             .label(&#34;my-label&#34;)
 *             .autoScaler(true)
 *             .minNodes(1)
 *             .maxNodes(2)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * There is still a requirement that there be one node pool attached to the cluster but this should allow more flexibility about which node pool that is.
 * 
 */
@ResourceType(type="vultr:index/kubernetes:Kubernetes")
public class Kubernetes extends com.pulumi.resources.CustomResource {
    /**
     * IP range that your pods will run on in this cluster.
     * 
     */
    @Export(name="clusterSubnet", refs={String.class}, tree="[0]")
    private Output<String> clusterSubnet;

    /**
     * @return IP range that your pods will run on in this cluster.
     * 
     */
    public Output<String> clusterSubnet() {
        return this.clusterSubnet;
    }
    /**
     * Date node was created.
     * 
     */
    @Export(name="dateCreated", refs={String.class}, tree="[0]")
    private Output<String> dateCreated;

    /**
     * @return Date node was created.
     * 
     */
    public Output<String> dateCreated() {
        return this.dateCreated;
    }
    /**
     * Domain for your Kubernetes clusters control plane.
     * 
     */
    @Export(name="endpoint", refs={String.class}, tree="[0]")
    private Output<String> endpoint;

    /**
     * @return Domain for your Kubernetes clusters control plane.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }
    /**
     * IP address of VKE cluster control plane.
     * 
     */
    @Export(name="ip", refs={String.class}, tree="[0]")
    private Output<String> ip;

    /**
     * @return IP address of VKE cluster control plane.
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }
    /**
     * Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    @Export(name="kubeConfig", refs={String.class}, tree="[0]")
    private Output<String> kubeConfig;

    /**
     * @return Base64 encoded Kubeconfig for this VKE cluster.
     * 
     */
    public Output<String> kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * The VKE clusters label.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return The VKE clusters label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * Contains the default node pool that was deployed.
     * 
     */
    @Export(name="nodePools", refs={KubernetesNodePools.class}, tree="[0]")
    private Output</* @Nullable */ KubernetesNodePools> nodePools;

    /**
     * @return Contains the default node pool that was deployed.
     * 
     */
    public Output<Optional<KubernetesNodePools>> nodePools() {
        return Codegen.optional(this.nodePools);
    }
    /**
     * The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region your VKE cluster will be deployed in. Currently, supported values are `ewr` and `lax`
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * IP range that services will run on this cluster.
     * 
     */
    @Export(name="serviceSubnet", refs={String.class}, tree="[0]")
    private Output<String> serviceSubnet;

    /**
     * @return IP range that services will run on this cluster.
     * 
     */
    public Output<String> serviceSubnet() {
        return this.serviceSubnet;
    }
    /**
     * Status of node.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of node.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The version your VKE cluster you want deployed. [See Available Version](https://www.vultr.com/api/#operation/get-kubernetes-versions)
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Kubernetes(String name) {
        this(name, KubernetesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Kubernetes(String name, KubernetesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Kubernetes(String name, KubernetesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/kubernetes:Kubernetes", name, args == null ? KubernetesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Kubernetes(String name, Output<String> id, @Nullable KubernetesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/kubernetes:Kubernetes", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Kubernetes get(String name, Output<String> id, @Nullable KubernetesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Kubernetes(name, id, state, options);
    }
}
