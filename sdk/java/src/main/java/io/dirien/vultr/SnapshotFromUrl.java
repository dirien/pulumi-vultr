// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.SnapshotFromUrlArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.SnapshotFromUrlState;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Vultr Snapshots from URL resource. This can be used to create, read, modify, and delete Snapshots from URL.
 * 
 * ## Example Usage
 * 
 * Create a new Snapshots from URL
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.SnapshotFromUrl;
 * import com.pulumi.vultr.SnapshotFromUrlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mySnapshot = new SnapshotFromUrl(&#34;mySnapshot&#34;, SnapshotFromUrlArgs.builder()        
 *             .url(&#34;http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Snapshots from Url can be imported using the Snapshot `ID`, e.g.
 * 
 * ```sh
 *  $ pulumi import vultr:index/snapshotFromUrl:SnapshotFromUrl my_snapshot e60dc0a2-9313-4bab-bffc-57ffe33d99f6
 * ```
 * 
 */
@ResourceType(type="vultr:index/snapshotFromUrl:SnapshotFromUrl")
public class SnapshotFromUrl extends com.pulumi.resources.CustomResource {
    /**
     * The app id which the snapshot is associated with.
     * 
     */
    @Export(name="appId", refs={Integer.class}, tree="[0]")
    private Output<Integer> appId;

    /**
     * @return The app id which the snapshot is associated with.
     * 
     */
    public Output<Integer> appId() {
        return this.appId;
    }
    /**
     * The date the snapshot was created.
     * 
     */
    @Export(name="dateCreated", refs={String.class}, tree="[0]")
    private Output<String> dateCreated;

    /**
     * @return The date the snapshot was created.
     * 
     */
    public Output<String> dateCreated() {
        return this.dateCreated;
    }
    /**
     * The description for the given snapshot.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description for the given snapshot.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The os id which the snapshot is associated with.
     * 
     */
    @Export(name="osId", refs={Integer.class}, tree="[0]")
    private Output<Integer> osId;

    /**
     * @return The os id which the snapshot is associated with.
     * 
     */
    public Output<Integer> osId() {
        return this.osId;
    }
    /**
     * The size of the snapshot in Bytes.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The size of the snapshot in Bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The status for the given snapshot.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status for the given snapshot.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * URL of the given resource you want to create a snapshot from.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return URL of the given resource you want to create a snapshot from.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SnapshotFromUrl(String name) {
        this(name, SnapshotFromUrlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SnapshotFromUrl(String name, SnapshotFromUrlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SnapshotFromUrl(String name, SnapshotFromUrlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/snapshotFromUrl:SnapshotFromUrl", name, args == null ? SnapshotFromUrlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SnapshotFromUrl(String name, Output<String> id, @Nullable SnapshotFromUrlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/snapshotFromUrl:SnapshotFromUrl", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SnapshotFromUrl get(String name, Output<String> id, @Nullable SnapshotFromUrlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SnapshotFromUrl(name, id, state, options);
    }
}
