// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.vultr.inputs.DatabaseReadReplicaArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    @Import(name="clusterTimeZone")
    private @Nullable Output<String> clusterTimeZone;

    public Optional<Output<String>> clusterTimeZone() {
        return Optional.ofNullable(this.clusterTimeZone);
    }

    @Import(name="databaseEngine", required=true)
    private Output<String> databaseEngine;

    public Output<String> databaseEngine() {
        return this.databaseEngine;
    }

    @Import(name="databaseEngineVersion", required=true)
    private Output<String> databaseEngineVersion;

    public Output<String> databaseEngineVersion() {
        return this.databaseEngineVersion;
    }

    @Import(name="label", required=true)
    private Output<String> label;

    public Output<String> label() {
        return this.label;
    }

    @Import(name="maintenanceDow")
    private @Nullable Output<String> maintenanceDow;

    public Optional<Output<String>> maintenanceDow() {
        return Optional.ofNullable(this.maintenanceDow);
    }

    @Import(name="maintenanceTime")
    private @Nullable Output<String> maintenanceTime;

    public Optional<Output<String>> maintenanceTime() {
        return Optional.ofNullable(this.maintenanceTime);
    }

    @Import(name="mysqlLongQueryTime")
    private @Nullable Output<Integer> mysqlLongQueryTime;

    public Optional<Output<Integer>> mysqlLongQueryTime() {
        return Optional.ofNullable(this.mysqlLongQueryTime);
    }

    @Import(name="mysqlRequirePrimaryKey")
    private @Nullable Output<Boolean> mysqlRequirePrimaryKey;

    public Optional<Output<Boolean>> mysqlRequirePrimaryKey() {
        return Optional.ofNullable(this.mysqlRequirePrimaryKey);
    }

    @Import(name="mysqlSlowQueryLog")
    private @Nullable Output<Boolean> mysqlSlowQueryLog;

    public Optional<Output<Boolean>> mysqlSlowQueryLog() {
        return Optional.ofNullable(this.mysqlSlowQueryLog);
    }

    @Import(name="mysqlSqlModes")
    private @Nullable Output<List<String>> mysqlSqlModes;

    public Optional<Output<List<String>>> mysqlSqlModes() {
        return Optional.ofNullable(this.mysqlSqlModes);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="plan", required=true)
    private Output<String> plan;

    public Output<String> plan() {
        return this.plan;
    }

    @Import(name="planDisk")
    private @Nullable Output<Integer> planDisk;

    public Optional<Output<Integer>> planDisk() {
        return Optional.ofNullable(this.planDisk);
    }

    @Import(name="readReplicas")
    private @Nullable Output<List<DatabaseReadReplicaArgs>> readReplicas;

    public Optional<Output<List<DatabaseReadReplicaArgs>>> readReplicas() {
        return Optional.ofNullable(this.readReplicas);
    }

    @Import(name="redisEvictionPolicy")
    private @Nullable Output<String> redisEvictionPolicy;

    public Optional<Output<String>> redisEvictionPolicy() {
        return Optional.ofNullable(this.redisEvictionPolicy);
    }

    @Import(name="region", required=true)
    private Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    @Import(name="tag")
    private @Nullable Output<String> tag;

    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    @Import(name="trustedIps")
    private @Nullable Output<List<String>> trustedIps;

    public Optional<Output<List<String>>> trustedIps() {
        return Optional.ofNullable(this.trustedIps);
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.clusterTimeZone = $.clusterTimeZone;
        this.databaseEngine = $.databaseEngine;
        this.databaseEngineVersion = $.databaseEngineVersion;
        this.label = $.label;
        this.maintenanceDow = $.maintenanceDow;
        this.maintenanceTime = $.maintenanceTime;
        this.mysqlLongQueryTime = $.mysqlLongQueryTime;
        this.mysqlRequirePrimaryKey = $.mysqlRequirePrimaryKey;
        this.mysqlSlowQueryLog = $.mysqlSlowQueryLog;
        this.mysqlSqlModes = $.mysqlSqlModes;
        this.password = $.password;
        this.plan = $.plan;
        this.planDisk = $.planDisk;
        this.readReplicas = $.readReplicas;
        this.redisEvictionPolicy = $.redisEvictionPolicy;
        this.region = $.region;
        this.tag = $.tag;
        this.trustedIps = $.trustedIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        public Builder clusterTimeZone(@Nullable Output<String> clusterTimeZone) {
            $.clusterTimeZone = clusterTimeZone;
            return this;
        }

        public Builder clusterTimeZone(String clusterTimeZone) {
            return clusterTimeZone(Output.of(clusterTimeZone));
        }

        public Builder databaseEngine(Output<String> databaseEngine) {
            $.databaseEngine = databaseEngine;
            return this;
        }

        public Builder databaseEngine(String databaseEngine) {
            return databaseEngine(Output.of(databaseEngine));
        }

        public Builder databaseEngineVersion(Output<String> databaseEngineVersion) {
            $.databaseEngineVersion = databaseEngineVersion;
            return this;
        }

        public Builder databaseEngineVersion(String databaseEngineVersion) {
            return databaseEngineVersion(Output.of(databaseEngineVersion));
        }

        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder maintenanceDow(@Nullable Output<String> maintenanceDow) {
            $.maintenanceDow = maintenanceDow;
            return this;
        }

        public Builder maintenanceDow(String maintenanceDow) {
            return maintenanceDow(Output.of(maintenanceDow));
        }

        public Builder maintenanceTime(@Nullable Output<String> maintenanceTime) {
            $.maintenanceTime = maintenanceTime;
            return this;
        }

        public Builder maintenanceTime(String maintenanceTime) {
            return maintenanceTime(Output.of(maintenanceTime));
        }

        public Builder mysqlLongQueryTime(@Nullable Output<Integer> mysqlLongQueryTime) {
            $.mysqlLongQueryTime = mysqlLongQueryTime;
            return this;
        }

        public Builder mysqlLongQueryTime(Integer mysqlLongQueryTime) {
            return mysqlLongQueryTime(Output.of(mysqlLongQueryTime));
        }

        public Builder mysqlRequirePrimaryKey(@Nullable Output<Boolean> mysqlRequirePrimaryKey) {
            $.mysqlRequirePrimaryKey = mysqlRequirePrimaryKey;
            return this;
        }

        public Builder mysqlRequirePrimaryKey(Boolean mysqlRequirePrimaryKey) {
            return mysqlRequirePrimaryKey(Output.of(mysqlRequirePrimaryKey));
        }

        public Builder mysqlSlowQueryLog(@Nullable Output<Boolean> mysqlSlowQueryLog) {
            $.mysqlSlowQueryLog = mysqlSlowQueryLog;
            return this;
        }

        public Builder mysqlSlowQueryLog(Boolean mysqlSlowQueryLog) {
            return mysqlSlowQueryLog(Output.of(mysqlSlowQueryLog));
        }

        public Builder mysqlSqlModes(@Nullable Output<List<String>> mysqlSqlModes) {
            $.mysqlSqlModes = mysqlSqlModes;
            return this;
        }

        public Builder mysqlSqlModes(List<String> mysqlSqlModes) {
            return mysqlSqlModes(Output.of(mysqlSqlModes));
        }

        public Builder mysqlSqlModes(String... mysqlSqlModes) {
            return mysqlSqlModes(List.of(mysqlSqlModes));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        public Builder planDisk(@Nullable Output<Integer> planDisk) {
            $.planDisk = planDisk;
            return this;
        }

        public Builder planDisk(Integer planDisk) {
            return planDisk(Output.of(planDisk));
        }

        public Builder readReplicas(@Nullable Output<List<DatabaseReadReplicaArgs>> readReplicas) {
            $.readReplicas = readReplicas;
            return this;
        }

        public Builder readReplicas(List<DatabaseReadReplicaArgs> readReplicas) {
            return readReplicas(Output.of(readReplicas));
        }

        public Builder readReplicas(DatabaseReadReplicaArgs... readReplicas) {
            return readReplicas(List.of(readReplicas));
        }

        public Builder redisEvictionPolicy(@Nullable Output<String> redisEvictionPolicy) {
            $.redisEvictionPolicy = redisEvictionPolicy;
            return this;
        }

        public Builder redisEvictionPolicy(String redisEvictionPolicy) {
            return redisEvictionPolicy(Output.of(redisEvictionPolicy));
        }

        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public Builder trustedIps(@Nullable Output<List<String>> trustedIps) {
            $.trustedIps = trustedIps;
            return this;
        }

        public Builder trustedIps(List<String> trustedIps) {
            return trustedIps(Output.of(trustedIps));
        }

        public Builder trustedIps(String... trustedIps) {
            return trustedIps(List.of(trustedIps));
        }

        public DatabaseArgs build() {
            $.databaseEngine = Objects.requireNonNull($.databaseEngine, "expected parameter 'databaseEngine' to be non-null");
            $.databaseEngineVersion = Objects.requireNonNull($.databaseEngineVersion, "expected parameter 'databaseEngineVersion' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
