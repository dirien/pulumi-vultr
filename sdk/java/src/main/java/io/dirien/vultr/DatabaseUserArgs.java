// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseUserArgs Empty = new DatabaseUserArgs();

    /**
     * The managed database ID you want to attach this user to.
     * 
     */
    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    /**
     * @return The managed database ID you want to attach this user to.
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }

    /**
     * The encryption type of the new managed database user&#39;s password (MySQL engine types only - `caching_sha2_password`, `mysql_native_password`).
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<String> encryption;

    /**
     * @return The encryption type of the new managed database user&#39;s password (MySQL engine types only - `caching_sha2_password`, `mysql_native_password`).
     * 
     */
    public Optional<Output<String>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * The password of the new managed database user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the new managed database user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The username of the new managed database user.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the new managed database user.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private DatabaseUserArgs() {}

    private DatabaseUserArgs(DatabaseUserArgs $) {
        this.databaseId = $.databaseId;
        this.encryption = $.encryption;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseUserArgs $;

        public Builder() {
            $ = new DatabaseUserArgs();
        }

        public Builder(DatabaseUserArgs defaults) {
            $ = new DatabaseUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseId The managed database ID you want to attach this user to.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The managed database ID you want to attach this user to.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param encryption The encryption type of the new managed database user&#39;s password (MySQL engine types only - `caching_sha2_password`, `mysql_native_password`).
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<String> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption The encryption type of the new managed database user&#39;s password (MySQL engine types only - `caching_sha2_password`, `mysql_native_password`).
         * 
         * @return builder
         * 
         */
        public Builder encryption(String encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param password The password of the new managed database user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the new managed database user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username of the new managed database user.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the new managed database user.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public DatabaseUserArgs build() {
            $.databaseId = Objects.requireNonNull($.databaseId, "expected parameter 'databaseId' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
