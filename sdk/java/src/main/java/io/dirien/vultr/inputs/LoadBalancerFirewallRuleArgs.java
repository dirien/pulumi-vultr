// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerFirewallRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerFirewallRuleArgs Empty = new LoadBalancerFirewallRuleArgs();

    /**
     * The load balancer ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The load balancer ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The type of ip this rule is - may be either v4 or v6.
     * 
     */
    @Import(name="ipType", required=true)
    private Output<String> ipType;

    /**
     * @return The type of ip this rule is - may be either v4 or v6.
     * 
     */
    public Output<String> ipType() {
        return this.ipType;
    }

    /**
     * The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private LoadBalancerFirewallRuleArgs() {}

    private LoadBalancerFirewallRuleArgs(LoadBalancerFirewallRuleArgs $) {
        this.id = $.id;
        this.ipType = $.ipType;
        this.port = $.port;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerFirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerFirewallRuleArgs $;

        public Builder() {
            $ = new LoadBalancerFirewallRuleArgs();
        }

        public Builder(LoadBalancerFirewallRuleArgs defaults) {
            $ = new LoadBalancerFirewallRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The load balancer ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The load balancer ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipType The type of ip this rule is - may be either v4 or v6.
         * 
         * @return builder
         * 
         */
        public Builder ipType(Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType The type of ip this rule is - may be either v4 or v6.
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param port The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param source IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public LoadBalancerFirewallRuleArgs build() {
            $.ipType = Objects.requireNonNull($.ipType, "expected parameter 'ipType' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
