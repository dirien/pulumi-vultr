// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.vultr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.dirien.vultr.DatabaseArgs;
import io.dirien.vultr.Utilities;
import io.dirien.vultr.inputs.DatabaseState;
import io.dirien.vultr.outputs.DatabaseReadReplica;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Vultr database resource. This can be used to create, read, modify, and delete managed databases on your Vultr account.
 * 
 * ## Example Usage
 * 
 * Create a new database:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.Database;
 * import com.pulumi.vultr.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDatabase = new Database(&#34;myDatabase&#34;, DatabaseArgs.builder()        
 *             .databaseEngine(&#34;pg&#34;)
 *             .databaseEngineVersion(&#34;15&#34;)
 *             .label(&#34;my_database_label&#34;)
 *             .plan(&#34;vultr-dbaas-startup-cc-1-55-2&#34;)
 *             .region(&#34;ewr&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Create a new database with options:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vultr.Database;
 * import com.pulumi.vultr.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDatabase = new Database(&#34;myDatabase&#34;, DatabaseArgs.builder()        
 *             .clusterTimeZone(&#34;America/New_York&#34;)
 *             .databaseEngine(&#34;pg&#34;)
 *             .databaseEngineVersion(&#34;15&#34;)
 *             .label(&#34;my_database_label&#34;)
 *             .maintenanceDow(&#34;sunday&#34;)
 *             .maintenanceTime(&#34;01:00&#34;)
 *             .plan(&#34;vultr-dbaas-startup-cc-1-55-2&#34;)
 *             .region(&#34;ewr&#34;)
 *             .tag(&#34;some tag&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Database can be imported using the database `ID`, e.g.
 * 
 * ```sh
 *  $ pulumi import vultr:index/database:Database my_database b6a859c5-b299-49dd-8888-b1abbc517d08
 * ```
 * 
 */
@ResourceType(type="vultr:index/database:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
     * 
     */
    @Export(name="clusterTimeZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterTimeZone;

    /**
     * @return The configured time zone for the Managed Database in TZ database format (e.g. `UTC`, `America/New_York`, `Europe/London`).
     * 
     */
    public Output<Optional<String>> clusterTimeZone() {
        return Codegen.optional(this.clusterTimeZone);
    }
    /**
     * The database engine of the new managed database.
     * 
     */
    @Export(name="databaseEngine", refs={String.class}, tree="[0]")
    private Output<String> databaseEngine;

    /**
     * @return The database engine of the new managed database.
     * 
     */
    public Output<String> databaseEngine() {
        return this.databaseEngine;
    }
    /**
     * The database engine version of the new managed database.
     * 
     */
    @Export(name="databaseEngineVersion", refs={String.class}, tree="[0]")
    private Output<String> databaseEngineVersion;

    /**
     * @return The database engine version of the new managed database.
     * 
     */
    public Output<String> databaseEngineVersion() {
        return this.databaseEngineVersion;
    }
    /**
     * The date the managed database was added to your Vultr account.
     * 
     */
    @Export(name="dateCreated", refs={String.class}, tree="[0]")
    private Output<String> dateCreated;

    /**
     * @return The date the managed database was added to your Vultr account.
     * 
     */
    public Output<String> dateCreated() {
        return this.dateCreated;
    }
    /**
     * The managed database&#39;s default logical database.
     * 
     */
    @Export(name="dbname", refs={String.class}, tree="[0]")
    private Output<String> dbname;

    /**
     * @return The managed database&#39;s default logical database.
     * 
     */
    public Output<String> dbname() {
        return this.dbname;
    }
    /**
     * The hostname assigned to the managed database.
     * 
     */
    @Export(name="host", refs={String.class}, tree="[0]")
    private Output<String> host;

    /**
     * @return The hostname assigned to the managed database.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    /**
     * A label for the managed database.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return A label for the managed database.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * The date of the latest backup available on the managed database.
     * 
     */
    @Export(name="latestBackup", refs={String.class}, tree="[0]")
    private Output<String> latestBackup;

    /**
     * @return The date of the latest backup available on the managed database.
     * 
     */
    public Output<String> latestBackup() {
        return this.latestBackup;
    }
    /**
     * The preferred maintenance day of week for the managed database.
     * 
     */
    @Export(name="maintenanceDow", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maintenanceDow;

    /**
     * @return The preferred maintenance day of week for the managed database.
     * 
     */
    public Output<Optional<String>> maintenanceDow() {
        return Codegen.optional(this.maintenanceDow);
    }
    /**
     * The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
     * 
     */
    @Export(name="maintenanceTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maintenanceTime;

    /**
     * @return The preferred maintenance time for the managed database in 24-hour HH:00 format (e.g. `01:00`, `13:00`, `23:00`).
     * 
     */
    public Output<Optional<String>> maintenanceTime() {
        return Codegen.optional(this.maintenanceTime);
    }
    /**
     * The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
     * 
     */
    @Export(name="mysqlLongQueryTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mysqlLongQueryTime;

    /**
     * @return The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
     * 
     */
    public Output<Optional<Integer>> mysqlLongQueryTime() {
        return Codegen.optional(this.mysqlLongQueryTime);
    }
    /**
     * The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
     * 
     */
    @Export(name="mysqlRequirePrimaryKey", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mysqlRequirePrimaryKey;

    /**
     * @return The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
     * 
     */
    public Output<Optional<Boolean>> mysqlRequirePrimaryKey() {
        return Codegen.optional(this.mysqlRequirePrimaryKey);
    }
    /**
     * The configuration value for slow query logging on the managed database (MySQL engine types only).
     * 
     */
    @Export(name="mysqlSlowQueryLog", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mysqlSlowQueryLog;

    /**
     * @return The configuration value for slow query logging on the managed database (MySQL engine types only).
     * 
     */
    public Output<Optional<Boolean>> mysqlSlowQueryLog() {
        return Codegen.optional(this.mysqlSlowQueryLog);
    }
    /**
     * A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
     * 
     */
    @Export(name="mysqlSqlModes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> mysqlSqlModes;

    /**
     * @return A list of SQL modes to configure for the managed database (MySQL engine types only - `ALLOW_INVALID_DATES`, `ANSI`, `ANSI_QUOTES`, `ERROR_FOR_DIVISION_BY_ZERO`, `HIGH_NOT_PRECEDENCE`, `IGNORE_SPACE`, `NO_AUTO_VALUE_ON_ZERO`, `NO_DIR_IN_CREATE`, `NO_ENGINE_SUBSTITUTION`, `NO_UNSIGNED_SUBTRACTION`, `NO_ZERO_DATE`, `NO_ZERO_IN_DATE`, `ONLY_FULL_GROUP_BY`, `PIPES_AS_CONCAT`, `REAL_AS_FLOAT`, `STRICT_ALL_TABLES`, `STRICT_TRANS_TABLES`, `TIME_TRUNCATE_FRACTIONAL`, `TRADITIONAL`).
     * 
     */
    public Output<Optional<List<String>>> mysqlSqlModes() {
        return Codegen.optional(this.mysqlSqlModes);
    }
    /**
     * The password for the managed database&#39;s primary admin user.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return The password for the managed database&#39;s primary admin user.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
     * 
     */
    @Export(name="plan", refs={String.class}, tree="[0]")
    private Output<String> plan;

    /**
     * @return The ID of the plan that you want the managed database to subscribe to. [See List Managed Database Plans](https://www.vultr.com/api/#tag/managed-databases/operation/list-database-plans)
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }
    /**
     * The description of the disk(s) on the managed database.
     * 
     */
    @Export(name="planDisk", refs={Integer.class}, tree="[0]")
    private Output<Integer> planDisk;

    /**
     * @return The description of the disk(s) on the managed database.
     * 
     */
    public Output<Integer> planDisk() {
        return this.planDisk;
    }
    /**
     * The amount of memory available on the managed database in MB.
     * 
     */
    @Export(name="planRam", refs={Integer.class}, tree="[0]")
    private Output<Integer> planRam;

    /**
     * @return The amount of memory available on the managed database in MB.
     * 
     */
    public Output<Integer> planRam() {
        return this.planRam;
    }
    /**
     * The number of standby nodes available on the managed database.
     * 
     */
    @Export(name="planReplicas", refs={Integer.class}, tree="[0]")
    private Output<Integer> planReplicas;

    /**
     * @return The number of standby nodes available on the managed database.
     * 
     */
    public Output<Integer> planReplicas() {
        return this.planReplicas;
    }
    /**
     * The number of virtual CPUs available on the managed database.
     * 
     */
    @Export(name="planVcpus", refs={Integer.class}, tree="[0]")
    private Output<Integer> planVcpus;

    /**
     * @return The number of virtual CPUs available on the managed database.
     * 
     */
    public Output<Integer> planVcpus() {
        return this.planVcpus;
    }
    /**
     * The connection port for the managed database.
     * 
     */
    @Export(name="port", refs={String.class}, tree="[0]")
    private Output<String> port;

    /**
     * @return The connection port for the managed database.
     * 
     */
    public Output<String> port() {
        return this.port;
    }
    /**
     * A list of read replicas attached to the managed database.
     * 
     */
    @Export(name="readReplicas", refs={List.class,DatabaseReadReplica.class}, tree="[0,1]")
    private Output<List<DatabaseReadReplica>> readReplicas;

    /**
     * @return A list of read replicas attached to the managed database.
     * 
     */
    public Output<List<DatabaseReadReplica>> readReplicas() {
        return this.readReplicas;
    }
    /**
     * The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
     * 
     */
    @Export(name="redisEvictionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> redisEvictionPolicy;

    /**
     * @return The configuration value for the data eviction policy on the managed database (Redis engine types only - `noeviction`, `allkeys-lru`, `volatile-lru`, `allkeys-random`, `volatile-random`, `volatile-ttl`, `volatile-lfu`, `allkeys-lfu`).
     * 
     */
    public Output<Optional<String>> redisEvictionPolicy() {
        return Codegen.optional(this.redisEvictionPolicy);
    }
    /**
     * The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The ID of the region that the managed database is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The current status of the managed database (poweroff, rebuilding, rebalancing, running).
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The current status of the managed database (poweroff, rebuilding, rebalancing, running).
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The tag to assign to the managed database.
     * 
     */
    @Export(name="tag", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tag;

    /**
     * @return The tag to assign to the managed database.
     * 
     */
    public Output<Optional<String>> tag() {
        return Codegen.optional(this.tag);
    }
    /**
     * A list of allowed IP addresses for the managed database.
     * 
     */
    @Export(name="trustedIps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> trustedIps;

    /**
     * @return A list of allowed IP addresses for the managed database.
     * 
     */
    public Output<Optional<List<String>>> trustedIps() {
        return Codegen.optional(this.trustedIps);
    }
    /**
     * The primary admin user for the managed database.
     * 
     */
    @Export(name="user", refs={String.class}, tree="[0]")
    private Output<String> user;

    /**
     * @return The primary admin user for the managed database.
     * 
     */
    public Output<String> user() {
        return this.user;
    }
    @Export(name="vpcId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vpcId;

    public Output<Optional<String>> vpcId() {
        return Codegen.optional(this.vpcId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(String name, DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(String name, DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/database:Database", name, args == null ? DatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Database(String name, Output<String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vultr:index/database:Database", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(String name, Output<String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, state, options);
    }
}
