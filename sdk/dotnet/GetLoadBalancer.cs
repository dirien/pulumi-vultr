// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// Get information about a Vultr load balancer.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a load balancer by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myLb = Vultr.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetLoadBalancerFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-lb-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("vultr:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr load balancer.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a load balancer by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myLb = Vultr.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetLoadBalancerFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-lb-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("vultr:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetLoadBalancerFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding load balancers.
        /// </summary>
        public List<Inputs.GetLoadBalancerFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLoadBalancerFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        [Input("proxyProtocol")]
        public bool? ProxyProtocol { get; set; }

        public GetLoadBalancerArgs()
        {
        }
        public static new GetLoadBalancerArgs Empty => new GetLoadBalancerArgs();
    }

    public sealed class GetLoadBalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetLoadBalancerFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding load balancers.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLoadBalancerFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        [Input("proxyProtocol")]
        public Input<bool>? ProxyProtocol { get; set; }

        public GetLoadBalancerInvokeArgs()
        {
        }
        public static new GetLoadBalancerInvokeArgs Empty => new GetLoadBalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        /// <summary>
        /// Array of instances that are currently attached to the load balancer.
        /// </summary>
        public readonly ImmutableArray<string> AttachedInstances;
        /// <summary>
        /// The balancing algorithm for your load balancer.
        /// </summary>
        public readonly string BalancingAlgorithm;
        /// <summary>
        /// Name for your given sticky session.
        /// </summary>
        public readonly string CookieName;
        public readonly string DateCreated;
        public readonly ImmutableArray<Outputs.GetLoadBalancerFilterResult> Filters;
        public readonly ImmutableArray<ImmutableDictionary<string, object>> FirewallRules;
        /// <summary>
        /// Defines the forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, object>> ForwardingRules;
        /// <summary>
        /// Boolean value that indicates if SSL is enabled.
        /// </summary>
        public readonly bool HasSsl;
        /// <summary>
        /// Defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
        /// </summary>
        public readonly ImmutableDictionary<string, object> HealthCheck;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPv4 address for your load balancer.
        /// </summary>
        public readonly string Ipv4;
        /// <summary>
        /// IPv6 address for your load balancer.
        /// </summary>
        public readonly string Ipv6;
        /// <summary>
        /// The load balancers label.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        public readonly bool? ProxyProtocol;
        /// <summary>
        /// The region your load balancer is deployed in.
        /// </summary>
        public readonly string Region;
        public readonly ImmutableDictionary<string, object> Ssl;
        /// <summary>
        /// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
        /// </summary>
        public readonly bool SslRedirect;
        /// <summary>
        /// Current status for the load balancer
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetLoadBalancerResult(
            ImmutableArray<string> attachedInstances,

            string balancingAlgorithm,

            string cookieName,

            string dateCreated,

            ImmutableArray<Outputs.GetLoadBalancerFilterResult> filters,

            ImmutableArray<ImmutableDictionary<string, object>> firewallRules,

            ImmutableArray<ImmutableDictionary<string, object>> forwardingRules,

            bool hasSsl,

            ImmutableDictionary<string, object> healthCheck,

            string id,

            string ipv4,

            string ipv6,

            string label,

            bool? proxyProtocol,

            string region,

            ImmutableDictionary<string, object> ssl,

            bool sslRedirect,

            string status)
        {
            AttachedInstances = attachedInstances;
            BalancingAlgorithm = balancingAlgorithm;
            CookieName = cookieName;
            DateCreated = dateCreated;
            Filters = filters;
            FirewallRules = firewallRules;
            ForwardingRules = forwardingRules;
            HasSsl = hasSsl;
            HealthCheck = healthCheck;
            Id = id;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            Label = label;
            ProxyProtocol = proxyProtocol;
            Region = region;
            Ssl = ssl;
            SslRedirect = sslRedirect;
            Status = status;
        }
    }
}
