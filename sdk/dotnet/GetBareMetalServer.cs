// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetBareMetalServer
    {
        /// <summary>
        /// Get information about a Vultr bare metal server.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a server by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myServer = Vultr.GetBareMetalServer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetBareMetalServerFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-server-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBareMetalServerResult> InvokeAsync(GetBareMetalServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBareMetalServerResult>("vultr:index/getBareMetalServer:getBareMetalServer", args ?? new GetBareMetalServerArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr bare metal server.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a server by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myServer = Vultr.GetBareMetalServer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetBareMetalServerFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-server-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBareMetalServerResult> Invoke(GetBareMetalServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBareMetalServerResult>("vultr:index/getBareMetalServer:getBareMetalServer", args ?? new GetBareMetalServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBareMetalServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetBareMetalServerFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding servers.
        /// </summary>
        public List<Inputs.GetBareMetalServerFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBareMetalServerFilterArgs>());
            set => _filters = value;
        }

        public GetBareMetalServerArgs()
        {
        }
        public static new GetBareMetalServerArgs Empty => new GetBareMetalServerArgs();
    }

    public sealed class GetBareMetalServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetBareMetalServerFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding servers.
        /// </summary>
        public InputList<Inputs.GetBareMetalServerFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBareMetalServerFilterInputArgs>());
            set => _filters = value;
        }

        public GetBareMetalServerInvokeArgs()
        {
        }
        public static new GetBareMetalServerInvokeArgs Empty => new GetBareMetalServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBareMetalServerResult
    {
        /// <summary>
        /// The server's application ID.
        /// </summary>
        public readonly int AppId;
        /// <summary>
        /// The number of CPUs available on the server.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// The date the server was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// The description of the disk(s) on the server.
        /// </summary>
        public readonly string Disk;
        public readonly ImmutableArray<string> Features;
        public readonly ImmutableArray<Outputs.GetBareMetalServerFilterResult> Filters;
        /// <summary>
        /// The server's IPv4 gateway.
        /// </summary>
        public readonly string GatewayV4;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Marketplace ID for this application.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// The server's label.
        /// </summary>
        public readonly string Label;
        public readonly int MacAddress;
        /// <summary>
        /// The server's main IP address.
        /// </summary>
        public readonly string MainIp;
        /// <summary>
        /// The server's IPv4 netmask.
        /// </summary>
        public readonly string NetmaskV4;
        /// <summary>
        /// The operating system of the server.
        /// </summary>
        public readonly string Os;
        /// <summary>
        /// The server's operating system ID.
        /// </summary>
        public readonly int OsId;
        /// <summary>
        /// The server's plan ID.
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// The amount of memory available on the server in MB.
        /// </summary>
        public readonly string Ram;
        /// <summary>
        /// The region ID of the server.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The status of the server's subscription.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A list of tags applied to the server.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string V6MainIp;
        public readonly string V6Network;
        public readonly int V6NetworkSize;
        /// <summary>
        /// A list of VPC 2.0 IDs attached to the server.
        /// </summary>
        public readonly ImmutableArray<string> Vpc2Ids;

        [OutputConstructor]
        private GetBareMetalServerResult(
            int appId,

            int cpuCount,

            string dateCreated,

            string disk,

            ImmutableArray<string> features,

            ImmutableArray<Outputs.GetBareMetalServerFilterResult> filters,

            string gatewayV4,

            string id,

            string imageId,

            string label,

            int macAddress,

            string mainIp,

            string netmaskV4,

            string os,

            int osId,

            string plan,

            string ram,

            string region,

            string status,

            ImmutableArray<string> tags,

            string v6MainIp,

            string v6Network,

            int v6NetworkSize,

            ImmutableArray<string> vpc2Ids)
        {
            AppId = appId;
            CpuCount = cpuCount;
            DateCreated = dateCreated;
            Disk = disk;
            Features = features;
            Filters = filters;
            GatewayV4 = gatewayV4;
            Id = id;
            ImageId = imageId;
            Label = label;
            MacAddress = macAddress;
            MainIp = mainIp;
            NetmaskV4 = netmaskV4;
            Os = os;
            OsId = osId;
            Plan = plan;
            Ram = ram;
            Region = region;
            Status = status;
            Tags = tags;
            V6MainIp = v6MainIp;
            V6Network = v6Network;
            V6NetworkSize = v6NetworkSize;
            Vpc2Ids = vpc2Ids;
        }
    }
}
