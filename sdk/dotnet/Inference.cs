// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Provides a Vultr Serverless Inference resource. This can be used to create, read, modify, and delete managed inference subscriptions on your Vultr account.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new inference subscription:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myInferenceSubscription = new Vultr.Inference("myInferenceSubscription", new()
    ///     {
    ///         Label = "my_inference_label",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Inference subscriptions can be imported using the subscription's `ID`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vultr:index/inference:Inference my_inference_subscription b6a859c5-b299-49dd-8888-b1abbc517d08
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/inference:Inference")]
    public partial class Inference : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The inference subscription's API key for accessing the Vultr Inference API.
        /// </summary>
        [Output("apiKey")]
        public Output<string> ApiKey { get; private set; } = null!;

        /// <summary>
        /// The date the inference subscription was added to your Vultr account.
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// A label for the inference subscription.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        [Output("usage")]
        public Output<ImmutableDictionary<string, string>> Usage { get; private set; } = null!;


        /// <summary>
        /// Create a Inference resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Inference(string name, InferenceArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/inference:Inference", name, args ?? new InferenceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Inference(string name, Input<string> id, InferenceState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/inference:Inference", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Inference resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Inference Get(string name, Input<string> id, InferenceState? state = null, CustomResourceOptions? options = null)
        {
            return new Inference(name, id, state, options);
        }
    }

    public sealed class InferenceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A label for the inference subscription.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        public InferenceArgs()
        {
        }
        public static new InferenceArgs Empty => new InferenceArgs();
    }

    public sealed class InferenceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The inference subscription's API key for accessing the Vultr Inference API.
        /// </summary>
        [Input("apiKey")]
        public Input<string>? ApiKey { get; set; }

        /// <summary>
        /// The date the inference subscription was added to your Vultr account.
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// A label for the inference subscription.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("usage")]
        private InputMap<string>? _usage;
        public InputMap<string> Usage
        {
            get => _usage ?? (_usage = new InputMap<string>());
            set => _usage = value;
        }

        public InferenceState()
        {
        }
        public static new InferenceState Empty => new InferenceState();
    }
}
