// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetDatabase
    {
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("vultr:index/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("vultr:index/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetDatabaseFilterArgs>? _filters;
        public List<Inputs.GetDatabaseFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabaseFilterArgs>());
            set => _filters = value;
        }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetDatabaseFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabaseFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabaseFilterInputArgs>());
            set => _filters = value;
        }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        public readonly string ClusterTimeZone;
        public readonly string DatabaseEngine;
        public readonly string DatabaseEngineVersion;
        public readonly string DateCreated;
        public readonly string Dbname;
        public readonly ImmutableArray<Outputs.GetDatabaseFilterResult> Filters;
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Label;
        public readonly string LatestBackup;
        public readonly string MaintenanceDow;
        public readonly string MaintenanceTime;
        public readonly int MysqlLongQueryTime;
        public readonly bool MysqlRequirePrimaryKey;
        public readonly bool MysqlSlowQueryLog;
        public readonly ImmutableArray<string> MysqlSqlModes;
        public readonly string Password;
        public readonly string Plan;
        public readonly int PlanDisk;
        public readonly int PlanRam;
        public readonly int PlanReplicas;
        public readonly int PlanVcpus;
        public readonly string Port;
        public readonly ImmutableArray<Outputs.GetDatabaseReadReplicaResult> ReadReplicas;
        public readonly string RedisEvictionPolicy;
        public readonly string Region;
        public readonly string Status;
        public readonly string Tag;
        public readonly ImmutableArray<string> TrustedIps;
        public readonly string User;

        [OutputConstructor]
        private GetDatabaseResult(
            string clusterTimeZone,

            string databaseEngine,

            string databaseEngineVersion,

            string dateCreated,

            string dbname,

            ImmutableArray<Outputs.GetDatabaseFilterResult> filters,

            string host,

            string id,

            string label,

            string latestBackup,

            string maintenanceDow,

            string maintenanceTime,

            int mysqlLongQueryTime,

            bool mysqlRequirePrimaryKey,

            bool mysqlSlowQueryLog,

            ImmutableArray<string> mysqlSqlModes,

            string password,

            string plan,

            int planDisk,

            int planRam,

            int planReplicas,

            int planVcpus,

            string port,

            ImmutableArray<Outputs.GetDatabaseReadReplicaResult> readReplicas,

            string redisEvictionPolicy,

            string region,

            string status,

            string tag,

            ImmutableArray<string> trustedIps,

            string user)
        {
            ClusterTimeZone = clusterTimeZone;
            DatabaseEngine = databaseEngine;
            DatabaseEngineVersion = databaseEngineVersion;
            DateCreated = dateCreated;
            Dbname = dbname;
            Filters = filters;
            Host = host;
            Id = id;
            Label = label;
            LatestBackup = latestBackup;
            MaintenanceDow = maintenanceDow;
            MaintenanceTime = maintenanceTime;
            MysqlLongQueryTime = mysqlLongQueryTime;
            MysqlRequirePrimaryKey = mysqlRequirePrimaryKey;
            MysqlSlowQueryLog = mysqlSlowQueryLog;
            MysqlSqlModes = mysqlSqlModes;
            Password = password;
            Plan = plan;
            PlanDisk = planDisk;
            PlanRam = planRam;
            PlanReplicas = planReplicas;
            PlanVcpus = planVcpus;
            Port = port;
            ReadReplicas = readReplicas;
            RedisEvictionPolicy = redisEvictionPolicy;
            Region = region;
            Status = status;
            Tag = tag;
            TrustedIps = trustedIps;
            User = user;
        }
    }
}
