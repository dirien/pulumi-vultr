// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Provides a Vultr Reverse IPv4 resource. This can be used to create, read, and
    /// modify reverse DNS records for IPv4 addresses. Upon success, DNS
    /// changes may take 6-12 hours to become active.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new reverse DNS record for an IPv4 address:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myInstance = new Vultr.Instance("myInstance", new()
    ///     {
    ///         EnableIpv6 = true,
    ///         OsId = 477,
    ///         Plan = "vc2-1c-2gb",
    ///         Region = "ewr",
    ///     });
    /// 
    ///     var myReverseIpv4 = new Vultr.ReverseIpv4("myReverseIpv4", new()
    ///     {
    ///         InstanceId = myInstance.Id,
    ///         Ip = myInstance.MainIp,
    ///         Reverse = "host.example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/reverseIpv4:ReverseIpv4")]
    public partial class ReverseIpv4 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The gateway IP address.
        /// </summary>
        [Output("gateway")]
        public Output<string> Gateway { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance you want to set an IPv4
        /// reverse DNS record for.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address used in the reverse DNS record.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// The IPv4 netmask in dot-decimal notation.
        /// </summary>
        [Output("netmask")]
        public Output<string> Netmask { get; private set; } = null!;

        /// <summary>
        /// The hostname used in the IPv4 reverse DNS record.
        /// </summary>
        [Output("reverse")]
        public Output<string> Reverse { get; private set; } = null!;


        /// <summary>
        /// Create a ReverseIpv4 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReverseIpv4(string name, ReverseIpv4Args args, CustomResourceOptions? options = null)
            : base("vultr:index/reverseIpv4:ReverseIpv4", name, args ?? new ReverseIpv4Args(), MakeResourceOptions(options, ""))
        {
        }

        private ReverseIpv4(string name, Input<string> id, ReverseIpv4State? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/reverseIpv4:ReverseIpv4", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReverseIpv4 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReverseIpv4 Get(string name, Input<string> id, ReverseIpv4State? state = null, CustomResourceOptions? options = null)
        {
            return new ReverseIpv4(name, id, state, options);
        }
    }

    public sealed class ReverseIpv4Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the instance you want to set an IPv4
        /// reverse DNS record for.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The IPv4 address used in the reverse DNS record.
        /// </summary>
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        /// <summary>
        /// The hostname used in the IPv4 reverse DNS record.
        /// </summary>
        [Input("reverse", required: true)]
        public Input<string> Reverse { get; set; } = null!;

        public ReverseIpv4Args()
        {
        }
        public static new ReverseIpv4Args Empty => new ReverseIpv4Args();
    }

    public sealed class ReverseIpv4State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The gateway IP address.
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// The ID of the instance you want to set an IPv4
        /// reverse DNS record for.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The IPv4 address used in the reverse DNS record.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// The IPv4 netmask in dot-decimal notation.
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        /// <summary>
        /// The hostname used in the IPv4 reverse DNS record.
        /// </summary>
        [Input("reverse")]
        public Input<string>? Reverse { get; set; }

        public ReverseIpv4State()
        {
        }
        public static new ReverseIpv4State Empty => new ReverseIpv4State();
    }
}
