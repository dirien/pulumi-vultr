// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetInference
    {
        /// <summary>
        /// Get information about a Vultr Serverless Inference subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for an inference subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInference = Vultr.GetInference.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetInferenceFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my_inference_label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInferenceResult> InvokeAsync(GetInferenceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInferenceResult>("vultr:index/getInference:getInference", args ?? new GetInferenceArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr Serverless Inference subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for an inference subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInference = Vultr.GetInference.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetInferenceFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my_inference_label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInferenceResult> Invoke(GetInferenceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInferenceResult>("vultr:index/getInference:getInference", args ?? new GetInferenceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInferenceArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetInferenceFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding inference subscriptions.
        /// </summary>
        public List<Inputs.GetInferenceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInferenceFilterArgs>());
            set => _filters = value;
        }

        public GetInferenceArgs()
        {
        }
        public static new GetInferenceArgs Empty => new GetInferenceArgs();
    }

    public sealed class GetInferenceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetInferenceFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding inference subscriptions.
        /// </summary>
        public InputList<Inputs.GetInferenceFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInferenceFilterInputArgs>());
            set => _filters = value;
        }

        public GetInferenceInvokeArgs()
        {
        }
        public static new GetInferenceInvokeArgs Empty => new GetInferenceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInferenceResult
    {
        /// <summary>
        /// The inference subscription's API key for accessing the Vultr Inference API.
        /// </summary>
        public readonly string ApiKey;
        /// <summary>
        /// The date the inference subscription was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        public readonly ImmutableArray<Outputs.GetInferenceFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The inference subscription's label.
        /// </summary>
        public readonly string Label;
        public readonly ImmutableDictionary<string, object> Usage;

        [OutputConstructor]
        private GetInferenceResult(
            string apiKey,

            string dateCreated,

            ImmutableArray<Outputs.GetInferenceFilterResult> filters,

            string id,

            string label,

            ImmutableDictionary<string, object> usage)
        {
            ApiKey = apiKey;
            DateCreated = dateCreated;
            Filters = filters;
            Id = id;
            Label = label;
            Usage = usage;
        }
    }
}
