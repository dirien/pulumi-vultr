// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetRegion
    {
        /// <summary>
        /// Get information about a Vultr region.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a region by `id`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myRegion = Vultr.GetRegion.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetRegionFilterInputArgs
        ///             {
        ///                 Name = "id",
        ///                 Values = new[]
        ///                 {
        ///                     "sea",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionResult> InvokeAsync(GetRegionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionResult>("vultr:index/getRegion:getRegion", args ?? new GetRegionArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr region.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a region by `id`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myRegion = Vultr.GetRegion.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetRegionFilterInputArgs
        ///             {
        ///                 Name = "id",
        ///                 Values = new[]
        ///                 {
        ///                     "sea",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionResult> Invoke(GetRegionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionResult>("vultr:index/getRegion:getRegion", args ?? new GetRegionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr region.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a region by `id`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myRegion = Vultr.GetRegion.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetRegionFilterInputArgs
        ///             {
        ///                 Name = "id",
        ///                 Values = new[]
        ///                 {
        ///                     "sea",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionResult> Invoke(GetRegionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionResult>("vultr:index/getRegion:getRegion", args ?? new GetRegionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRegionFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding regions.
        /// </summary>
        public List<Inputs.GetRegionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegionFilterArgs>());
            set => _filters = value;
        }

        public GetRegionArgs()
        {
        }
        public static new GetRegionArgs Empty => new GetRegionArgs();
    }

    public sealed class GetRegionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRegionFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding regions.
        /// </summary>
        public InputList<Inputs.GetRegionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegionFilterInputArgs>());
            set => _filters = value;
        }

        public GetRegionInvokeArgs()
        {
        }
        public static new GetRegionInvokeArgs Empty => new GetRegionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionResult
    {
        /// <summary>
        /// The city the region is in.
        /// </summary>
        public readonly string City;
        /// <summary>
        /// The continent the region is in.
        /// </summary>
        public readonly string Continent;
        /// <summary>
        /// The country the region is in.
        /// </summary>
        public readonly string Country;
        public readonly ImmutableArray<Outputs.GetRegionFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Shows whether options like ddos protection or block storage are available in the region.
        /// </summary>
        public readonly ImmutableArray<string> Options;

        [OutputConstructor]
        private GetRegionResult(
            string city,

            string continent,

            string country,

            ImmutableArray<Outputs.GetRegionFilterResult> filters,

            string id,

            ImmutableArray<string> options)
        {
            City = city;
            Continent = continent;
            Country = country;
            Filters = filters;
            Id = id;
            Options = options;
        }
    }
}
