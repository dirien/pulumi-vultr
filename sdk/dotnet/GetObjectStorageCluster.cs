// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetObjectStorageCluster
    {
        /// <summary>
        /// Get information about Object Storage Clusters on Vultr.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for an object storage cluster by `region`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var s3 = Vultr.GetObjectStorageCluster.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetObjectStorageClusterFilterInputArgs
        ///             {
        ///                 Name = "region",
        ///                 Values = new[]
        ///                 {
        ///                     "ewr",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetObjectStorageClusterResult> InvokeAsync(GetObjectStorageClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetObjectStorageClusterResult>("vultr:index/getObjectStorageCluster:getObjectStorageCluster", args ?? new GetObjectStorageClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Object Storage Clusters on Vultr.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for an object storage cluster by `region`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var s3 = Vultr.GetObjectStorageCluster.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetObjectStorageClusterFilterInputArgs
        ///             {
        ///                 Name = "region",
        ///                 Values = new[]
        ///                 {
        ///                     "ewr",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetObjectStorageClusterResult> Invoke(GetObjectStorageClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetObjectStorageClusterResult>("vultr:index/getObjectStorageCluster:getObjectStorageCluster", args ?? new GetObjectStorageClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObjectStorageClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetObjectStorageClusterFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding operating systems.
        /// </summary>
        public List<Inputs.GetObjectStorageClusterFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetObjectStorageClusterFilterArgs>());
            set => _filters = value;
        }

        public GetObjectStorageClusterArgs()
        {
        }
        public static new GetObjectStorageClusterArgs Empty => new GetObjectStorageClusterArgs();
    }

    public sealed class GetObjectStorageClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetObjectStorageClusterFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding operating systems.
        /// </summary>
        public InputList<Inputs.GetObjectStorageClusterFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetObjectStorageClusterFilterInputArgs>());
            set => _filters = value;
        }

        public GetObjectStorageClusterInvokeArgs()
        {
        }
        public static new GetObjectStorageClusterInvokeArgs Empty => new GetObjectStorageClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetObjectStorageClusterResult
    {
        /// <summary>
        /// The Cluster is eligible for Object Storage deployment. (yes or no)
        /// </summary>
        public readonly string Deploy;
        public readonly ImmutableArray<Outputs.GetObjectStorageClusterFilterResult> Filters;
        /// <summary>
        /// The cluster hostname.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The identifying cluster ID.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The region ID of the object storage cluster.
        /// </summary>
        public readonly string Region;

        [OutputConstructor]
        private GetObjectStorageClusterResult(
            string deploy,

            ImmutableArray<Outputs.GetObjectStorageClusterFilterResult> filters,

            string hostname,

            int id,

            string region)
        {
            Deploy = deploy;
            Filters = filters;
            Hostname = hostname;
            Id = id;
            Region = region;
        }
    }
}
