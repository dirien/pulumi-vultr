// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new reserved IP:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myReservedIp = new Vultr.ReservedIp("myReservedIp", new()
    ///     {
    ///         IpType = "v4",
    ///         Label = "my-reserved-ip",
    ///         Region = "sea",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Attach a reserved IP to a instance:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myReservedIp = new Vultr.ReservedIp("myReservedIp", new()
    ///     {
    ///         InstanceId = "b9cc6fad-70b1-40ee-ab6a-4d622858962f",
    ///         IpType = "v4",
    ///         Label = "my-reserved-ip",
    ///         Region = "sea",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Reserved IPs can be imported using the reserved IP `ID`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vultr:index/reservedIp:ReservedIp my_reserved_ip b9cc6fad-70b1-40ee-ab6a-4d622858962f
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/reservedIp:ReservedIp")]
    public partial class ReservedIp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Output("ipType")]
        public Output<string> IpType { get; private set; } = null!;

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The reserved IP's subnet.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// The reserved IP's subnet size.
        /// </summary>
        [Output("subnetSize")]
        public Output<int> SubnetSize { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedIp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedIp(string name, ReservedIpArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/reservedIp:ReservedIp", name, args ?? new ReservedIpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedIp(string name, Input<string> id, ReservedIpState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/reservedIp:ReservedIp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedIp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedIp Get(string name, Input<string> id, ReservedIpState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedIp(name, id, state, options);
        }
    }

    public sealed class ReservedIpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Input("ipType", required: true)]
        public Input<string> IpType { get; set; } = null!;

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public ReservedIpArgs()
        {
        }
        public static new ReservedIpArgs Empty => new ReservedIpArgs();
    }

    public sealed class ReservedIpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VPS ID you want this reserved IP to be attached to.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The type of reserved IP that you want. Either "v4" or "v6".
        /// </summary>
        [Input("ipType")]
        public Input<string>? IpType { get; set; }

        /// <summary>
        /// The label you want to give your reserved IP.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region ID that you want the reserved IP to be created in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The reserved IP's subnet.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// The reserved IP's subnet size.
        /// </summary>
        [Input("subnetSize")]
        public Input<int>? SubnetSize { get; set; }

        public ReservedIpState()
        {
        }
        public static new ReservedIpState Empty => new ReservedIpState();
    }
}
