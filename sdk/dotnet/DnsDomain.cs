// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Provides a Vultr DNS Domain resource. This can be used to create, read, modify, and delete DNS Domains.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new DNS Domain
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myDomain = new Vultr.DnsDomain("myDomain", new()
    ///     {
    ///         Domain = "domain.com",
    ///         Ip = "66.42.94.227",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNS Domains can be imported using the Dns Domain `domain`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vultr:index/dnsDomain:DnsDomain name domain.com
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/dnsDomain:DnsDomain")]
    public partial class DnsDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date the domain was added to your account.
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
        /// </summary>
        [Output("dnsSec")]
        public Output<string?> DnsSec { get; private set; } = null!;

        /// <summary>
        /// Name of domain.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Instance IP you want associated to domain. If omitted this will create a domain with no records.
        /// </summary>
        [Output("ip")]
        public Output<string?> Ip { get; private set; } = null!;


        /// <summary>
        /// Create a DnsDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsDomain(string name, DnsDomainArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/dnsDomain:DnsDomain", name, args ?? new DnsDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsDomain(string name, Input<string> id, DnsDomainState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/dnsDomain:DnsDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsDomain Get(string name, Input<string> id, DnsDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsDomain(name, id, state, options);
        }
    }

    public sealed class DnsDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
        /// </summary>
        [Input("dnsSec")]
        public Input<string>? DnsSec { get; set; }

        /// <summary>
        /// Name of domain.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Instance IP you want associated to domain. If omitted this will create a domain with no records.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        public DnsDomainArgs()
        {
        }
        public static new DnsDomainArgs Empty => new DnsDomainArgs();
    }

    public sealed class DnsDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date the domain was added to your account.
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
        /// </summary>
        [Input("dnsSec")]
        public Input<string>? DnsSec { get; set; }

        /// <summary>
        /// Name of domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Instance IP you want associated to domain. If omitted this will create a domain with no records.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        public DnsDomainState()
        {
        }
        public static new DnsDomainState Empty => new DnsDomainState();
    }
}
