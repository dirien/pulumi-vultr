// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetIsoPrivate
    {
        /// <summary>
        /// Get information about an ISO file uploaded to your Vultr account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a ISO file by `filename`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myIso = Vultr.GetIsoPrivate.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetIsoPrivateFilterInputArgs
        ///             {
        ///                 Name = "filename",
        ///                 Values = new[]
        ///                 {
        ///                     "my-iso-filename",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIsoPrivateResult> InvokeAsync(GetIsoPrivateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIsoPrivateResult>("vultr:index/getIsoPrivate:getIsoPrivate", args ?? new GetIsoPrivateArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an ISO file uploaded to your Vultr account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a ISO file by `filename`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myIso = Vultr.GetIsoPrivate.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetIsoPrivateFilterInputArgs
        ///             {
        ///                 Name = "filename",
        ///                 Values = new[]
        ///                 {
        ///                     "my-iso-filename",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIsoPrivateResult> Invoke(GetIsoPrivateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIsoPrivateResult>("vultr:index/getIsoPrivate:getIsoPrivate", args ?? new GetIsoPrivateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIsoPrivateArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetIsoPrivateFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding ISO files.
        /// </summary>
        public List<Inputs.GetIsoPrivateFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIsoPrivateFilterArgs>());
            set => _filters = value;
        }

        public GetIsoPrivateArgs()
        {
        }
        public static new GetIsoPrivateArgs Empty => new GetIsoPrivateArgs();
    }

    public sealed class GetIsoPrivateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetIsoPrivateFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding ISO files.
        /// </summary>
        public InputList<Inputs.GetIsoPrivateFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetIsoPrivateFilterInputArgs>());
            set => _filters = value;
        }

        public GetIsoPrivateInvokeArgs()
        {
        }
        public static new GetIsoPrivateInvokeArgs Empty => new GetIsoPrivateInvokeArgs();
    }


    [OutputType]
    public sealed class GetIsoPrivateResult
    {
        /// <summary>
        /// The date the ISO file was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// The ISO file's filename.
        /// </summary>
        public readonly string Filename;
        public readonly ImmutableArray<Outputs.GetIsoPrivateFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The md5 hash of the ISO file.
        /// </summary>
        public readonly string Md5sum;
        /// <summary>
        /// The sha512 hash of the ISO file.
        /// </summary>
        public readonly string Sha512sum;
        /// <summary>
        /// The size of the ISO file in bytes.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The status of the ISO file.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetIsoPrivateResult(
            string dateCreated,

            string filename,

            ImmutableArray<Outputs.GetIsoPrivateFilterResult> filters,

            string id,

            string md5sum,

            string sha512sum,

            int size,

            string status)
        {
            DateCreated = dateCreated;
            Filename = filename;
            Filters = filters;
            Id = id;
            Md5sum = md5sum;
            Sha512sum = sha512sum;
            Size = size;
            Status = status;
        }
    }
}
