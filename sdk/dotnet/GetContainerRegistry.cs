// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetContainerRegistry
    {
        /// <summary>
        /// Get information about a Vultr container registry.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vcr_ds = Vultr.GetContainerRegistry.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetContainerRegistryFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Values = new[]
        ///                 {
        ///                     "examplecontainerregistry",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainerRegistryResult> InvokeAsync(GetContainerRegistryArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerRegistryResult>("vultr:index/getContainerRegistry:getContainerRegistry", args ?? new GetContainerRegistryArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr container registry.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vcr_ds = Vultr.GetContainerRegistry.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetContainerRegistryFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Values = new[]
        ///                 {
        ///                     "examplecontainerregistry",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerRegistryResult> Invoke(GetContainerRegistryInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerRegistryResult>("vultr:index/getContainerRegistry:getContainerRegistry", args ?? new GetContainerRegistryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr container registry.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vcr_ds = Vultr.GetContainerRegistry.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetContainerRegistryFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Values = new[]
        ///                 {
        ///                     "examplecontainerregistry",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerRegistryResult> Invoke(GetContainerRegistryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerRegistryResult>("vultr:index/getContainerRegistry:getContainerRegistry", args ?? new GetContainerRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerRegistryArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetContainerRegistryFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding the container registry.
        /// </summary>
        public List<Inputs.GetContainerRegistryFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainerRegistryFilterArgs>());
            set => _filters = value;
        }

        public GetContainerRegistryArgs()
        {
        }
        public static new GetContainerRegistryArgs Empty => new GetContainerRegistryArgs();
    }

    public sealed class GetContainerRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetContainerRegistryFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding the container registry.
        /// </summary>
        public InputList<Inputs.GetContainerRegistryFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainerRegistryFilterInputArgs>());
            set => _filters = value;
        }

        public GetContainerRegistryInvokeArgs()
        {
        }
        public static new GetContainerRegistryInvokeArgs Empty => new GetContainerRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerRegistryResult
    {
        /// <summary>
        /// A date-time of when the root user was created.
        /// </summary>
        public readonly string DateCreated;
        public readonly ImmutableArray<Outputs.GetContainerRegistryFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the repository.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Boolean indicating whether or not the requires login credentials.
        /// </summary>
        public readonly bool Public;
        /// <summary>
        /// Listing of the repositories created within the registry and their metadata.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerRegistryRepositoryResult> Repositories;
        /// <summary>
        /// The user associated with the container registry.
        /// </summary>
        public readonly ImmutableDictionary<string, string> RootUser;
        /// <summary>
        /// A listing of current storage usage relevant to the container registry.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Storage;
        /// <summary>
        /// The URN of the container registry.
        /// </summary>
        public readonly string Urn;

        [OutputConstructor]
        private GetContainerRegistryResult(
            string dateCreated,

            ImmutableArray<Outputs.GetContainerRegistryFilterResult> filters,

            string id,

            string name,

            bool @public,

            ImmutableArray<Outputs.GetContainerRegistryRepositoryResult> repositories,

            ImmutableDictionary<string, string> rootUser,

            ImmutableDictionary<string, string> storage,

            string urn)
        {
            DateCreated = dateCreated;
            Filters = filters;
            Id = id;
            Name = name;
            Public = @public;
            Repositories = repositories;
            RootUser = rootUser;
            Storage = storage;
            Urn = urn;
        }
    }
}
