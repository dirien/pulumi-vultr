// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetVirtualFileSystemStorage
    {
        /// <summary>
        /// Get information about a Vultr virtual file system storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a virtual file system storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVfsStorage = Vultr.GetVirtualFileSystemStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetVirtualFileSystemStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-vfs-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVirtualFileSystemStorageResult> InvokeAsync(GetVirtualFileSystemStorageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualFileSystemStorageResult>("vultr:index/getVirtualFileSystemStorage:getVirtualFileSystemStorage", args ?? new GetVirtualFileSystemStorageArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr virtual file system storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a virtual file system storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVfsStorage = Vultr.GetVirtualFileSystemStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetVirtualFileSystemStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-vfs-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualFileSystemStorageResult> Invoke(GetVirtualFileSystemStorageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualFileSystemStorageResult>("vultr:index/getVirtualFileSystemStorage:getVirtualFileSystemStorage", args ?? new GetVirtualFileSystemStorageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr virtual file system storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a virtual file system storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVfsStorage = Vultr.GetVirtualFileSystemStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetVirtualFileSystemStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-vfs-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualFileSystemStorageResult> Invoke(GetVirtualFileSystemStorageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualFileSystemStorageResult>("vultr:index/getVirtualFileSystemStorage:getVirtualFileSystemStorage", args ?? new GetVirtualFileSystemStorageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualFileSystemStorageArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVirtualFileSystemStorageFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding virtual file system storage subscriptions.
        /// </summary>
        public List<Inputs.GetVirtualFileSystemStorageFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVirtualFileSystemStorageFilterArgs>());
            set => _filters = value;
        }

        public GetVirtualFileSystemStorageArgs()
        {
        }
        public static new GetVirtualFileSystemStorageArgs Empty => new GetVirtualFileSystemStorageArgs();
    }

    public sealed class GetVirtualFileSystemStorageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVirtualFileSystemStorageFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding virtual file system storage subscriptions.
        /// </summary>
        public InputList<Inputs.GetVirtualFileSystemStorageFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVirtualFileSystemStorageFilterInputArgs>());
            set => _filters = value;
        }

        public GetVirtualFileSystemStorageInvokeArgs()
        {
        }
        public static new GetVirtualFileSystemStorageInvokeArgs Empty => new GetVirtualFileSystemStorageInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualFileSystemStorageResult
    {
        /// <summary>
        /// A list of instance IDs currently attached to the virtual file system storage.
        /// </summary>
        public readonly ImmutableArray<string> AttachedInstances;
        /// <summary>
        /// A list of attchment states for instances currently attached to the virtual file system storage.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualFileSystemStorageAttachmentResult> Attachments;
        /// <summary>
        /// The current pending charges for the virtual file system storage subscription in USD.
        /// </summary>
        public readonly double Charges;
        /// <summary>
        /// The cost per month of the virtual file system storage subscription in USD.
        /// </summary>
        public readonly double Cost;
        /// <summary>
        /// The date the virtual file system storage subscription was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// The underlying disk type used by the virtual file system storage subscription.
        /// </summary>
        public readonly string DiskType;
        public readonly ImmutableArray<Outputs.GetVirtualFileSystemStorageFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The label of the virtual file system storage subscription.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The region ID of the virtual file system storage subscription.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The size of the virtual file system storage subscription in GB.
        /// </summary>
        public readonly int SizeGb;
        /// <summary>
        /// The status of the virtual file system storage subscription.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A list of tags used on the virtual file system storage subscription.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetVirtualFileSystemStorageResult(
            ImmutableArray<string> attachedInstances,

            ImmutableArray<Outputs.GetVirtualFileSystemStorageAttachmentResult> attachments,

            double charges,

            double cost,

            string dateCreated,

            string diskType,

            ImmutableArray<Outputs.GetVirtualFileSystemStorageFilterResult> filters,

            string id,

            string label,

            string region,

            int sizeGb,

            string status,

            ImmutableArray<string> tags)
        {
            AttachedInstances = attachedInstances;
            Attachments = attachments;
            Charges = charges;
            Cost = cost;
            DateCreated = dateCreated;
            DiskType = diskType;
            Filters = filters;
            Id = id;
            Label = label;
            Region = region;
            SizeGb = sizeGb;
            Status = status;
            Tags = tags;
        }
    }
}
