// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Create and update a Vultr container registry.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new container registry:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vcr1 = new Vultr.ContainerRegistry("vcr1", new()
    ///     {
    ///         Name = "examplecontainerregistry",
    ///         Plan = "start_up",
    ///         Public = false,
    ///         Region = "sjc",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// The `name` for container registries must be all lowercase and only contain alphanumeric characters.
    /// </summary>
    [VultrResourceType("vultr:index/containerRegistry:ContainerRegistry")]
    public partial class ContainerRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A date-time of when the root user was created.
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// The name for your container registry.  Must be lowercase and only alphanumeric characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        /// </summary>
        [Output("public")]
        public Output<bool> Public { get; private set; } = null!;

        /// <summary>
        /// The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The user associated with the container registry.
        /// </summary>
        [Output("rootUser")]
        public Output<ImmutableDictionary<string, object>> RootUser { get; private set; } = null!;

        /// <summary>
        /// A listing of current storage usage relevant to the container registry.
        /// </summary>
        [Output("storage")]
        public Output<ImmutableDictionary<string, object>> Storage { get; private set; } = null!;

        /// <summary>
        /// The URN of the container registry.
        /// </summary>
        [Output("urn")]
        public Output<string> Urn { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerRegistry(string name, ContainerRegistryArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/containerRegistry:ContainerRegistry", name, args ?? new ContainerRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerRegistry(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/containerRegistry:ContainerRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerRegistry Get(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerRegistry(name, id, state, options);
        }
    }

    public sealed class ContainerRegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name for your container registry.  Must be lowercase and only alphanumeric characters.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        /// </summary>
        [Input("plan", required: true)]
        public Input<string> Plan { get; set; } = null!;

        /// <summary>
        /// Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        /// </summary>
        [Input("public", required: true)]
        public Input<bool> Public { get; set; } = null!;

        /// <summary>
        /// The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public ContainerRegistryArgs()
        {
        }
        public static new ContainerRegistryArgs Empty => new ContainerRegistryArgs();
    }

    public sealed class ContainerRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A date-time of when the root user was created.
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// The name for your container registry.  Must be lowercase and only alphanumeric characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The billing plan for the container registry. [See available plans](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-plans)
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Boolean indicating if the container registry should be created with public visibility or if it should require credentials.
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The region where your container registry will be deployed. [See available regions](https://www.vultr.com/api/#tag/Container-Registry/operation/list-registry-regions)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootUser")]
        private InputMap<object>? _rootUser;

        /// <summary>
        /// The user associated with the container registry.
        /// </summary>
        public InputMap<object> RootUser
        {
            get => _rootUser ?? (_rootUser = new InputMap<object>());
            set => _rootUser = value;
        }

        [Input("storage")]
        private InputMap<object>? _storage;

        /// <summary>
        /// A listing of current storage usage relevant to the container registry.
        /// </summary>
        public InputMap<object> Storage
        {
            get => _storage ?? (_storage = new InputMap<object>());
            set => _storage = value;
        }

        /// <summary>
        /// The URN of the container registry.
        /// </summary>
        [Input("urn")]
        public Input<string>? Urn { get; set; }

        public ContainerRegistryState()
        {
        }
        public static new ContainerRegistryState Empty => new ContainerRegistryState();
    }
}
