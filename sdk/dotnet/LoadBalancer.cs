// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Get information about a Vultr load balancer.
    /// 
    /// ## Example Usage
    /// 
    /// Create a new load balancer:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var lb = new Vultr.LoadBalancer("lb", new()
    ///     {
    ///         BalancingAlgorithm = "roundrobin",
    ///         ForwardingRules = new[]
    ///         {
    ///             new Vultr.Inputs.LoadBalancerForwardingRuleArgs
    ///             {
    ///                 BackendPort = 81,
    ///                 BackendProtocol = "http",
    ///                 FrontendPort = 82,
    ///                 FrontendProtocol = "http",
    ///             },
    ///         },
    ///         HealthCheck = new Vultr.Inputs.LoadBalancerHealthCheckArgs
    ///         {
    ///             CheckInterval = 3,
    ///             HealthyThreshold = 4,
    ///             Path = "/test",
    ///             Port = 8080,
    ///             Protocol = "http",
    ///             ResponseTimeout = 1,
    ///             UnhealthyThreshold = 2,
    ///         },
    ///         Label = "vultr-load-balancer",
    ///         Region = "ewr",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Load Balancers can be imported using the load balancer `ID`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vultr:index/loadBalancer:LoadBalancer lb b6a859c5-b299-49dd-8888-b1abbc517d08
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Array of instances that are currently attached to the load balancer.
        /// </summary>
        [Output("attachedInstances")]
        public Output<ImmutableArray<string>> AttachedInstances { get; private set; } = null!;

        /// <summary>
        /// The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
        /// </summary>
        [Output("balancingAlgorithm")]
        public Output<string> BalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Name for your given sticky session.
        /// </summary>
        [Output("cookieName")]
        public Output<string?> CookieName { get; private set; } = null!;

        /// <summary>
        /// Defines the firewall rules for a load balancer.
        /// </summary>
        [Output("firewallRules")]
        public Output<ImmutableArray<Outputs.LoadBalancerFirewallRule>> FirewallRules { get; private set; } = null!;

        /// <summary>
        /// List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
        /// </summary>
        [Output("forwardingRules")]
        public Output<ImmutableArray<Outputs.LoadBalancerForwardingRule>> ForwardingRules { get; private set; } = null!;

        /// <summary>
        /// Boolean value that indicates if SSL is enabled.
        /// </summary>
        [Output("hasSsl")]
        public Output<bool> HasSsl { get; private set; } = null!;

        /// <summary>
        /// A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.LoadBalancerHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// IPv4 address for your load balancer.
        /// </summary>
        [Output("ipv4")]
        public Output<string> Ipv4 { get; private set; } = null!;

        /// <summary>
        /// IPv6 address for your load balancer.
        /// </summary>
        [Output("ipv6")]
        public Output<string> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// The load balancer's label.
        /// </summary>
        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// A private network ID that the load balancer should be attached to.
        /// </summary>
        [Output("privateNetwork")]
        public Output<string?> PrivateNetwork { get; private set; } = null!;

        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        [Output("proxyProtocol")]
        public Output<bool?> ProxyProtocol { get; private set; } = null!;

        /// <summary>
        /// The region your load balancer is deployed in.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
        /// </summary>
        [Output("ssl")]
        public Output<Outputs.LoadBalancerSsl?> Ssl { get; private set; } = null!;

        /// <summary>
        /// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
        /// </summary>
        [Output("sslRedirect")]
        public Output<bool?> SslRedirect { get; private set; } = null!;

        /// <summary>
        /// Current status for the load balancer
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A VPC ID that the load balancer should be attached to.
        /// </summary>
        [Output("vpc")]
        public Output<string?> Vpc { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        [Input("attachedInstances")]
        private InputList<string>? _attachedInstances;

        /// <summary>
        /// Array of instances that are currently attached to the load balancer.
        /// </summary>
        public InputList<string> AttachedInstances
        {
            get => _attachedInstances ?? (_attachedInstances = new InputList<string>());
            set => _attachedInstances = value;
        }

        /// <summary>
        /// The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
        /// </summary>
        [Input("balancingAlgorithm")]
        public Input<string>? BalancingAlgorithm { get; set; }

        /// <summary>
        /// Name for your given sticky session.
        /// </summary>
        [Input("cookieName")]
        public Input<string>? CookieName { get; set; }

        [Input("firewallRules")]
        private InputList<Inputs.LoadBalancerFirewallRuleArgs>? _firewallRules;

        /// <summary>
        /// Defines the firewall rules for a load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerFirewallRuleArgs> FirewallRules
        {
            get => _firewallRules ?? (_firewallRules = new InputList<Inputs.LoadBalancerFirewallRuleArgs>());
            set => _firewallRules = value;
        }

        [Input("forwardingRules", required: true)]
        private InputList<Inputs.LoadBalancerForwardingRuleArgs>? _forwardingRules;

        /// <summary>
        /// List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
        /// </summary>
        public InputList<Inputs.LoadBalancerForwardingRuleArgs> ForwardingRules
        {
            get => _forwardingRules ?? (_forwardingRules = new InputList<Inputs.LoadBalancerForwardingRuleArgs>());
            set => _forwardingRules = value;
        }

        /// <summary>
        /// A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.LoadBalancerHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The load balancer's label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A private network ID that the load balancer should be attached to.
        /// </summary>
        [Input("privateNetwork")]
        public Input<string>? PrivateNetwork { get; set; }

        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        [Input("proxyProtocol")]
        public Input<bool>? ProxyProtocol { get; set; }

        /// <summary>
        /// The region your load balancer is deployed in.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.LoadBalancerSslArgs>? Ssl { get; set; }

        /// <summary>
        /// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
        /// </summary>
        [Input("sslRedirect")]
        public Input<bool>? SslRedirect { get; set; }

        /// <summary>
        /// A VPC ID that the load balancer should be attached to.
        /// </summary>
        [Input("vpc")]
        public Input<string>? Vpc { get; set; }

        public LoadBalancerArgs()
        {
        }
        public static new LoadBalancerArgs Empty => new LoadBalancerArgs();
    }

    public sealed class LoadBalancerState : global::Pulumi.ResourceArgs
    {
        [Input("attachedInstances")]
        private InputList<string>? _attachedInstances;

        /// <summary>
        /// Array of instances that are currently attached to the load balancer.
        /// </summary>
        public InputList<string> AttachedInstances
        {
            get => _attachedInstances ?? (_attachedInstances = new InputList<string>());
            set => _attachedInstances = value;
        }

        /// <summary>
        /// The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`
        /// </summary>
        [Input("balancingAlgorithm")]
        public Input<string>? BalancingAlgorithm { get; set; }

        /// <summary>
        /// Name for your given sticky session.
        /// </summary>
        [Input("cookieName")]
        public Input<string>? CookieName { get; set; }

        [Input("firewallRules")]
        private InputList<Inputs.LoadBalancerFirewallRuleGetArgs>? _firewallRules;

        /// <summary>
        /// Defines the firewall rules for a load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerFirewallRuleGetArgs> FirewallRules
        {
            get => _firewallRules ?? (_firewallRules = new InputList<Inputs.LoadBalancerFirewallRuleGetArgs>());
            set => _firewallRules = value;
        }

        [Input("forwardingRules")]
        private InputList<Inputs.LoadBalancerForwardingRuleGetArgs>? _forwardingRules;

        /// <summary>
        /// List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.
        /// </summary>
        public InputList<Inputs.LoadBalancerForwardingRuleGetArgs> ForwardingRules
        {
            get => _forwardingRules ?? (_forwardingRules = new InputList<Inputs.LoadBalancerForwardingRuleGetArgs>());
            set => _forwardingRules = value;
        }

        /// <summary>
        /// Boolean value that indicates if SSL is enabled.
        /// </summary>
        [Input("hasSsl")]
        public Input<bool>? HasSsl { get; set; }

        /// <summary>
        /// A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.LoadBalancerHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// IPv4 address for your load balancer.
        /// </summary>
        [Input("ipv4")]
        public Input<string>? Ipv4 { get; set; }

        /// <summary>
        /// IPv6 address for your load balancer.
        /// </summary>
        [Input("ipv6")]
        public Input<string>? Ipv6 { get; set; }

        /// <summary>
        /// The load balancer's label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// A private network ID that the load balancer should be attached to.
        /// </summary>
        [Input("privateNetwork")]
        public Input<string>? PrivateNetwork { get; set; }

        /// <summary>
        /// Boolean value that indicates if Proxy Protocol is enabled.
        /// </summary>
        [Input("proxyProtocol")]
        public Input<bool>? ProxyProtocol { get; set; }

        /// <summary>
        /// The region your load balancer is deployed in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.LoadBalancerSslGetArgs>? Ssl { get; set; }

        /// <summary>
        /// Boolean value that indicates if HTTP calls will be redirected to HTTPS.
        /// </summary>
        [Input("sslRedirect")]
        public Input<bool>? SslRedirect { get; set; }

        /// <summary>
        /// Current status for the load balancer
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A VPC ID that the load balancer should be attached to.
        /// </summary>
        [Input("vpc")]
        public Input<string>? Vpc { get; set; }

        public LoadBalancerState()
        {
        }
        public static new LoadBalancerState Empty => new LoadBalancerState();
    }
}
