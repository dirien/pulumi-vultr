// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    /// <summary>
    /// Provides a Vultr virtual file system storage resource. This can be used to create, read, modify and delete a virtual file system storage.
    /// 
    /// ## Example Usage
    /// 
    /// Define a virtual file system storage resource:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vultr = ediri.Vultr;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myVfsStorage = new Vultr.VirtualFileSystemStorage("myVfsStorage", new()
    ///     {
    ///         Label = "vultr-vfs-storage",
    ///         Region = "ewr",
    ///         SizeGb = 10,
    ///         Tags = new[]
    ///         {
    ///             "terraform",
    ///             "important",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual file system storage can be imported using the `ID`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage my_vfs_storage 79210a84-bc58-494f-8dd1-953685654f7f
    /// ```
    /// </summary>
    [VultrResourceType("vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage")]
    public partial class VirtualFileSystemStorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of UUIDs to attach to the virtual file system storage subscription.
        /// </summary>
        [Output("attachedInstances")]
        public Output<ImmutableArray<string>> AttachedInstances { get; private set; } = null!;

        /// <summary>
        /// A list of attchment states for instances currently attached to the virtual file system storage.
        /// </summary>
        [Output("attachments")]
        public Output<ImmutableArray<Outputs.VirtualFileSystemStorageAttachment>> Attachments { get; private set; } = null!;

        /// <summary>
        /// The current pending charges for the virtual file system storage subscription in USD.
        /// </summary>
        [Output("charges")]
        public Output<double> Charges { get; private set; } = null!;

        /// <summary>
        /// The cost per month of the virtual file system storage subscription in USD.
        /// </summary>
        [Output("cost")]
        public Output<double> Cost { get; private set; } = null!;

        /// <summary>
        /// The date the virtual file system storage subscription was added to your Vultr account.
        /// </summary>
        [Output("dateCreated")]
        public Output<string> DateCreated { get; private set; } = null!;

        /// <summary>
        /// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
        /// </summary>
        [Output("diskType")]
        public Output<string?> DiskType { get; private set; } = null!;

        /// <summary>
        /// The label to give to the virtual file system storage subscription.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The region in which this virtual file system storage will reside.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The size of the given virtual file system storage subscription.
        /// </summary>
        [Output("sizeGb")]
        public Output<int> SizeGb { get; private set; } = null!;

        /// <summary>
        /// The status of the virtual file system storage subscription.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A list of tags to be used on the virtual file system storage subscription.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualFileSystemStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualFileSystemStorage(string name, VirtualFileSystemStorageArgs args, CustomResourceOptions? options = null)
            : base("vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage", name, args ?? new VirtualFileSystemStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualFileSystemStorage(string name, Input<string> id, VirtualFileSystemStorageState? state = null, CustomResourceOptions? options = null)
            : base("vultr:index/virtualFileSystemStorage:VirtualFileSystemStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-vultr",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualFileSystemStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualFileSystemStorage Get(string name, Input<string> id, VirtualFileSystemStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualFileSystemStorage(name, id, state, options);
        }
    }

    public sealed class VirtualFileSystemStorageArgs : global::Pulumi.ResourceArgs
    {
        [Input("attachedInstances")]
        private InputList<string>? _attachedInstances;

        /// <summary>
        /// A list of UUIDs to attach to the virtual file system storage subscription.
        /// </summary>
        public InputList<string> AttachedInstances
        {
            get => _attachedInstances ?? (_attachedInstances = new InputList<string>());
            set => _attachedInstances = value;
        }

        /// <summary>
        /// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// The label to give to the virtual file system storage subscription.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The region in which this virtual file system storage will reside.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The size of the given virtual file system storage subscription.
        /// </summary>
        [Input("sizeGb", required: true)]
        public Input<int> SizeGb { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to be used on the virtual file system storage subscription.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public VirtualFileSystemStorageArgs()
        {
        }
        public static new VirtualFileSystemStorageArgs Empty => new VirtualFileSystemStorageArgs();
    }

    public sealed class VirtualFileSystemStorageState : global::Pulumi.ResourceArgs
    {
        [Input("attachedInstances")]
        private InputList<string>? _attachedInstances;

        /// <summary>
        /// A list of UUIDs to attach to the virtual file system storage subscription.
        /// </summary>
        public InputList<string> AttachedInstances
        {
            get => _attachedInstances ?? (_attachedInstances = new InputList<string>());
            set => _attachedInstances = value;
        }

        [Input("attachments")]
        private InputList<Inputs.VirtualFileSystemStorageAttachmentGetArgs>? _attachments;

        /// <summary>
        /// A list of attchment states for instances currently attached to the virtual file system storage.
        /// </summary>
        public InputList<Inputs.VirtualFileSystemStorageAttachmentGetArgs> Attachments
        {
            get => _attachments ?? (_attachments = new InputList<Inputs.VirtualFileSystemStorageAttachmentGetArgs>());
            set => _attachments = value;
        }

        /// <summary>
        /// The current pending charges for the virtual file system storage subscription in USD.
        /// </summary>
        [Input("charges")]
        public Input<double>? Charges { get; set; }

        /// <summary>
        /// The cost per month of the virtual file system storage subscription in USD.
        /// </summary>
        [Input("cost")]
        public Input<double>? Cost { get; set; }

        /// <summary>
        /// The date the virtual file system storage subscription was added to your Vultr account.
        /// </summary>
        [Input("dateCreated")]
        public Input<string>? DateCreated { get; set; }

        /// <summary>
        /// The underlying disk type to use for the virtual file system storage.  Default is `nvme`.
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// The label to give to the virtual file system storage subscription.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region in which this virtual file system storage will reside.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The size of the given virtual file system storage subscription.
        /// </summary>
        [Input("sizeGb")]
        public Input<int>? SizeGb { get; set; }

        /// <summary>
        /// The status of the virtual file system storage subscription.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to be used on the virtual file system storage subscription.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public VirtualFileSystemStorageState()
        {
        }
        public static new VirtualFileSystemStorageState Empty => new VirtualFileSystemStorageState();
    }
}
