// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Vultr
{
    public static class GetBlockStorage
    {
        /// <summary>
        /// Get information about a Vultr block storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a block storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myBlockStorage = Vultr.GetBlockStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetBlockStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-block-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBlockStorageResult> InvokeAsync(GetBlockStorageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBlockStorageResult>("vultr:index/getBlockStorage:getBlockStorage", args ?? new GetBlockStorageArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr block storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a block storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myBlockStorage = Vultr.GetBlockStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetBlockStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-block-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBlockStorageResult> Invoke(GetBlockStorageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageResult>("vultr:index/getBlockStorage:getBlockStorage", args ?? new GetBlockStorageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr block storage subscription.
        /// 
        /// ## Example Usage
        /// 
        /// Get the information for a block storage subscription by `label`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myBlockStorage = Vultr.GetBlockStorage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetBlockStorageFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-block-storage-label",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBlockStorageResult> Invoke(GetBlockStorageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockStorageResult>("vultr:index/getBlockStorage:getBlockStorage", args ?? new GetBlockStorageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBlockStorageArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetBlockStorageFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding block storage subscriptions.
        /// </summary>
        public List<Inputs.GetBlockStorageFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBlockStorageFilterArgs>());
            set => _filters = value;
        }

        public GetBlockStorageArgs()
        {
        }
        public static new GetBlockStorageArgs Empty => new GetBlockStorageArgs();
    }

    public sealed class GetBlockStorageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetBlockStorageFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding block storage subscriptions.
        /// </summary>
        public InputList<Inputs.GetBlockStorageFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBlockStorageFilterInputArgs>());
            set => _filters = value;
        }

        public GetBlockStorageInvokeArgs()
        {
        }
        public static new GetBlockStorageInvokeArgs Empty => new GetBlockStorageInvokeArgs();
    }


    [OutputType]
    public sealed class GetBlockStorageResult
    {
        /// <summary>
        /// The ID of the VPS the block storage subscription is attached to.
        /// </summary>
        public readonly string AttachedToInstance;
        /// <summary>
        /// The type of block storage volume.
        /// </summary>
        public readonly string BlockType;
        /// <summary>
        /// The cost per month of the block storage subscription in USD.
        /// </summary>
        public readonly int Cost;
        /// <summary>
        /// The date the block storage subscription was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        public readonly ImmutableArray<Outputs.GetBlockStorageFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The label of the block storage subscription.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
        /// </summary>
        public readonly string MountId;
        /// <summary>
        /// The region ID of the block storage subscription.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The size of the block storage subscription in GB.
        /// </summary>
        public readonly int SizeGb;
        /// <summary>
        /// The status of the block storage subscription.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetBlockStorageResult(
            string attachedToInstance,

            string blockType,

            int cost,

            string dateCreated,

            ImmutableArray<Outputs.GetBlockStorageFilterResult> filters,

            string id,

            string label,

            string mountId,

            string region,

            int sizeGb,

            string status)
        {
            AttachedToInstance = attachedToInstance;
            BlockType = blockType;
            Cost = cost;
            DateCreated = dateCreated;
            Filters = filters;
            Id = id;
            Label = label;
            MountId = mountId;
            Region = region;
            SizeGb = sizeGb;
            Status = status;
        }
    }
}
